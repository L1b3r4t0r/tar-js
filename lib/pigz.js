// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 138768;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([116,114,121,95,114,101,116,95,32,61,61,32,48,32,38,38,32,34,116,114,121,58,32,112,116,104,114,101,97,100,95,115,101,116,115,112,101,99,105,102,105,99,40,41,32,102,97,105,108,101,100,34,0,0,0,0,112,105,103,122,46,99,0,0,109,97,105,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([112,105,103,122,0,0,0,0,71,90,73,80,0,0,0,0,99,97,110,110,111,116,32,112,114,111,118,105,100,101,32,102,105,108,101,115,32,105,110,32,71,90,73,80,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,0,0,0,0,0,0,0,80,73,71,90,0,0,0,0,99,97,110,110,111,116,32,112,114,111,118,105,100,101,32,102,105,108,101,115,32,105,110,32,80,73,71,90,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,0,0,0,0,0,0,0,117,110,112,105,103,122,0,0,103,117,110,122,105,112,0,0,99,97,116,0,0,0,0,0,45,45,0,0,0,0,0,0,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,119,105,108,108,32,98,101,32,99,111,110,99,97,116,101,110,97,116,101,100,32,122,105,112,32,102,105,108,101,115,32,45,45,32,37,115,32,119,105,108,108,32,110,111,116,32,98,101,32,97,98,108,101,32,116,111,32,101,120,116,114,97,99,116,0,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,97,98,111,114,116,58,32,37,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,97,117,103,104,116,32,61,61,32,99,116,104,114,101,97,100,115,0,0,0,0,0,0,102,105,110,105,115,104,95,106,111,98,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,111,117,110,116,32,61,61,32,112,111,111,108,45,62,109,97,100,101,0,0,0,0,0,102,114,101,101,95,112,111,111,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,46,50,46,56,0,0,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,0,0,0,0,0,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,0,0,115,116,114,109,45,62,97,118,97,105,108,95,105,110,32,61,61,32,48,0,0,0,0,0,115,105,110,103,108,101,95,99,111,109,112,114,101,115,115,0,98,105,116,115,32,61,61,32,90,95,79,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,111,117,116,115,105,122,101,32,62,32,48,0,0,0,0,0,119,114,105,116,101,32,101,114,114,111,114,32,111,110,32,37,115,32,40,37,115,41,0,0,114,101,97,100,32,101,114,114,111,114,32,111,110,32,37,115,32,40,37,115,41,0,0,0,16,4,1,0,24,4,1,0,32,4,1,0,40,4,1,0,48,4,1,0,56,4,1,0,64,4,1,0,72,4,1,0,80,4,1,0,88,4,1,0,96,4,1,0,0,0,0,0,46,122,0,0,0,0,0,0,45,122,0,0,0,0,0,0,95,122,0,0,0,0,0,0,46,90,0,0,0,0,0,0,46,103,122,0,0,0,0,0,45,103,122,0,0,0,0,0,46,122,122,0,0,0,0,0,45,122,122,0,0,0,0,0,46,122,105,112,0,0,0,0,46,90,73,80,0,0,0,0,46,116,103,122,0,0,0,0,60,115,116,100,105,110,62,0,37,115,32,116,111,111,32,108,97,114,103,101,32,45,45,32,110,111,116,32,99,111,109,112,105,108,101,100,32,119,105,116,104,32,108,97,114,103,101,32,102,105,108,101,32,115,117,112,112,111,114,116,0,0,0,0,115,107,105,112,112,105,110,103,58,32,37,115,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,0,0,0,0,0,115,107,105,112,112,105,110,103,58,32,37,115,32,105,115,32,97,32,115,112,101,99,105,97,108,32,102,105,108,101,32,111,114,32,100,101,118,105,99,101,0,0,0,0,0,0,0,0,115,107,105,112,112,105,110,103,58,32,37,115,32,105,115,32,97,32,115,121,109,98,111,108,105,99,32,108,105,110,107,0,115,107,105,112,112,105,110,103,58,32,37,115,32,105,115,32,97,32,100,105,114,101,99,116,111,114,121,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,115,107,105,112,112,105,110,103,58,32,37,115,32,101,110,100,115,32,119,105,116,104,32,37,115,0,0,0,0,0,0,0,115,107,105,112,112,105,110,103,58,32,37,115,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,99,111,109,112,114,101,115,115,101,100,32,115,117,102,102,105,120,0,0,0,0,115,107,105,112,112,105,110,103,58,32,37,115,32,105,115,32,110,111,116,32,99,111,109,112,114,101,115,115,101,100,0,0,115,107,105,112,112,105,110,103,58,32,37,115,32,99,111,114,114,117,112,116,101,100,58,32,105,110,118,97,108,105,100,32,104,101,97,100,101,114,32,99,114,99,0,0,0,0,0,0,115,107,105,112,112,105,110,103,58,32,37,115,32,104,97,115,32,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,0,0,0,0,112,114,111,99,101,115,115,0,116,114,121,95,115,116,97,99,107,95,32,33,61,32,78,85,76,76,32,38,38,32,34,116,114,121,58,32,110,97,107,101,100,32,112,117,110,116,34,0,115,107,105,112,112,105,110,103,58,32,37,115,0,0,0,0,60,115,116,100,111,117,116,62,0,0,0,0,0,0,0,0,116,114,121,105,110,103,32,116,111,32,119,114,105,116,101,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,32,116,111,32,97,32,116,101,114,109,105,110,97,108,32,40,117,115,101,32,45,102,32,116,111,32,102,111,114,99,101,41,0,46,116,97,114,0,0,0,0,37,115,32,101,120,105,115,116,115,32,45,45,32,111,118,101,114,119,114,105,116,101,32,40,121,47,110,41,63,32,0,0,115,107,105,112,112,105,110,103,58,32,37,115,32,101,120,105,115,116,115,0,0,0,0,0,37,115,32,116,111,32,37,115,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,117,115,101,32,33,61,32,48,0,0,0,0,0,0,0,0,100,114,111,112,95,115,112,97,99,101,0,0,0,0,0,0,99,111,109,112,114,101,115,115,95,116,104,114,101,97,100,0,106,111,98,32,33,61,32,78,85,76,76,0,0,0,0,0,106,111,98,45,62,111,117,116,45,62,108,101,110,32,43,32,111,117,116,115,105,122,101,32,43,32,53,32,60,61,32,106,111,98,45,62,111,117,116,45,62,115,105,122,101,0,0,0,0,0,0,0,0,0,0,0,100,101,102,108,97,116,101,95,101,110,103,105,110,101,0,0,108,101,110,32,60,32,53,51,57,48,48,48,56,57,54,85,76,0,0,0,0,0,0,0,97,112,112,101,110,100,95,108,101,110,0,0,0,0,0,0,112,111,111,108,45,62,108,105,109,105,116,32,33,61,32,48,0,0,0,0,0,0,0,0,103,101,116,95,115,112,97,99,101,0,0,0,0,0,0,0,119,114,105,116,101,95,116,104,114,101,97,100,0,0,0,0,99,111,109,112,114,101,115,115,95,104,101,97,100,32,61,61,32,78,85,76,76,32,38,38,32,112,101,101,107,95,108,111,99,107,40,99,111,109,112,114,101,115,115,95,104,97,118,101,41,32,61,61,32,48,0,0,119,114,105,116,101,95,104,101,97,100,32,61,61,32,78,85,76,76,0,0,0,0,0,0,108,111,97,100,95,114,101,97,100,0,0,0,0,0,0,0,115,107,105,112,112,105,110,103,58,32,37,115,32,110,111,116,32,99,111,109,112,114,101,115,115,101,100,0,0,0,0,0,115,107,105,112,112,105,110,103,58,32,37,115,32,110,111,116,32,97,32,118,97,108,105,100,32,103,122,105,112,32,102,105,108,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+65800);
/* memory initializer */ allocate([111,117,116,98,95,99,104,101,99,107,0,0,0,0,0,0,111,117,116,98,95,119,114,105,116,101,0,0,0,0,0,0,60,46,46,46,62,0,0,0,46,46,46,0,0,0,0,0,45,45,45,45,45,45,32,45,45,45,45,45,0,0,0,0,109,101,116,104,111,100,32,32,32,32,99,104,101,99,107,32,32,32,32,116,105,109,101,115,116,97,109,112,32,32,32,32,0,0,0,0,0,0,0,0,99,111,109,112,114,101,115,115,101,100,32,32,32,111,114,105,103,105,110,97,108,32,114,101,100,117,99,101,100,32,32,110,97,109,101,0,0,0,0,0,122,105,112,37,51,100,32,32,45,45,45,45,45,45,45,45,32,32,37,115,32,32,0,0,122,105,112,37,51,100,32,32,37,48,56,108,120,32,32,37,115,32,32,0,0,0,0,0,122,108,105,98,37,50,100,32,32,37,48,56,108,120,32,32,37,115,32,32,0,0,0,0,108,122,119,32,32,32,32,32,45,45,45,45,45,45,45,45,32,32,37,115,32,32,0,0,103,122,105,112,37,50,100,32,32,37,48,56,108,120,32,32,37,115,32,32,0,0,0,0,37,49,48,106,100,32,37,49,48,106,100,63,32,32,117,110,107,32,32,32,32,37,115,10,0,0,0,0,0,0,0,0,37,49,48,106,100,32,37,49,48,106,100,32,37,54,46,49,102,37,37,32,32,37,115,10,0,0,0,0,0,0,0,0,37,115,58,32,108,122,119,32,112,114,101,109,97,116,117,114,101,32,101,110,100,0,0,0,37,115,58,32,117,110,107,110,111,119,110,32,108,122,119,32,102,108,97,103,115,32,115,101,116,0,0,0,0,0,0,0,37,115,58,32,108,122,119,32,98,105,116,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,0,37,115,58,32,105,110,118,97,108,105,100,32,108,122,119,32,99,111,100,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+100544);
/* memory initializer */ allocate([37,115,58,32,99,111,114,114,117,112,116,101,100,32,45,45,32,105,110,118,97,108,105,100,32,100,101,102,108,97,116,101,32,100,97,116,97,32,40,37,115,41,0,0,0,0,0,0,37,115,58,32,99,111,114,114,117,112,116,101,100,32,45,45,32,105,110,99,111,109,112,108,101,116,101,32,100,101,102,108,97,116,101,32,100,97,116,97,0,0,0,0,0,0,0,0,37,115,58,32,99,111,114,114,117,112,116,101,100,32,101,110,116,114,121,32,45,45,32,109,105,115,115,105,110,103,32,116,114,97,105,108,101,114,0,0,37,115,58,32,99,111,114,114,117,112,116,101,100,32,101,110,116,114,121,32,45,45,32,99,114,99,51,50,32,109,105,115,109,97,116,99,104,0,0,0,37,115,58,32,99,111,114,114,117,112,116,101,100,32,101,110,116,114,121,32,45,45,32,108,101,110,103,116,104,32,109,105,115,109,97,116,99,104,0,0,37,115,58,32,99,111,114,114,117,112,116,101,100,32,45,45,32,109,105,115,115,105,110,103,32,116,114,97,105,108,101,114,0,0,0,0,0,0,0,0,37,115,58,32,99,111,114,114,117,112,116,101,100,32,45,45,32,97,100,108,101,114,51,50,32,109,105,115,109,97,116,99,104,0,0,0,0,0,0,0,37,115,58,32,99,111,114,114,117,112,116,101,100,32,45,45,32,99,114,99,51,50,32,109,105,115,109,97,116,99,104,0,37,115,58,32,99,111,114,114,117,112,116,101,100,32,45,45,32,108,101,110,103,116,104,32,109,105,115,109,97,116,99,104,0,0,0,0,0,0,0,0,119,97,114,110,105,110,103,58,32,37,115,58,32,101,110,116,114,105,101,115,32,97,102,116,101,114,32,116,104,101,32,102,105,114,115,116,32,119,101,114,101,32,105,103,110,111,114,101,100,0,0,0,0,0,0,0,119,97,114,110,105,110,103,58,32,37,115,58,32,116,114,97,105,108,105,110,103,32,106,117,110,107,32,119,97,115,32,105,103,110,111,114,101,100,0,0,37,115,58,32,0,0,0,0,37,115,10,0,0,0,0,0,240,12,2,0,24,13,2,0,104,13,2,0,184,13,2,0,56,5,1,0,8,14,2,0,24,14,2,0,104,14,2,0,168,14,2,0,248,14,2,0,72,15,2,0,128,15,2,0,208,15,2,0,24,16,2,0,80,16,2,0,160,16,2,0,232,16,2,0,48,17,2,0,128,17,2,0,200,17,2,0,8,18,2,0,72,18,2,0,144,18,2,0,224,18,2,0,32,19,2,0,112,19,2,0,184,19,2,0,240,19,2,0,56,20,2,0,128,20,2,0,200,20,2,0,16,21,2,0,88,21,2,0,144,21,2,0,192,21,2,0,8,22,2,0,85,115,97,103,101,58,32,112,105,103,122,32,91,111,112,116,105,111,110,115,93,32,91,102,105,108,101,115,32,46,46,46,93,0,0,0,0,0,0,0,32,32,119,105,108,108,32,99,111,109,112,114,101,115,115,32,102,105,108,101,115,32,105,110,32,112,108,97,99,101,44,32,97,100,100,105,110,103,32,116,104,101,32,115,117,102,102,105,120,32,39,46,103,122,39,46,32,32,73,102,32,110,111,32,102,105,108,101,115,32,97,114,101,0,0,0,0,0,0,0,32,32,115,112,101,99,105,102,105,101,100,44,32,115,116,100,105,110,32,119,105,108,108,32,98,101,32,99,111,109,112,114,101,115,115,101,100,32,116,111,32,115,116,100,111,117,116,46,32,32,112,105,103,122,32,100,111,101,115,32,119,104,97,116,32,103,122,105,112,32,100,111,101,115,44,0,0,0,0,0,32,32,98,117,116,32,115,112,114,101,97,100,115,32,116,104,101,32,119,111,114,107,32,111,118,101,114,32,109,117,108,116,105,112,108,101,32,112,114,111,99,101,115,115,111,114,115,32,97,110,100,32,99,111,114,101,115,32,119,104,101,110,32,99,111,109,112,114,101,115,115,105,110,103,46,0,0,0,0,0,79,112,116,105,111,110,115,58,0,0,0,0,0,0,0,0,32,32,45,48,32,116,111,32,45,57,44,32,45,49,49,32,32,32,32,32,32,32,32,67,111,109,112,114,101,115,115,105,111,110,32,108,101,118,101,108,32,40,49,49,32,105,115,32,109,117,99,104,32,115,108,111,119,101,114,44,32,97,32,102,101,119,32,37,32,98,101,116,116,101,114,41,0,0,0,0,32,32,45,45,102,97,115,116,44,32,45,45,98,101,115,116,32,32,32,32,32,32,32,67,111,109,112,114,101,115,115,105,111,110,32,108,101,118,101,108,115,32,49,32,97,110,100,32,57,32,114,101,115,112,101,99,116,105,118,101,108,121,0,0,32,32,45,98,44,32,45,45,98,108,111,99,107,115,105,122,101,32,109,109,109,32,32,83,101,116,32,99,111,109,112,114,101,115,115,105,111,110,32,98,108,111,99,107,32,115,105,122,101,32,116,111,32,109,109,109,75,32,40,100,101,102,97,117,108,116,32,49,50,56,75,41,0,0,0,0,0,0,0,0,32,32,45,99,44,32,45,45,115,116,100,111,117,116,32,32,32,32,32,32,32,32,32,87,114,105,116,101,32,97,108,108,32,112,114,111,99,101,115,115,101,100,32,111,117,116,112,117,116,32,116,111,32,115,116,100,111,117,116,32,40,119,111,110,39,116,32,100,101,108,101,116,101,41,0,0,0,0,0,0,32,32,45,100,44,32,45,45,100,101,99,111,109,112,114,101,115,115,32,32,32,32,32,68,101,99,111,109,112,114,101,115,115,32,116,104,101,32,99,111,109,112,114,101,115,115,101,100,32,105,110,112,117,116,0,0,32,32,45,102,44,32,45,45,102,111,114,99,101,32,32,32,32,32,32,32,32,32,32,70,111,114,99,101,32,111,118,101,114,119,114,105,116,101,44,32,99,111,109,112,114,101,115,115,32,46,103,122,44,32,108,105,110,107,115,44,32,97,110,100,32,116,111,32,116,101,114,109,105,110,97,108,0,0,0,0,32,32,45,70,32,32,45,45,102,105,114,115,116,32,32,32,32,32,32,32,32,32,32,68,111,32,105,116,101,114,97,116,105,111,110,115,32,102,105,114,115,116,44,32,98,101,102,111,114,101,32,98,108,111,99,107,32,115,112,108,105,116,32,102,111,114,32,45,49,49,0,0,32,32,45,104,44,32,45,45,104,101,108,112,32,32,32,32,32,32,32,32,32,32,32,68,105,115,112,108,97,121,32,97,32,104,101,108,112,32,115,99,114,101,101,110,32,97,110,100,32,113,117,105,116,0,0,0,32,32,45,105,44,32,45,45,105,110,100,101,112,101,110,100,101,110,116,32,32,32,32,67,111,109,112,114,101,115,115,32,98,108,111,99,107,115,32,105,110,100,101,112,101,110,100,101,110,116,108,121,32,102,111,114,32,100,97,109,97,103,101,32,114,101,99,111,118,101,114,121,0,0,0,0,0,0,0,0,32,32,45,73,44,32,45,45,105,116,101,114,97,116,105,111,110,115,32,110,32,32,32,78,117,109,98,101,114,32,111,102,32,105,116,101,114,97,116,105,111,110,115,32,102,111,114,32,45,49,49,32,111,112,116,105,109,105,122,97,116,105,111,110,0,0,0,0,0,0,0,0,32,32,45,107,44,32,45,45,107,101,101,112,32,32,32,32,32,32,32,32,32,32,32,68,111,32,110,111,116,32,100,101,108,101,116,101,32,111,114,105,103,105,110,97,108,32,102,105,108,101,32,97,102,116,101,114,32,112,114,111,99,101,115,115,105,110,103,0,0,0,0,0,32,32,45,75,44,32,45,45,122,105,112,32,32,32,32,32,32,32,32,32,32,32,32,67,111,109,112,114,101,115,115,32,116,111,32,80,75,87,97,114,101,32,122,105,112,32,40,46,122,105,112,41,32,115,105,110,103,108,101,32,101,110,116,114,121,32,102,111,114,109,97,116,0,0,0,0,0,0,0,0,32,32,45,108,44,32,45,45,108,105,115,116,32,32,32,32,32,32,32,32,32,32,32,76,105,115,116,32,116,104,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,99,111,109,112,114,101,115,115,101,100,32,105,110,112,117,116,0,0,0,0,0,0,0,0,32,32,45,76,44,32,45,45,108,105,99,101,110,115,101,32,32,32,32,32,32,32,32,68,105,115,112,108,97,121,32,116,104,101,32,112,105,103,122,32,108,105,99,101,110,115,101,32,97,110,100,32,113,117,105,116,0,0,0,0,0,0,0,0,32,32,45,77,44,32,45,45,109,97,120,115,112,108,105,116,115,32,110,32,32,32,32,77,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,115,112,108,105,116,32,98,108,111,99,107,115,32,102,111,114,32,45,49,49,0,0,0,32,32,45,110,44,32,45,45,110,111,45,110,97,109,101,32,32,32,32,32,32,32,32,68,111,32,110,111,116,32,115,116,111,114,101,32,111,114,32,114,101,115,116,111,114,101,32,102,105,108,101,32,110,97,109,101,32,105,110,47,102,114,111,109,32,104,101,97,100,101,114,0,32,32,45,78,44,32,45,45,110,97,109,101,32,32,32,32,32,32,32,32,32,32,32,83,116,111,114,101,47,114,101,115,116,111,114,101,32,102,105,108,101,32,110,97,109,101,32,97,110,100,32,109,111,100,32,116,105,109,101,32,105,110,47,102,114,111,109,32,104,101,97,100,101,114,0,0,0,0,0,0,32,32,45,79,32,32,45,45,111,110,101,98,108,111,99,107,32,32,32,32,32,32,32,68,111,32,110,111,116,32,115,112,108,105,116,32,105,110,116,111,32,115,109,97,108,108,101,114,32,98,108,111,99,107,115,32,102,111,114,32,45,49,49,0,32,32,45,112,44,32,45,45,112,114,111,99,101,115,115,101,115,32,110,32,32,32,32,65,108,108,111,119,32,117,112,32,116,111,32,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,104,114,101,97,100,115,32,40,100,101,102,97,117,108,116,32,105,115,32,116,104,101,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,117,109,98,101,114,32,111,102,32,111,110,108,105,110,101,32,112,114,111,99,101,115,115,111,114,115,44,32,111,114,32,56,32,105,102,32,117,110,107,110,111,119,110,41,0,0,0,0,32,32,45,113,44,32,45,45,113,117,105,101,116,32,32,32,32,32,32,32,32,32,32,80,114,105,110,116,32,110,111,32,109,101,115,115,97,103,101,115,44,32,101,118,101,110,32,111,110,32,101,114,114,111,114,0,32,32,45,114,44,32,45,45,114,101,99,117,114,115,105,118,101,32,32,32,32,32,32,80,114,111,99,101,115,115,32,116,104,101,32,99,111,110,116,101,110,116,115,32,111,102,32,97,108,108,32,115,117,98,100,105,114,101,99,116,111,114,105,101,115,0,0,0,0,0,0,0,32,32,45,82,44,32,45,45,114,115,121,110,99,97,98,108,101,32,32,32,32,32,32,73,110,112,117,116,45,100,101,116,101,114,109,105,110,101,100,32,98,108,111,99,107,32,108,111,99,97,116,105,111,110,115,32,102,111,114,32,114,115,121,110,99,0,0,0,0,0,0,0,32,32,45,83,44,32,45,45,115,117,102,102,105,120,32,46,115,115,115,32,32,32,32,85,115,101,32,115,117,102,102,105,120,32,46,115,115,115,32,105,110,115,116,101,97,100,32,111,102,32,46,103,122,32,40,102,111,114,32,99,111,109,112,114,101,115,115,105,111,110,41,0,32,32,45,116,44,32,45,45,116,101,115,116,32,32,32,32,32,32,32,32,32,32,32,84,101,115,116,32,116,104,101,32,105,110,116,101,103,114,105,116,121,32,111,102,32,116,104,101,32,99,111,109,112,114,101,115,115,101,100,32,105,110,112,117,116,0,0,0,0,0,0,0,32,32,45,84,44,32,45,45,110,111,45,116,105,109,101,32,32,32,32,32,32,32,32,68,111,32,110,111,116,32,115,116,111,114,101,32,111,114,32,114,101,115,116,111,114,101,32,109,111,100,32,116,105,109,101,32,105,110,47,102,114,111,109,32,104,101,97,100,101,114,0,0,32,32,45,118,44,32,45,45,118,101,114,98,111,115,101,32,32,32,32,32,32,32,32,80,114,111,118,105,100,101,32,109,111,114,101,32,118,101,114,98,111,115,101,32,111,117,116,112,117,116,0,0,0,0,0,0,32,32,45,86,32,32,45,45,118,101,114,115,105,111,110,32,32,32,32,32,32,32,32,83,104,111,119,32,116,104,101,32,118,101,114,115,105,111,110,32,111,102,32,112,105,103,122,0,32,32,45,122,44,32,45,45,122,108,105,98,32,32,32,32,32,32,32,32,32,32,32,67,111,109,112,114,101,115,115,32,116,111,32,122,108,105,98,32,40,46,122,122,41,32,105,110,115,116,101,97,100,32,111,102,32,103,122,105,112,32,102,111,114,109,97,116,0,0,0,0,32,32,45,45,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,65,108,108,32,97,114,103,117,109,101,110,116,115,32,97,102,116,101,114,32,34,45,45,34,32,97,114,101,32,116,114,101,97,116,101,100,32,97,115,32,102,105,108,101,115,0,0,0,0,0,0,0,0,0,0,0,0,45,88,0,0,0,0,0,0,98,112,83,73,77,0,0,0,109,105,115,115,105,110,103,32,112,97,114,97,109,101,116,101,114,32,97,102,116,101,114,32,37,115,0,0,0,0,0,0,176,25,2,0,184,25,2,0,192,25,2,0,200,25,2,0,208,25,2,0,216,25,2,0,224,25,2,0,184,25,2,0,232,25,2,0,248,25,2,0,0,26,2,0,16,26,2,0,24,26,2,0,32,26,2,0,40,26,2,0,48,26,2,0,56,26,2,0,64,26,2,0,72,26,2,0,80,26,2,0,88,26,2,0,104,26,2,0,112,26,2,0,128,26,2,0,136,26,2,0,144,26,2,0,152,26,2,0,160,26,2,0,168,26,2,0,176,26,2,0,184,26,2,0,200,26,2,0,208,26,2,0,216,26,2,0,224,26,2,0,232,26,2,0,240,26,2,0,248,26,2,0,0,27,2,0,16,27,2,0,24,27,2,0,40,27,2,0,48,27,2,0,56,27,2,0,64,27,2,0,80,27,2,0,88,27,2,0,104,27,2,0,112,27,2,0,56,27,2,0,120,27,2,0,128,27,2,0,136,27,2,0,144,27,2,0,152,27,2,0,160,27,2,0,168,27,2,0,128,27,2,0,184,27,2,0,16,26,2,0,200,27,2,0,208,27,2,0,216,27,2,0,224,27,2,0,232,27,2,0,240,27,2,0,248,27,2,0,0,28,2,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,58,32,37,115,0,0,0,0,0,0,105,110,118,97,108,105,100,32,117,115,97,103,101,58,32,45,115,32,109,117,115,116,32,98,101,32,102,111,108,108,111,119,101,100,32,98,121,32,115,112,97,99,101,0,0,0,0,0,111,110,108,121,32,108,101,118,101,108,115,32,48,46,46,57,32,97,110,100,32,49,49,32,97,114,101,32,97,108,108,111,119,101,100,0,0,0,0,0,112,105,103,122,32,50,46,51,46,51,10,0,0,0,0,0,67,111,112,121,114,105,103,104,116,32,40,67,41,32,50,48,48,55,45,50,48,49,53,32,77,97,114,107,32,65,100,108,101,114,10,0,0,0,0,0,83,117,98,106,101,99,116,32,116,111,32,116,104,101,32,116,101,114,109,115,32,111,102,32,116,104,101,32,122,108,105,98,32,108,105,99,101,110,115,101,46,10,0,0,0,0,0,0,78,111,32,119,97,114,114,97,110,116,121,32,105,115,32,112,114,111,118,105,100,101,100,32,111,114,32,105,109,112,108,105,101,100,46,10,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,58,32,76,90,87,32,111,117,116,112,117,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,58,32,37,115,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,58,32,110,111,32,97,115,99,105,105,32,99,111,110,118,101,114,115,105,111,110,58,32,37,115,0,98,108,111,99,107,32,115,105,122,101,32,116,111,111,32,115,109,97,108,108,32,40,109,117,115,116,32,98,101,32,62,61,32,51,50,75,41,0,0,0,98,108,111,99,107,32,115,105,122,101,32,116,111,111,32,108,97,114,103,101,58,32,37,115,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,110,117,109,98,101,114,32,111,102,32,112,114,111,99,101,115,115,101,115,58,32,37,115,0,116,111,111,32,109,97,110,121,32,112,114,111,99,101,115,115,101,115,58,32,37,115,0,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,101,109,112,116,121,32,112,97,114,97,109,101,116,101,114,0,105,110,118,97,108,105,100,32,110,117,109,101,114,105,99,32,112,97,114,97,109,101,116,101,114,58,32,37,115,0,0,0,76,90,87,0,0,0,0,0,90,0,0,0,0,0,0,0,97,115,99,105,105,0,0,0,97,0,0,0,0,0,0,0,98,101,115,116,0,0,0,0,57,0,0,0,0,0,0,0,98,105,116,115,0,0,0,0,98,108,111,99,107,115,105,122,101,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,100,101,99,111,109,112,114,101,115,115,0,0,0,0,0,0,100,0,0,0,0,0,0,0,102,97,115,116,0,0,0,0,49,0,0,0,0,0,0,0,102,105,114,115,116,0,0,0,70,0,0,0,0,0,0,0,102,111,114,99,101,0,0,0,102,0,0,0,0,0,0,0,104,101,108,112,0,0,0,0,104,0,0,0,0,0,0,0,105,110,100,101,112,101,110,100,101,110,116,0,0,0,0,0,105,0,0,0,0,0,0,0,105,116,101,114,97,116,105,111,110,115,0,0,0,0,0,0,73,0,0,0,0,0,0,0,107,101,101,112,0,0,0,0,107,0,0,0,0,0,0,0,108,105,99,101,110,115,101,0,76,0,0,0,0,0,0,0,108,105,115,116,0,0,0,0,108,0,0,0,0,0,0,0,109,97,120,115,112,108,105,116,115,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,110,97,109,101,0,0,0,0,78,0,0,0,0,0,0,0,110,111,45,110,97,109,101,0,110,0,0,0,0,0,0,0,110,111,45,116,105,109,101,0,84,0,0,0,0,0,0,0,111,110,101,98,108,111,99,107,0,0,0,0,0,0,0,0,79,0,0,0,0,0,0,0,112,114,111,99,101,115,115,101,115,0,0,0,0,0,0,0,112,0,0,0,0,0,0,0,113,117,105,101,116,0,0,0,113,0,0,0,0,0,0,0,114,101,99,117,114,115,105,118,101,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,114,115,121,110,99,97,98,108,101,0,0,0,0,0,0,0,82,0,0,0,0,0,0,0,115,105,108,101,110,116,0,0,115,116,100,111,117,116,0,0,99,0,0,0,0,0,0,0,115,117,102,102,105,120,0,0,83,0,0,0,0,0,0,0,116,101,115,116,0,0,0,0,116,0,0,0,0,0,0,0,116,111,45,115,116,100,111,117,116,0,0,0,0,0,0,0,117,110,99,111,109,112,114,101,115,115,0,0,0,0,0,0,118,101,114,98,111,115,101,0,118,0,0,0,0,0,0,0,118,101,114,115,105,111,110,0,86,0,0,0,0,0,0,0,122,105,112,0,0,0,0,0,75,0,0,0,0,0,0,0,122,108,105,98,0,0,0,0,122,0,0,0,0,0,0,0,105,110,116,101,114,110,97,108,32,116,104,114,101,97,100,115,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+133752);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  function _deflatePending() {
  Module['printErr']('missing function: deflatePending'); abort(-1);
  }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _adler32() {
  Module['printErr']('missing function: adler32'); abort(-1);
  }

  function _join_all() {
  Module['printErr']('missing function: join_all'); abort(-1);
  }

  function _chmod(path, mode, dontResolveLastLink) {
      // int chmod(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/chmod.html
      // NOTE: dontResolveLastLink is a shortcut for lchmod(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        FS.chmod(path, mode);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  function _new_lock() {
  Module['printErr']('missing function: new_lock'); abort(-1);
  }

  var _emscripten_check_longjmp=true;

   
  Module["_strncpy"] = _strncpy;

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getchar() {
      // int getchar(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getchar.html
      return _fgetc(HEAP32[((_stdin)>>2)]);
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _deflateParams() {
  Module['printErr']('missing function: deflateParams'); abort(-1);
  }

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }

  function _inflateBack() {
  Module['printErr']('missing function: inflateBack'); abort(-1);
  }

  function _free_lock() {
  Module['printErr']('missing function: free_lock'); abort(-1);
  }

  
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(winterOffset != guessedOffset);
      } else if ((dst > 0) != (winterOffset != guessedOffset)) {
        var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
        var trueOffset = dst > 0 ? summerOffset : winterOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }

  function _deflateEnd() {
  Module['printErr']('missing function: deflateEnd'); abort(-1);
  }

  function _putc() {
  return _fputc.apply(null, arguments)
  }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        if (e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
          // an error occurred while trying to look up the path; we should just report ENOTDIR
          e.setErrno(ERRNO_CODES.ENOTDIR);
        }
        FS.handleFSError(e);
        return -1;
      }
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  function _deflateReset() {
  Module['printErr']('missing function: deflateReset'); abort(-1);
  }

  function _isatty(fildes) {
      // int isatty(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/isatty.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // HACK - implement tcgetattr
      if (!stream.tty) {
        ___setErrNo(ERRNO_CODES.ENOTTY);
        return 0;
      }
      return 1;
    }

  var _emscripten_get_longjmp_result=true;


  
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _possess() {
  Module['printErr']('missing function: possess'); abort(-1);
  }

  function _join() {
  Module['printErr']('missing function: join'); abort(-1);
  }

  
  
  
  var ___tm_formatted=allocate(44, "i8", ALLOC_STATIC);function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
      writeStringToMemory(s, buf);
      return buf;
    }function _ctime_r(time, buf) {
      var stack = Runtime.stackSave();
      var rv = _asctime_r(_localtime_r(time, Runtime.stackAlloc(44)), buf);
      Runtime.stackRestore(stack);
      return rv;
    }function _ctime(timer) {
      return _ctime_r(timer, ___tm_current);
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function _signal(sig, func) {
      Module.printErr('Calling stub instead of signal()');
      return 0;
    }

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _ZopfliInitOptions() {
  Module['printErr']('missing function: ZopfliInitOptions'); abort(-1);
  }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var fd = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _release() {
  Module['printErr']('missing function: release'); abort(-1);
  }

  function _try_setup_() {
  Module['printErr']('missing function: try_setup_'); abort(-1);
  }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _deflateSetDictionary() {
  Module['printErr']('missing function: deflateSetDictionary'); abort(-1);
  }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      if (!stream.currReading) {
        try {
          // load the list of entries now, then readdir will traverse that list, to ignore changes to files
          stream.currReading = FS.readdir(stream.path);
        } catch (e) {
          return FS.handleFSError(e);
        }
      }
      if (stream.position < 0 || stream.position >= stream.currReading.length) {
        HEAP32[((result)>>2)]=0;
        return 0;
      }
      var id;
      var type;
      var name = stream.currReading[stream.position++];
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        try {
          // child may have been removed since we started to read this directory
          var child = FS.lookupNode(stream.node, name);
        } catch (e) {
          // skip to the next entry (not infinite since position is incremented until currReading.length)
          return _readdir_r(dirp, entry, result);
        }
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      HEAP32[((entry)>>2)]=id;
      HEAP32[(((entry)+(4))>>2)]=stream.position;
      HEAP32[(((entry)+(8))>>2)]=name.length + 1;
      for (var i = 0; i < name.length; i++) {
        HEAP8[(((entry + 11)+(i))>>0)]=name.charCodeAt(i);
      }
      HEAP8[(((entry + 11)+(i))>>0)]=0;
      HEAP8[(((entry)+(10))>>0)]=type;
      HEAP32[((result)>>2)]=entry;
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // TODO Is it supposed to be safe to execute multiple readdirs?
      if (!_readdir.entry) _readdir.entry = _malloc(268);
      if (!_readdir.result) _readdir.result = _malloc(4);
      var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
      if (err) {
        ___setErrNo(err);
        return 0;
      }
      return HEAP32[((_readdir.result)>>2)];
    }

  function _twist() {
  Module['printErr']('missing function: twist'); abort(-1);
  }

  function _abort() {
      Module['abort']();
    }


  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _wait_for() {
  Module['printErr']('missing function: wait_for'); abort(-1);
  }


  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _emscripten_postinvoke=true;

  function _try_throw_() {
  Module['printErr']('missing function: try_throw_'); abort(-1);
  }

  var _emscripten_prep_setjmp=true;


  function _inflateBackInit_() {
  Module['printErr']('missing function: inflateBackInit_'); abort(-1);
  }


  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }



  function _lstat(path, buf) {
      // int lstat(const char *path, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/lstat.html
      return _stat(path, buf, true);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _ZopfliDeflatePart() {
  Module['printErr']('missing function: ZopfliDeflatePart'); abort(-1);
  }

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      var fd = _fileno(dirp);
      var stream = FS.getStream(fd);
      if (stream.currReading) stream.currReading = null;
      return _close(fd);
    }

  function _peek_lock() {
  Module['printErr']('missing function: peek_lock'); abort(-1);
  }

  function _deflate() {
  Module['printErr']('missing function: deflate'); abort(-1);
  }

  function _crc32() {
  Module['printErr']('missing function: crc32'); abort(-1);
  }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  var _emscripten_setjmp=true;

  function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  function _launch() {
  Module['printErr']('missing function: launch'); abort(-1);
  }

  function _inflateBackEnd() {
  Module['printErr']('missing function: inflateBackEnd'); abort(-1);
  }

  function _destruct() {
  Module['printErr']('missing function: destruct'); abort(-1);
  }

  function _chown(path, owner, group, dontResolveLastLink) {
      // int chown(const char *path, uid_t owner, gid_t group);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/chown.html
      // We don't support multiple users, so changing ownership makes no sense.
      // NOTE: The path argument may be a string, to simplify fchown().
      // NOTE: dontResolveLastLink is a shortcut for lchown(). It should never be
      //       used in client code.
      if (typeof path !== 'string') path = Pointer_stringify(path);
      try {
        FS.chown(path, owner, group);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

   
  Module["_strcpy"] = _strcpy;

  function _deflateInit2_() {
  Module['printErr']('missing function: deflateInit2_'); abort(-1);
  }


  function _utimes(path, times) {
      var time;
      if (times) {
        var offset = 8 + 0;
        time = HEAP32[(((times)+(offset))>>2)] * 1000;
        offset = 8 + 4;
        time += HEAP32[(((times)+(offset))>>2)] / 1000;
      } else {
        time = Date.now();
      }
      path = Pointer_stringify(path);
      try {
        FS.utime(path, time, time);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _deflatePrime() {
  Module['printErr']('missing function: deflatePrime'); abort(-1);
  }



  function _try_key_() {
  Module['printErr']('missing function: try_key_'); abort(-1);
  }

  function _yarn_abort() {
  Module['printErr']('missing function: yarn_abort'); abort(-1);
  }

  function _yarn_prefix() {
  Module['printErr']('missing function: yarn_prefix'); abort(-1);
  }
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_adler32": _adler32, "_fread": _fread, "_fstat": _fstat, "___assert_fail": ___assert_fail, "_deflatePending": _deflatePending, "_longjmp": _longjmp, "_possess": _possess, "_signal": _signal, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_close": _close, "_deflateReset": _deflateReset, "_readdir": _readdir, "_puts": _puts, "_isatty": _isatty, "_write": _write, "_inflateBack": _inflateBack, "_closedir": _closedir, "_send": _send, "_release": _release, "_ctime": _ctime, "_deflateSetDictionary": _deflateSetDictionary, "_deflateEnd": _deflateEnd, "_chmod": _chmod, "_chown": _chown, "_lstat": _lstat, "_opendir": _opendir, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_deflate": _deflate, "_unlink": _unlink, "_destruct": _destruct, "_mktime": _mktime, "_putchar": _putchar, "_join": _join, "_printf": _printf, "_inflateBackInit_": _inflateBackInit_, "_stat": _stat, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_crc32": _crc32, "_deflateInit2_": _deflateInit2_, "_exit": _exit, "_readdir_r": _readdir_r, "_utimes": _utimes, "_new_lock": _new_lock, "_lseek": _lseek, "_vfprintf": _vfprintf, "___buildEnvironment": ___buildEnvironment, "_pwrite": _pwrite, "_localtime_r": _localtime_r, "_tzset": _tzset, "_open": _open, "_ZopfliInitOptions": _ZopfliInitOptions, "_pthread_getspecific": _pthread_getspecific, "_deflatePrime": _deflatePrime, "_peek_lock": _peek_lock, "_asctime_r": _asctime_r, "_twist": _twist, "_getenv": _getenv, "_join_all": _join_all, "_recv": _recv, "_abort": _abort, "_localtime": _localtime, "_putc": _putc, "_getchar": _getchar, "_ZopfliDeflatePart": _ZopfliDeflatePart, "_inflateBackEnd": _inflateBackEnd, "_deflateParams": _deflateParams, "_free_lock": _free_lock, "_fflush": _fflush, "_fprintf": _fprintf, "__reallyNegative": __reallyNegative, "_fileno": _fileno, "_try_throw_": _try_throw_, "__exit": __exit, "_ctime_r": _ctime_r, "_try_setup_": _try_setup_, "_launch": _launch, "_pread": _pread, "_mkport": _mkport, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_pthread_setspecific": _pthread_setspecific, "_fgetc": _fgetc, "_fputc": _fputc, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "__formatString": __formatString, "_fputs": _fputs, "_wait_for": _wait_for, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr, "_stdout": _stdout, "_try_key_": _try_key_, "_yarn_abort": _yarn_abort, "_yarn_prefix": _yarn_prefix };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var _stderr=env._stderr|0;
  var _stdout=env._stdout|0;
  var _try_key_=env._try_key_|0;
  var _yarn_abort=env._yarn_abort|0;
  var _yarn_prefix=env._yarn_prefix|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _adler32=env._adler32;
  var _fread=env._fread;
  var _fstat=env._fstat;
  var ___assert_fail=env.___assert_fail;
  var _deflatePending=env._deflatePending;
  var _longjmp=env._longjmp;
  var _possess=env._possess;
  var _signal=env._signal;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _deflateReset=env._deflateReset;
  var _readdir=env._readdir;
  var _puts=env._puts;
  var _isatty=env._isatty;
  var _write=env._write;
  var _inflateBack=env._inflateBack;
  var _closedir=env._closedir;
  var _send=env._send;
  var _release=env._release;
  var _ctime=env._ctime;
  var _deflateSetDictionary=env._deflateSetDictionary;
  var _deflateEnd=env._deflateEnd;
  var _chmod=env._chmod;
  var _chown=env._chown;
  var _lstat=env._lstat;
  var _opendir=env._opendir;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _deflate=env._deflate;
  var _unlink=env._unlink;
  var _destruct=env._destruct;
  var _mktime=env._mktime;
  var _putchar=env._putchar;
  var _join=env._join;
  var _printf=env._printf;
  var _inflateBackInit_=env._inflateBackInit_;
  var _stat=env._stat;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _crc32=env._crc32;
  var _deflateInit2_=env._deflateInit2_;
  var _exit=env._exit;
  var _readdir_r=env._readdir_r;
  var _utimes=env._utimes;
  var _new_lock=env._new_lock;
  var _lseek=env._lseek;
  var _vfprintf=env._vfprintf;
  var ___buildEnvironment=env.___buildEnvironment;
  var _pwrite=env._pwrite;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _open=env._open;
  var _ZopfliInitOptions=env._ZopfliInitOptions;
  var _pthread_getspecific=env._pthread_getspecific;
  var _deflatePrime=env._deflatePrime;
  var _peek_lock=env._peek_lock;
  var _asctime_r=env._asctime_r;
  var _twist=env._twist;
  var _getenv=env._getenv;
  var _join_all=env._join_all;
  var _recv=env._recv;
  var _abort=env._abort;
  var _localtime=env._localtime;
  var _putc=env._putc;
  var _getchar=env._getchar;
  var _ZopfliDeflatePart=env._ZopfliDeflatePart;
  var _inflateBackEnd=env._inflateBackEnd;
  var _deflateParams=env._deflateParams;
  var _free_lock=env._free_lock;
  var _fflush=env._fflush;
  var _fprintf=env._fprintf;
  var __reallyNegative=env.__reallyNegative;
  var _fileno=env._fileno;
  var _try_throw_=env._try_throw_;
  var __exit=env.__exit;
  var _ctime_r=env._ctime_r;
  var _try_setup_=env._try_setup_;
  var _launch=env._launch;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var _wait_for=env._wait_for;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$reg2mem168$0 = 0, $$reg2mem170$0 = 0, $$reg2mem172$0 = 0, $$reg2mem174$0 = 0, $$reg2mem176$0 = 0, $$reg2mem178$0 = 0, $$reg2mem180$0 = 0, $$reg2mem182$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond14 = 0, $cond15 = 0, $cond16 = 0, $cond17 = 0, $cond18 = 0;
 var $cond19 = 0, $cond2 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond25 = 0, $cond26 = 0, $cond27 = 0, $cond28 = 0, $cond29 = 0, $cond3 = 0, $cond30 = 0, $cond31 = 0, $cond32 = 0, $cond33 = 0, $cond34 = 0, $cond35 = 0, $cond36 = 0;
 var $cond37 = 0, $cond38 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, $done$0 = 0, $done$1 = 0, $done$2 = 0, $err = 0, $n$0 = 0, $noop$0 = 0, $noop$1 = 0, $opts$0 = 0, $opts$1 = 0, $opts$2 = 0, $opts$3 = 0, $p$0 = 0;
 var $p$1 = 0, $try_pushed_$0 = 0, $try_pushed_$0$phi = 0, $try_pushed_$1 = 0, $try_pushed_$2 = 0, $try_this_ = 0, $vararg_buffer = 0, $vararg_buffer186 = 0, $vararg_buffer189 = 0, $vararg_buffer192 = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer192 = sp + 24|0;
 $vararg_buffer189 = sp;
 $vararg_buffer186 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $err = sp + 200|0;
 $try_this_ = sp + 28|0;
 $0 = (($try_this_) + 156|0);
 HEAP32[$0>>2] = 0;
 $1 = (($try_this_) + 156|0);
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($try_this_) + 156|0);
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = 0;
 __THREW__ = 0;
 invoke_v(1);
 $5 = __THREW__; __THREW__ = 0;
 if ((($5|0) != 0) & ((threwValue|0) != 0)) { $6 = _testSetjmp(HEAP32[$5>>2]|0, _setjmpTable)|0; if (($6|0) == 0) { _longjmp($5|0, threwValue|0); } tempRet0 = threwValue; } else { $6 = -1; };
 $7 = tempRet0;
 $cond = ($6|0)==(1);
 do {
  if ($cond) {
   $$reg2mem182$0 = $7;$try_pushed_$0 = 1;
  } else {
   $8 = HEAP32[_try_key_>>2]|0;
   __THREW__ = 0;
   $9 = (invoke_ii(2,($8|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
   $12 = tempRet0;
   $cond1 = ($11|0)==(1);
   if ($cond1) {
    $$reg2mem182$0 = $12;$try_pushed_$0 = 1;
   } else {
    $13 = (($try_this_) + 168|0);
    HEAP32[$13>>2] = $9;
    $14 = HEAP32[_try_key_>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_iii(3,($14|0),($try_this_|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = threwValue; } else { $17 = -1; };
    $18 = tempRet0;
    $cond2 = ($17|0)==(1);
    if ($cond2) {
     $$reg2mem182$0 = $18;$try_pushed_$0 = 1;
    } else {
     $19 = ($15|0)==(0);
     if (!($19)) {
      __THREW__ = 0;
      invoke_viiii(4,(8|0),(64|0),4064,(72|0));
      $20 = __THREW__; __THREW__ = 0;
      if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = threwValue; } else { $21 = -1; };
      $22 = tempRet0;
      $cond3 = ($21|0)==(1);
      if ($cond3) {
       $$reg2mem182$0 = $22;$try_pushed_$0 = 1;
       break;
      }
      // unreachable;
     }
     _saveSetjmp($try_this_,1,_setjmpTable|0)|0;
     __THREW__ = 0;
     $23 = __THREW__; __THREW__ = 0;
     if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
     $25 = tempRet0;
     $cond4 = ($24|0)==(1);
     if ($cond4) {
      $$reg2mem182$0 = $25;$try_pushed_$0 = 1;
     } else {
      $$reg2mem182$0 = 0;$try_pushed_$0 = 1;
     }
    }
   }
  }
 } while(0);
 L14: while(1) {
  $26 = ($$reg2mem182$0|0)<(2);
  if ($26) {
   HEAP32[((80 + 12|0))>>2] = 0;
   HEAP32[((80 + 16|0))>>2] = 0;
   HEAP32[((80 + 20|0))>>2] = 0;
   HEAP32[((80 + 72|0))>>2] = 1;
   HEAP32[((80 + 128|0))>>2] = 0;
   $27 = HEAP32[$argv>>2]|0;
   __THREW__ = 0;
   $28 = (invoke_iii(5,($27|0),47)|0);
   $29 = __THREW__; __THREW__ = 0;
   if ((($29|0) != 0) & ((threwValue|0) != 0)) { $30 = _testSetjmp(HEAP32[$29>>2]|0, _setjmpTable)|0; if (($30|0) == 0) { _longjmp($29|0, threwValue|0); } tempRet0 = threwValue; } else { $30 = -1; };
   $31 = tempRet0;
   $cond14 = ($30|0)==(1);
   if ($cond14) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $31;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $32 = ($28|0)==(0|0);
   if ($32) {
    $33 = HEAP32[$argv>>2]|0;
    $$reg2mem180$0 = $33;
   } else {
    $34 = (($28) + 1|0);
    $$reg2mem180$0 = $34;
   }
   $35 = HEAP8[$$reg2mem180$0>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = ($36|0)!=(0);
   if ($37) {
    $$reg2mem178$0 = $$reg2mem180$0;
   } else {
    $$reg2mem178$0 = 65808;
   }
   HEAP32[80>>2] = $$reg2mem178$0;
   __THREW__ = 0;
   (invoke_iii(6,2,(7|0))|0);
   $38 = __THREW__; __THREW__ = 0;
   if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = threwValue; } else { $39 = -1; };
   $40 = tempRet0;
   $cond15 = ($39|0)==(1);
   if ($cond15) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $40;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $41 = HEAP32[80>>2]|0;
   HEAP32[_yarn_prefix>>2] = $41;
   HEAP32[_yarn_abort>>2] = 8;
   __THREW__ = 0;
   invoke_v(9);
   $42 = __THREW__; __THREW__ = 0;
   if ((($42|0) != 0) & ((threwValue|0) != 0)) { $43 = _testSetjmp(HEAP32[$42>>2]|0, _setjmpTable)|0; if (($43|0) == 0) { _longjmp($42|0, threwValue|0); } tempRet0 = threwValue; } else { $43 = -1; };
   $44 = tempRet0;
   $cond16 = ($43|0)==(1);
   if ($cond16) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $44;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   __THREW__ = 0;
   $45 = (invoke_ii(10,(65816|0))|0);
   $46 = __THREW__; __THREW__ = 0;
   if ((($46|0) != 0) & ((threwValue|0) != 0)) { $47 = _testSetjmp(HEAP32[$46>>2]|0, _setjmpTable)|0; if (($47|0) == 0) { _longjmp($46|0, threwValue|0); } tempRet0 = threwValue; } else { $47 = -1; };
   $48 = tempRet0;
   $cond17 = ($47|0)==(1);
   if ($cond17) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $48;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $49 = ($45|0)!=(0|0);
   if ($49) {
    $opts$0 = $45;
    while(1) {
     $50 = HEAP8[$opts$0>>0]|0;
     $51 = ($50<<24>>24)!=(0);
     if (!($51)) {
      break;
     }
     $opts$1 = $opts$0;
     while(1) {
      $52 = HEAP8[$opts$1>>0]|0;
      $53 = $52 << 24 >> 24;
      $54 = ($53|0)==(32);
      if ($54) {
       $$reg2mem176$0 = 1;
      } else {
       $55 = HEAP8[$opts$1>>0]|0;
       $56 = $55 << 24 >> 24;
       $57 = ($56|0)==(9);
       $$reg2mem176$0 = $57;
      }
      if (!($$reg2mem176$0)) {
       break;
      }
      $58 = (($opts$1) + 1|0);
      $opts$1 = $58;
     }
     $p$0 = $opts$1;
     while(1) {
      $59 = HEAP8[$p$0>>0]|0;
      $60 = $59 << 24 >> 24;
      $61 = ($60|0)!=(0);
      if ($61) {
       $62 = HEAP8[$p$0>>0]|0;
       $63 = $62 << 24 >> 24;
       $64 = ($63|0)!=(32);
       if ($64) {
        $65 = HEAP8[$p$0>>0]|0;
        $66 = $65 << 24 >> 24;
        $67 = ($66|0)!=(9);
        $$reg2mem174$0 = $67;
       } else {
        $$reg2mem174$0 = 0;
       }
      } else {
       $$reg2mem174$0 = 0;
      }
      if (!($$reg2mem174$0)) {
       break;
      }
      $68 = (($p$0) + 1|0);
      $p$0 = $68;
     }
     $69 = HEAP8[$p$0>>0]|0;
     $70 = $69 << 24 >> 24;
     HEAP8[$p$0>>0] = 0;
     __THREW__ = 0;
     $71 = (invoke_ii(11,($opts$1|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     if ((($72|0) != 0) & ((threwValue|0) != 0)) { $73 = _testSetjmp(HEAP32[$72>>2]|0, _setjmpTable)|0; if (($73|0) == 0) { _longjmp($72|0, threwValue|0); } tempRet0 = threwValue; } else { $73 = -1; };
     $74 = tempRet0;
     $cond37 = ($73|0)==(1);
     if ($cond37) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $74;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $75 = ($71|0)!=(0);
     if ($75) {
      __THREW__ = 0;
      HEAP32[$vararg_buffer>>2] = 0;
      invoke_viii(12,22,(65824|0),($vararg_buffer|0));
      $76 = __THREW__; __THREW__ = 0;
      if ((($76|0) != 0) & ((threwValue|0) != 0)) { $77 = _testSetjmp(HEAP32[$76>>2]|0, _setjmpTable)|0; if (($77|0) == 0) { _longjmp($76|0, threwValue|0); } tempRet0 = threwValue; } else { $77 = -1; };
      $78 = tempRet0;
      $cond38 = ($77|0)==(1);
      if ($cond38) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $78;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
     }
     $79 = ($70|0)!=(0);
     $80 = $79 ? 1 : 0;
     $81 = (($p$0) + ($80)|0);
     $opts$0 = $81;
    }
    __THREW__ = 0;
    (invoke_ii(11,(0|0))|0);
    $82 = __THREW__; __THREW__ = 0;
    if ((($82|0) != 0) & ((threwValue|0) != 0)) { $83 = _testSetjmp(HEAP32[$82>>2]|0, _setjmpTable)|0; if (($83|0) == 0) { _longjmp($82|0, threwValue|0); } tempRet0 = threwValue; } else { $83 = -1; };
    $84 = tempRet0;
    $cond36 = ($83|0)==(1);
    if ($cond36) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $84;$try_pushed_$0 = $try_pushed_$0$phi;
     continue;
    }
   }
   __THREW__ = 0;
   $85 = (invoke_ii(10,(65880|0))|0);
   $86 = __THREW__; __THREW__ = 0;
   if ((($86|0) != 0) & ((threwValue|0) != 0)) { $87 = _testSetjmp(HEAP32[$86>>2]|0, _setjmpTable)|0; if (($87|0) == 0) { _longjmp($86|0, threwValue|0); } tempRet0 = threwValue; } else { $87 = -1; };
   $88 = tempRet0;
   $cond18 = ($87|0)==(1);
   if ($cond18) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $88;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $89 = ($85|0)!=(0|0);
   if ($89) {
    $opts$2 = $85;
    while(1) {
     $90 = HEAP8[$opts$2>>0]|0;
     $91 = ($90<<24>>24)!=(0);
     if (!($91)) {
      break;
     }
     $opts$3 = $opts$2;
     while(1) {
      $92 = HEAP8[$opts$3>>0]|0;
      $93 = $92 << 24 >> 24;
      $94 = ($93|0)==(32);
      if ($94) {
       $$reg2mem172$0 = 1;
      } else {
       $95 = HEAP8[$opts$3>>0]|0;
       $96 = $95 << 24 >> 24;
       $97 = ($96|0)==(9);
       $$reg2mem172$0 = $97;
      }
      if (!($$reg2mem172$0)) {
       break;
      }
      $98 = (($opts$3) + 1|0);
      $opts$3 = $98;
     }
     $p$1 = $opts$3;
     while(1) {
      $99 = HEAP8[$p$1>>0]|0;
      $100 = $99 << 24 >> 24;
      $101 = ($100|0)!=(0);
      if ($101) {
       $102 = HEAP8[$p$1>>0]|0;
       $103 = $102 << 24 >> 24;
       $104 = ($103|0)!=(32);
       if ($104) {
        $105 = HEAP8[$p$1>>0]|0;
        $106 = $105 << 24 >> 24;
        $107 = ($106|0)!=(9);
        $$reg2mem170$0 = $107;
       } else {
        $$reg2mem170$0 = 0;
       }
      } else {
       $$reg2mem170$0 = 0;
      }
      if (!($$reg2mem170$0)) {
       break;
      }
      $108 = (($p$1) + 1|0);
      $p$1 = $108;
     }
     $109 = HEAP8[$p$1>>0]|0;
     $110 = $109 << 24 >> 24;
     HEAP8[$p$1>>0] = 0;
     __THREW__ = 0;
     $111 = (invoke_ii(11,($opts$3|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     if ((($112|0) != 0) & ((threwValue|0) != 0)) { $113 = _testSetjmp(HEAP32[$112>>2]|0, _setjmpTable)|0; if (($113|0) == 0) { _longjmp($112|0, threwValue|0); } tempRet0 = threwValue; } else { $113 = -1; };
     $114 = tempRet0;
     $cond34 = ($113|0)==(1);
     if ($cond34) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $114;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $115 = ($111|0)!=(0);
     if ($115) {
      __THREW__ = 0;
      HEAP32[$vararg_buffer186>>2] = 0;
      invoke_viii(12,22,(65888|0),($vararg_buffer186|0));
      $116 = __THREW__; __THREW__ = 0;
      if ((($116|0) != 0) & ((threwValue|0) != 0)) { $117 = _testSetjmp(HEAP32[$116>>2]|0, _setjmpTable)|0; if (($117|0) == 0) { _longjmp($116|0, threwValue|0); } tempRet0 = threwValue; } else { $117 = -1; };
      $118 = tempRet0;
      $cond35 = ($117|0)==(1);
      if ($cond35) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $118;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
     }
     $119 = ($110|0)!=(0);
     $120 = $119 ? 1 : 0;
     $121 = (($p$1) + ($120)|0);
     $opts$2 = $121;
    }
    __THREW__ = 0;
    (invoke_ii(11,(0|0))|0);
    $122 = __THREW__; __THREW__ = 0;
    if ((($122|0) != 0) & ((threwValue|0) != 0)) { $123 = _testSetjmp(HEAP32[$122>>2]|0, _setjmpTable)|0; if (($123|0) == 0) { _longjmp($122|0, threwValue|0); } tempRet0 = threwValue; } else { $123 = -1; };
    $124 = tempRet0;
    $cond33 = ($123|0)==(1);
    if ($cond33) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $124;$try_pushed_$0 = $try_pushed_$0$phi;
     continue;
    }
   }
   $125 = HEAP32[80>>2]|0;
   __THREW__ = 0;
   $126 = (invoke_iii(13,($125|0),(65944|0))|0);
   $127 = __THREW__; __THREW__ = 0;
   if ((($127|0) != 0) & ((threwValue|0) != 0)) { $128 = _testSetjmp(HEAP32[$127>>2]|0, _setjmpTable)|0; if (($128|0) == 0) { _longjmp($127|0, threwValue|0); } tempRet0 = threwValue; } else { $128 = -1; };
   $129 = tempRet0;
   $cond19 = ($128|0)==(1);
   if ($cond19) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $129;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $130 = ($126|0)==(0);
   if ($130) {
    label = 72;
   } else {
    $131 = HEAP32[80>>2]|0;
    __THREW__ = 0;
    $132 = (invoke_iii(13,($131|0),(65952|0))|0);
    $133 = __THREW__; __THREW__ = 0;
    if ((($133|0) != 0) & ((threwValue|0) != 0)) { $134 = _testSetjmp(HEAP32[$133>>2]|0, _setjmpTable)|0; if (($134|0) == 0) { _longjmp($133|0, threwValue|0); } tempRet0 = threwValue; } else { $134 = -1; };
    $135 = tempRet0;
    $cond20 = ($134|0)==(1);
    if ($cond20) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $135;$try_pushed_$0 = $try_pushed_$0$phi;
     continue;
    }
    $136 = ($132|0)==(0);
    if ($136) {
     label = 72;
    }
   }
   if ((label|0) == 72) {
    label = 0;
    $137 = HEAP32[((80 + 76|0))>>2]|0;
    $138 = ($137|0)!=(0);
    if (!($138)) {
     $139 = HEAP32[((80 + 28|0))>>2]|0;
     $140 = $139 >> 2;
     HEAP32[((80 + 28|0))>>2] = $140;
    }
    HEAP32[((80 + 76|0))>>2] = 1;
   }
   $141 = HEAP32[80>>2]|0;
   __THREW__ = 0;
   $142 = (invoke_ii(14,($141|0))|0);
   $143 = __THREW__; __THREW__ = 0;
   if ((($143|0) != 0) & ((threwValue|0) != 0)) { $144 = _testSetjmp(HEAP32[$143>>2]|0, _setjmpTable)|0; if (($144|0) == 0) { _longjmp($143|0, threwValue|0); } tempRet0 = threwValue; } else { $144 = -1; };
   $145 = tempRet0;
   $cond21 = ($144|0)==(1);
   if ($cond21) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $145;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $146 = ($142|0)>(2);
   if ($146) {
    $147 = HEAP32[80>>2]|0;
    $148 = (($147) + ($142)|0);
    $149 = (($148) + -3|0);
    __THREW__ = 0;
    $150 = (invoke_iii(13,($149|0),(65960|0))|0);
    $151 = __THREW__; __THREW__ = 0;
    if ((($151|0) != 0) & ((threwValue|0) != 0)) { $152 = _testSetjmp(HEAP32[$151>>2]|0, _setjmpTable)|0; if (($152|0) == 0) { _longjmp($151|0, threwValue|0); } tempRet0 = threwValue; } else { $152 = -1; };
    $153 = tempRet0;
    $cond32 = ($152|0)==(1);
    if ($cond32) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $153;$try_pushed_$0 = $try_pushed_$0$phi;
     continue;
    }
    $154 = ($150|0)==(0);
    if ($154) {
     $155 = HEAP32[((80 + 76|0))>>2]|0;
     $156 = ($155|0)!=(0);
     if (!($156)) {
      $157 = HEAP32[((80 + 28|0))>>2]|0;
      $158 = $157 >> 2;
      HEAP32[((80 + 28|0))>>2] = $158;
     }
     HEAP32[((80 + 76|0))>>2] = 1;
     HEAP32[((80 + 32|0))>>2] = 1;
    }
   }
   $159 = ($argc|0)<(2);
   do {
    if ($159) {
     $160 = HEAP32[((80 + 76|0))>>2]|0;
     $161 = ($160|0)!=(0);
     $162 = $161 ? 0 : 1;
     __THREW__ = 0;
     $163 = (invoke_ii(15,($162|0))|0);
     $164 = __THREW__; __THREW__ = 0;
     if ((($164|0) != 0) & ((threwValue|0) != 0)) { $165 = _testSetjmp(HEAP32[$164>>2]|0, _setjmpTable)|0; if (($165|0) == 0) { _longjmp($164|0, threwValue|0); } tempRet0 = threwValue; } else { $165 = -1; };
     $166 = tempRet0;
     $cond30 = ($165|0)==(1);
     if ($cond30) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $166;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $167 = ($163|0)!=(0);
     if (!($167)) {
      break;
     }
     __THREW__ = 0;
     invoke_v(16);
     $168 = __THREW__; __THREW__ = 0;
     if ((($168|0) != 0) & ((threwValue|0) != 0)) { $169 = _testSetjmp(HEAP32[$168>>2]|0, _setjmpTable)|0; if (($169|0) == 0) { _longjmp($168|0, threwValue|0); } tempRet0 = threwValue; } else { $169 = -1; };
     $170 = tempRet0;
     $cond31 = ($169|0)==(1);
     if ($cond31) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $170;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
    }
   } while(0);
   $done$0 = 0;$n$0 = 1;$noop$0 = 0;
   while(1) {
    $171 = ($n$0|0)<($argc|0);
    if (!($171)) {
     break;
    }
    $172 = ($noop$0|0)==(0);
    do {
     if ($172) {
      $173 = (($argv) + ($n$0<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      __THREW__ = 0;
      $175 = (invoke_iii(13,($174|0),(65968|0))|0);
      $176 = __THREW__; __THREW__ = 0;
      if ((($176|0) != 0) & ((threwValue|0) != 0)) { $177 = _testSetjmp(HEAP32[$176>>2]|0, _setjmpTable)|0; if (($177|0) == 0) { _longjmp($176|0, threwValue|0); } tempRet0 = threwValue; } else { $177 = -1; };
      $178 = tempRet0;
      $cond28 = ($177|0)==(1);
      if ($cond28) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $178;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $179 = ($175|0)==(0);
      if (!($179)) {
       label = 94;
       break;
      }
      __THREW__ = 0;
      (invoke_ii(11,(0|0))|0);
      $180 = __THREW__; __THREW__ = 0;
      if ((($180|0) != 0) & ((threwValue|0) != 0)) { $181 = _testSetjmp(HEAP32[$180>>2]|0, _setjmpTable)|0; if (($181|0) == 0) { _longjmp($180|0, threwValue|0); } tempRet0 = threwValue; } else { $181 = -1; };
      $182 = tempRet0;
      $cond29 = ($181|0)==(1);
      if ($cond29) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $182;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $done$2 = $done$0;$noop$1 = 1;
     } else {
      label = 94;
     }
    } while(0);
    if ((label|0) == 94) {
     label = 0;
     $183 = ($noop$0|0)!=(0);
     if ($183) {
      label = 97;
     } else {
      $184 = (($argv) + ($n$0<<2)|0);
      $185 = HEAP32[$184>>2]|0;
      __THREW__ = 0;
      $186 = (invoke_ii(11,($185|0))|0);
      $187 = __THREW__; __THREW__ = 0;
      if ((($187|0) != 0) & ((threwValue|0) != 0)) { $188 = _testSetjmp(HEAP32[$187>>2]|0, _setjmpTable)|0; if (($188|0) == 0) { _longjmp($187|0, threwValue|0); } tempRet0 = threwValue; } else { $188 = -1; };
      $189 = tempRet0;
      $cond24 = ($188|0)==(1);
      if ($cond24) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $189;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $190 = ($186|0)!=(0);
      if ($190) {
       label = 97;
      } else {
       $done$1 = $done$0;
      }
     }
     if ((label|0) == 97) {
      label = 0;
      $191 = ($done$0|0)==(1);
      do {
       if ($191) {
        $192 = HEAP32[((80 + 32|0))>>2]|0;
        $193 = ($192|0)!=(0);
        if (!($193)) {
         break;
        }
        $194 = HEAP32[((80 + 76|0))>>2]|0;
        $195 = ($194|0)!=(0);
        if ($195) {
         break;
        }
        $196 = HEAP32[((80 + 68|0))>>2]|0;
        $197 = ($196|0)!=(0);
        if ($197) {
         break;
        }
        $198 = HEAP32[((80 + 44|0))>>2]|0;
        $199 = ($198|0)>(1);
        if (!($199)) {
         break;
        }
        $200 = HEAP32[80>>2]|0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer189>>2] = $200;
        (invoke_iii(17,(65976|0),($vararg_buffer189|0))|0);
        $201 = __THREW__; __THREW__ = 0;
        if ((($201|0) != 0) & ((threwValue|0) != 0)) { $202 = _testSetjmp(HEAP32[$201>>2]|0, _setjmpTable)|0; if (($202|0) == 0) { _longjmp($201|0, threwValue|0); } tempRet0 = threwValue; } else { $202 = -1; };
        $203 = tempRet0;
        $cond27 = ($202|0)==(1);
        if ($cond27) {
         $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $203;$try_pushed_$0 = $try_pushed_$0$phi;
         continue L14;
        }
       }
      } while(0);
      $204 = (($argv) + ($n$0<<2)|0);
      $205 = HEAP32[$204>>2]|0;
      __THREW__ = 0;
      $206 = (invoke_iii(13,($205|0),(66064|0))|0);
      $207 = __THREW__; __THREW__ = 0;
      if ((($207|0) != 0) & ((threwValue|0) != 0)) { $208 = _testSetjmp(HEAP32[$207>>2]|0, _setjmpTable)|0; if (($208|0) == 0) { _longjmp($207|0, threwValue|0); } tempRet0 = threwValue; } else { $208 = -1; };
      $209 = tempRet0;
      $cond25 = ($208|0)==(1);
      if ($cond25) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $209;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $210 = ($206|0)!=(0);
      if ($210) {
       $211 = (($argv) + ($n$0<<2)|0);
       $212 = HEAP32[$211>>2]|0;
       $$reg2mem168$0 = $212;
      } else {
       $$reg2mem168$0 = 0;
      }
      __THREW__ = 0;
      invoke_vi(18,($$reg2mem168$0|0));
      $213 = __THREW__; __THREW__ = 0;
      if ((($213|0) != 0) & ((threwValue|0) != 0)) { $214 = _testSetjmp(HEAP32[$213>>2]|0, _setjmpTable)|0; if (($214|0) == 0) { _longjmp($213|0, threwValue|0); } tempRet0 = threwValue; } else { $214 = -1; };
      $215 = tempRet0;
      $cond26 = ($214|0)==(1);
      if ($cond26) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $215;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $216 = (($done$0) + 1)|0;
      $done$1 = $216;
     }
     $done$2 = $done$1;$noop$1 = $noop$0;
    }
    $217 = (($n$0) + 1)|0;
    $done$0 = $done$2;$n$0 = $217;$noop$0 = $noop$1;
   }
   __THREW__ = 0;
   (invoke_ii(11,(0|0))|0);
   $218 = __THREW__; __THREW__ = 0;
   if ((($218|0) != 0) & ((threwValue|0) != 0)) { $219 = _testSetjmp(HEAP32[$218>>2]|0, _setjmpTable)|0; if (($219|0) == 0) { _longjmp($218|0, threwValue|0); } tempRet0 = threwValue; } else { $219 = -1; };
   $220 = tempRet0;
   $cond22 = ($219|0)==(1);
   if ($cond22) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $220;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $221 = ($done$0|0)==(0);
   if ($221) {
    __THREW__ = 0;
    invoke_vi(18,(0|0));
    $222 = __THREW__; __THREW__ = 0;
    if ((($222|0) != 0) & ((threwValue|0) != 0)) { $223 = _testSetjmp(HEAP32[$222>>2]|0, _setjmpTable)|0; if (($223|0) == 0) { _longjmp($222|0, threwValue|0); } tempRet0 = threwValue; } else { $223 = -1; };
    $224 = tempRet0;
    $cond23 = ($223|0)==(1);
    if ($cond23) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $224;$try_pushed_$0 = $try_pushed_$0$phi;
     continue;
    }
   }
  }
  $225 = ($try_pushed_$0|0)!=(0);
  if ($225) {
   $226 = HEAP32[_try_key_>>2]|0;
   $227 = (($try_this_) + 168|0);
   $228 = HEAP32[$227>>2]|0;
   __THREW__ = 0;
   $229 = (invoke_iii(3,($226|0),($228|0))|0);
   $230 = __THREW__; __THREW__ = 0;
   if ((($230|0) != 0) & ((threwValue|0) != 0)) { $231 = _testSetjmp(HEAP32[$230>>2]|0, _setjmpTable)|0; if (($231|0) == 0) { _longjmp($230|0, threwValue|0); } tempRet0 = threwValue; } else { $231 = -1; };
   $232 = tempRet0;
   $cond12 = ($231|0)==(1);
   if ($cond12) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $232;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $233 = ($229|0)==(0);
   if (!($233)) {
    __THREW__ = 0;
    invoke_viiii(4,(8|0),(64|0),4170,(72|0));
    $234 = __THREW__; __THREW__ = 0;
    if ((($234|0) != 0) & ((threwValue|0) != 0)) { $235 = _testSetjmp(HEAP32[$234>>2]|0, _setjmpTable)|0; if (($235|0) == 0) { _longjmp($234|0, threwValue|0); } tempRet0 = threwValue; } else { $235 = -1; };
    $236 = tempRet0;
    $cond13 = ($235|0)==(1);
    if ($cond13) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem182$0 = $236;$try_pushed_$0 = $try_pushed_$0$phi;
     continue;
    } else {
     label = 125;
     break;
    }
   }
   $try_pushed_$1 = 0;
  } else {
   $try_pushed_$1 = $try_pushed_$0;
  }
  $237 = HEAP32[((80 + 12|0))>>2]|0;
  $238 = ($237|0)!=(0|0);
  if ($238) {
   $239 = HEAP32[((80 + 12|0))>>2]|0;
   __THREW__ = 0;
   invoke_vi(19,($239|0));
   $240 = __THREW__; __THREW__ = 0;
   if ((($240|0) != 0) & ((threwValue|0) != 0)) { $241 = _testSetjmp(HEAP32[$240>>2]|0, _setjmpTable)|0; if (($241|0) == 0) { _longjmp($240|0, threwValue|0); } tempRet0 = threwValue; } else { $241 = -1; };
   $242 = tempRet0;
   $cond11 = ($241|0)==(1);
   if ($cond11) {
    $$reg2mem182$0 = $242;$try_pushed_$0 = $try_pushed_$1;
    continue;
   }
   HEAP32[((80 + 12|0))>>2] = 0;
  }
  HEAP32[((80 + 16|0))>>2] = 0;
  __THREW__ = 0;
  invoke_v(20);
  $243 = __THREW__; __THREW__ = 0;
  if ((($243|0) != 0) & ((threwValue|0) != 0)) { $244 = _testSetjmp(HEAP32[$243>>2]|0, _setjmpTable)|0; if (($244|0) == 0) { _longjmp($243|0, threwValue|0); } tempRet0 = threwValue; } else { $244 = -1; };
  $245 = tempRet0;
  $cond5 = ($244|0)==(1);
  if ($cond5) {
   $$reg2mem182$0 = $245;$try_pushed_$0 = $try_pushed_$1;
   continue;
  }
  $246 = ($try_pushed_$1|0)!=(0);
  if ($246) {
   $247 = HEAP32[_try_key_>>2]|0;
   $248 = (($try_this_) + 168|0);
   $249 = HEAP32[$248>>2]|0;
   __THREW__ = 0;
   $250 = (invoke_iii(3,($247|0),($249|0))|0);
   $251 = __THREW__; __THREW__ = 0;
   if ((($251|0) != 0) & ((threwValue|0) != 0)) { $252 = _testSetjmp(HEAP32[$251>>2]|0, _setjmpTable)|0; if (($252|0) == 0) { _longjmp($251|0, threwValue|0); } tempRet0 = threwValue; } else { $252 = -1; };
   $253 = tempRet0;
   $cond9 = ($252|0)==(1);
   if ($cond9) {
    $$reg2mem182$0 = $253;$try_pushed_$0 = $try_pushed_$1;
    continue;
   }
   $254 = ($250|0)==(0);
   if (!($254)) {
    __THREW__ = 0;
    invoke_viiii(4,(8|0),(64|0),4176,(72|0));
    $255 = __THREW__; __THREW__ = 0;
    if ((($255|0) != 0) & ((threwValue|0) != 0)) { $256 = _testSetjmp(HEAP32[$255>>2]|0, _setjmpTable)|0; if (($256|0) == 0) { _longjmp($255|0, threwValue|0); } tempRet0 = threwValue; } else { $256 = -1; };
    $257 = tempRet0;
    $cond10 = ($256|0)==(1);
    if ($cond10) {
     $$reg2mem182$0 = $257;$try_pushed_$0 = $try_pushed_$1;
     continue;
    } else {
     label = 142;
     break;
    }
   }
   $try_pushed_$2 = 0;
  } else {
   $try_pushed_$2 = $try_pushed_$1;
  }
  $258 = (($try_this_) + 156|0);
  ;HEAP32[$err+0>>2]=HEAP32[$258+0>>2]|0;HEAP32[$err+4>>2]=HEAP32[$258+4>>2]|0;HEAP32[$err+8>>2]=HEAP32[$258+8>>2]|0;
  $259 = HEAP32[$err>>2]|0;
  $260 = ($259|0)!=(0);
  if (!($260)) {
   label = 157;
   break;
  }
  $261 = (($err) + 8|0);
  $262 = HEAP32[$261>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer192>>2] = $262;
  (invoke_iii(17,(66072|0),($vararg_buffer192|0))|0);
  $263 = __THREW__; __THREW__ = 0;
  if ((($263|0) != 0) & ((threwValue|0) != 0)) { $264 = _testSetjmp(HEAP32[$263>>2]|0, _setjmpTable)|0; if (($264|0) == 0) { _longjmp($263|0, threwValue|0); } tempRet0 = threwValue; } else { $264 = -1; };
  $265 = tempRet0;
  $cond6 = ($264|0)==(1);
  if ($cond6) {
   $$reg2mem182$0 = $265;$try_pushed_$0 = $try_pushed_$2;
   continue;
  }
  $266 = (($err) + 4|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = ($267|0)!=(0);
  if ($268) {
   $269 = (($err) + 8|0);
   $270 = HEAP32[$269>>2]|0;
   __THREW__ = 0;
   invoke_vi(19,($270|0));
   $271 = __THREW__; __THREW__ = 0;
   if ((($271|0) != 0) & ((threwValue|0) != 0)) { $272 = _testSetjmp(HEAP32[$271>>2]|0, _setjmpTable)|0; if (($272|0) == 0) { _longjmp($271|0, threwValue|0); } tempRet0 = threwValue; } else { $272 = -1; };
   $273 = tempRet0;
   $cond8 = ($272|0)==(1);
   if ($cond8) {
    $$reg2mem182$0 = $273;$try_pushed_$0 = $try_pushed_$2;
    continue;
   }
   $274 = (($err) + 4|0);
   HEAP32[$274>>2] = 0;
   $275 = (($err) + 8|0);
   HEAP32[$275>>2] = 0;
  }
  $276 = HEAP32[$err>>2]|0;
  $277 = (0 - ($276))|0;
  __THREW__ = 0;
  invoke_vi(7,($277|0));
  $278 = __THREW__; __THREW__ = 0;
  if ((($278|0) != 0) & ((threwValue|0) != 0)) { $279 = _testSetjmp(HEAP32[$278>>2]|0, _setjmpTable)|0; if (($279|0) == 0) { _longjmp($278|0, threwValue|0); } tempRet0 = threwValue; } else { $279 = -1; };
  $280 = tempRet0;
  $cond7 = ($279|0)==(1);
  if ($cond7) {
   $$reg2mem182$0 = $280;$try_pushed_$0 = $try_pushed_$2;
  } else {
   label = 155;
   break;
  }
 }
 if ((label|0) == 125) {
  // unreachable;
 }
 else if ((label|0) == 142) {
  // unreachable;
 }
 else if ((label|0) == 155) {
  STACKTOP = sp;return 0;
 }
 else if ((label|0) == 157) {
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _cut_short($sig) {
 $sig = $sig|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sig;
 $1 = $0;
 $2 = ($1|0)==(2);
 if ($2) {
 }
 $3 = HEAP32[((80 + 8|0))>>2]|0;
 $4 = ($3|0)!=(-1);
 if ($4) {
  $5 = HEAP32[((80 + 8|0))>>2]|0;
  $6 = ($5|0)!=(1);
  if ($6) {
   $7 = HEAP32[((80 + 20|0))>>2]|0;
   (_unlink(($7|0))|0);
   $8 = HEAP32[((80 + 20|0))>>2]|0;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = HEAP32[((80 + 20|0))>>2]|0;
    _free($10);
    HEAP32[((80 + 20|0))>>2] = 0;
   }
   HEAP32[((80 + 8|0))>>2] = -1;
  }
 }
 $11 = $0;
 $12 = ($11|0)<(0);
 if ($12) {
  $13 = $0;
  $14 = (0 - ($13))|0;
  $15 = $14;
  __exit(($15|0));
  // unreachable;
 } else {
  $15 = 125;
  __exit(($15|0));
  // unreachable;
 }
}
function _cut_yarn($err) {
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $err;
 $1 = $0;
 $2 = $0;
 $3 = ($2|0)==(12);
 $4 = $3 ? 66352 : 138248;
 HEAP32[$vararg_buffer>>2] = 0;
 _try_throw_(($1|0),($4|0),($vararg_buffer|0));
 STACKTOP = sp;return;
}
function _defaults() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[((80 + 80|0))>>2] = -1;
 _ZopfliInitOptions((((80 + 84|0))|0));
 $0 = (_nprocs(8)|0);
 HEAP32[((80 + 112|0))>>2] = $0;
 HEAP32[((80 + 120|0))>>2] = 131072;
 HEAP32[((80 + 108|0))>>2] = 0;
 HEAP32[((80 + 116|0))>>2] = 1;
 HEAP32[((80 + 24|0))>>2] = 1;
 HEAP32[((80 + 28|0))>>2] = 3;
 HEAP32[((80 + 32|0))>>2] = 0;
 HEAP32[((80 + 56|0))>>2] = 66608;
 HEAP32[((80 + 76|0))>>2] = 0;
 HEAP32[((80 + 68|0))>>2] = 0;
 HEAP32[((80 + 36|0))>>2] = 0;
 HEAP32[((80 + 40|0))>>2] = 0;
 HEAP32[((80 + 52|0))>>2] = 0;
 HEAP32[((80 + 44|0))>>2] = 0;
 STACKTOP = sp;return;
}
function _option($arg) {
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bad = 0, $j = 0, $n = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0;
 var $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer38 = sp + 24|0;
 $vararg_buffer34 = sp + 88|0;
 $vararg_buffer30 = sp + 80|0;
 $vararg_buffer27 = sp + 72|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer19 = sp + 32|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 56|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $bad = sp + 112|0;
 $1 = $arg;
 ;HEAP8[$bad+0>>0]=HEAP8[136792+0>>0]|0;HEAP8[$bad+1>>0]=HEAP8[136792+1>>0]|0;HEAP8[$bad+2>>0]=HEAP8[136792+2>>0]|0;
 $2 = HEAP32[136784>>2]|0;
 $3 = ($2|0)!=(0);
 do {
  if ($3) {
   $4 = $1;
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    $6 = $1;
    $7 = HEAP8[$6>>0]|0;
    $8 = $7 << 24 >> 24;
    $9 = ($8|0)==(45);
    if (!($9)) {
     break;
    }
   }
   $10 = HEAP32[136784>>2]|0;
   $11 = (($10) - 1)|0;
   $12 = (136800 + ($11)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = (($bad) + 1|0);
   HEAP8[$14>>0] = $13;
   HEAP32[$vararg_buffer>>2] = $bad;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 0;
   _try_throw_(22,(136808|0),($vararg_buffer|0));
  }
 } while(0);
 $15 = $1;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $0 = 0;
  $179 = $0;
  STACKTOP = sp;return ($179|0);
 }
 $17 = $1;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = ($19|0)==(45);
 do {
  if ($20) {
   $21 = $1;
   $22 = (($21) + 1|0);
   $1 = $22;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)==(0);
   if ($25) {
    $0 = 1;
    $179 = $0;
    STACKTOP = sp;return ($179|0);
   }
   $26 = $1;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = ($28|0)==(45);
   if ($29) {
    $30 = $1;
    $31 = (($30) + 1|0);
    $1 = $31;
    $j = 33;
    while(1) {
     $32 = $j;
     $33 = ($32|0)>=(0);
     if (!($33)) {
      break;
     }
     $34 = $1;
     $35 = $j;
     $36 = (136840 + ($35<<3)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (_strcmp($34,$37)|0);
     $39 = ($38|0)==(0);
     if ($39) {
      label = 14;
      break;
     }
     $44 = $j;
     $45 = (($44) + -1)|0;
     $j = $45;
    }
    if ((label|0) == 14) {
     $40 = $j;
     $41 = (136840 + ($40<<3)|0);
     $42 = (($41) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $1 = $43;
    }
    $46 = $j;
    $47 = ($46|0)<(0);
    if ($47) {
     $48 = $1;
     $49 = (($48) + -2|0);
     HEAP32[$vararg_buffer2>>2] = $49;
     $vararg_ptr5 = (($vararg_buffer2) + 4|0);
     HEAP32[$vararg_ptr5>>2] = 0;
     _try_throw_(22,(137112|0),($vararg_buffer2|0));
    }
   }
   L31: while(1) {
    $50 = HEAP32[136784>>2]|0;
    $51 = ($50|0)!=(0);
    if ($51) {
     label = 22;
     break;
    }
    $54 = $1;
    $55 = HEAP8[$54>>0]|0;
    $56 = (($bad) + 1|0);
    HEAP8[$56>>0] = $55;
    $57 = $1;
    $58 = HEAP8[$57>>0]|0;
    $59 = $58 << 24 >> 24;
    do {
     switch ($59|0) {
     case 77:  {
      HEAP32[136784>>2] = 5;
      break;
     }
     case 79:  {
      HEAP32[((80 + 96|0))>>2] = 0;
      break;
     }
     case 83:  {
      HEAP32[136784>>2] = 3;
      break;
     }
     case 84:  {
      $103 = HEAP32[((80 + 28|0))>>2]|0;
      $104 = $103 & -11;
      HEAP32[((80 + 28|0))>>2] = $104;
      break;
     }
     case 82:  {
      HEAP32[((80 + 108|0))>>2] = 1;
      break;
     }
     case 78:  {
      $101 = HEAP32[((80 + 28|0))>>2]|0;
      $102 = $101 | 15;
      HEAP32[((80 + 28|0))>>2] = $102;
      break;
     }
     case 86:  {
      label = 48;
      break L31;
      break;
     }
     case 73:  {
      HEAP32[136784>>2] = 4;
      break;
     }
     case 90:  {
      HEAP32[$vararg_buffer15>>2] = $bad;
      $vararg_ptr18 = (($vararg_buffer15) + 4|0);
      HEAP32[$vararg_ptr18>>2] = 0;
      _try_throw_(22,(137368|0),($vararg_buffer15|0));
      label = 50;
      break;
     }
     case 97:  {
      label = 50;
      break;
     }
     case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
      $60 = $1;
      $61 = HEAP8[$60>>0]|0;
      $62 = $61 << 24 >> 24;
      $63 = (($62) - 48)|0;
      HEAP32[((80 + 80|0))>>2] = $63;
      while(1) {
       $64 = $1;
       $65 = (($64) + 1|0);
       $66 = HEAP8[$65>>0]|0;
       $67 = $66 << 24 >> 24;
       $68 = ($67|0)>=(48);
       if ($68) {
        $69 = $1;
        $70 = (($69) + 1|0);
        $71 = HEAP8[$70>>0]|0;
        $72 = $71 << 24 >> 24;
        $73 = ($72|0)<=(57);
        $180 = $73;
       } else {
        $180 = 0;
       }
       if (!($180)) {
        break;
       }
       $74 = HEAP32[((80 + 80|0))>>2]|0;
       $75 = ($74|0)!=(0);
       if ($75) {
        $76 = $1;
        $77 = (($76) + 1|0);
        $78 = HEAP8[$77>>0]|0;
        $79 = $78 << 24 >> 24;
        $80 = (($79) - 48)|0;
        $81 = (2147483647 - ($80))|0;
        $82 = HEAP32[((80 + 80|0))>>2]|0;
        $83 = (($81|0) / ($82|0))&-1;
        $84 = ($83|0)<(10);
        if ($84) {
         HEAP32[$vararg_buffer9>>2] = 0;
         _try_throw_(22,(137184|0),($vararg_buffer9|0));
        }
       }
       $85 = HEAP32[((80 + 80|0))>>2]|0;
       $86 = ($85*10)|0;
       $87 = $1;
       $88 = (($87) + 1|0);
       $1 = $88;
       $89 = HEAP8[$88>>0]|0;
       $90 = $89 << 24 >> 24;
       $91 = (($86) + ($90))|0;
       $92 = (($91) - 48)|0;
       HEAP32[((80 + 80|0))>>2] = $92;
      }
      $93 = HEAP32[((80 + 80|0))>>2]|0;
      $94 = ($93|0)==(10);
      if ($94) {
       label = 36;
      } else {
       $95 = HEAP32[((80 + 80|0))>>2]|0;
       $96 = ($95|0)>(11);
       if ($96) {
        label = 36;
       }
      }
      if ((label|0) == 36) {
       label = 0;
       HEAP32[$vararg_buffer12>>2] = 0;
       _try_throw_(22,(137184|0),($vararg_buffer12|0));
      }
      _new_opts();
      break;
     }
     case 75:  {
      HEAP32[((80 + 44|0))>>2] = 2;
      HEAP32[((80 + 56|0))>>2] = 66640;
      break;
     }
     case 76:  {
      label = 41;
      break L31;
      break;
     }
     case 99:  {
      HEAP32[((80 + 32|0))>>2] = 1;
      break;
     }
     case 70:  {
      HEAP32[((80 + 100|0))>>2] = 1;
      break;
     }
     case 98:  {
      label = 51;
      break;
     }
     case 100:  {
      $106 = HEAP32[((80 + 76|0))>>2]|0;
      $107 = ($106|0)!=(0);
      if (!($107)) {
       $108 = HEAP32[((80 + 28|0))>>2]|0;
       $109 = $108 >> 2;
       HEAP32[((80 + 28|0))>>2] = $109;
      }
      HEAP32[((80 + 76|0))>>2] = 1;
      break;
     }
     case 113:  {
      HEAP32[((80 + 24|0))>>2] = 0;
      break;
     }
     case 110:  {
      $110 = HEAP32[((80 + 28|0))>>2]|0;
      $111 = $110 & -6;
      HEAP32[((80 + 28|0))>>2] = $111;
      break;
     }
     case 118:  {
      $112 = HEAP32[((80 + 24|0))>>2]|0;
      $113 = (($112) + 1)|0;
      HEAP32[((80 + 24|0))>>2] = $113;
      break;
     }
     case 107:  {
      HEAP32[((80 + 36|0))>>2] = 1;
      break;
     }
     case 114:  {
      HEAP32[((80 + 52|0))>>2] = 1;
      break;
     }
     case 104:  {
      _help();
      break;
     }
     case 108:  {
      HEAP32[((80 + 68|0))>>2] = 1;
      break;
     }
     case 116:  {
      HEAP32[((80 + 76|0))>>2] = 2;
      break;
     }
     case 122:  {
      HEAP32[((80 + 44|0))>>2] = 1;
      HEAP32[((80 + 56|0))>>2] = 66624;
      break;
     }
     case 105:  {
      HEAP32[((80 + 116|0))>>2] = 0;
      break;
     }
     case 102:  {
      HEAP32[((80 + 40|0))>>2] = 1;
      break;
     }
     case 112:  {
      HEAP32[136784>>2] = 2;
      break;
     }
     default: {
      HEAP32[$vararg_buffer23>>2] = $bad;
      $vararg_ptr26 = (($vararg_buffer23) + 4|0);
      HEAP32[$vararg_ptr26>>2] = 0;
      _try_throw_(22,(137112|0),($vararg_buffer23|0));
     }
     }
    } while(0);
    if ((label|0) == 50) {
     label = 0;
     HEAP32[$vararg_buffer19>>2] = $bad;
     $vararg_ptr22 = (($vararg_buffer19) + 4|0);
     HEAP32[$vararg_ptr22>>2] = 0;
     _try_throw_(22,(137416|0),($vararg_buffer19|0));
     label = 51;
    }
    if ((label|0) == 51) {
     label = 0;
     HEAP32[136784>>2] = 1;
    }
    $114 = $1;
    $115 = (($114) + 1|0);
    $1 = $115;
    $116 = HEAP8[$115>>0]|0;
    $117 = ($116<<24>>24)!=(0);
    if (!($117)) {
     break;
    }
   }
   if ((label|0) == 22) {
    $52 = HEAP32[136784>>2]|0;
    $53 = ($52|0)==(3);
    if ($53) {
     HEAP32[$vararg_buffer6>>2] = 0;
     _try_throw_(22,(137136|0),($vararg_buffer6|0));
    }
   }
   else if ((label|0) == 41) {
    $97 = HEAP32[_stderr>>2]|0;
    (_fputs((137224|0),($97|0))|0);
    $98 = HEAP32[_stderr>>2]|0;
    (_fputs((137240|0),($98|0))|0);
    $99 = HEAP32[_stderr>>2]|0;
    (_fputs((137280|0),($99|0))|0);
    $100 = HEAP32[_stderr>>2]|0;
    (_fputs((137328|0),($100|0))|0);
    _exit(0);
    // unreachable;
   }
   else if ((label|0) == 48) {
    $105 = HEAP32[_stderr>>2]|0;
    (_fputs((137224|0),($105|0))|0);
    _exit(0);
    // unreachable;
   }
   $118 = $1;
   $119 = HEAP8[$118>>0]|0;
   $120 = $119 << 24 >> 24;
   $121 = ($120|0)==(0);
   if (!($121)) {
    break;
   }
   $0 = 0;
   $179 = $0;
   STACKTOP = sp;return ($179|0);
  }
 } while(0);
 $122 = HEAP32[136784>>2]|0;
 $123 = ($122|0)!=(0);
 if (!($123)) {
  $0 = 1;
  $179 = $0;
  STACKTOP = sp;return ($179|0);
 }
 $124 = HEAP32[136784>>2]|0;
 $125 = ($124|0)==(1);
 if ($125) {
  $126 = $1;
  $127 = (_num($126)|0);
  $n = $127;
  $128 = $n;
  $129 = $128 << 10;
  HEAP32[((80 + 120|0))>>2] = $129;
  $130 = HEAP32[((80 + 120|0))>>2]|0;
  $131 = ($130>>>0)<(32768);
  if ($131) {
   HEAP32[$vararg_buffer27>>2] = 0;
   _try_throw_(22,(137456|0),($vararg_buffer27|0));
  }
  $132 = $n;
  $133 = HEAP32[((80 + 120|0))>>2]|0;
  $134 = $133 >>> 10;
  $135 = ($132|0)!=($134|0);
  if ($135) {
   label = 82;
  } else {
   $136 = HEAP32[((80 + 120|0))>>2]|0;
   $137 = HEAP32[((80 + 120|0))>>2]|0;
   $138 = $137 >>> 4;
   $139 = (($136) + ($138))|0;
   $140 = (($139) + 32768)|0;
   $141 = HEAP32[((80 + 120|0))>>2]|0;
   $142 = ($140>>>0)<($141>>>0);
   if ($142) {
    label = 82;
   } else {
    $143 = HEAP32[((80 + 120|0))>>2]|0;
    $144 = HEAP32[((80 + 120|0))>>2]|0;
    $145 = $144 >>> 4;
    $146 = (($143) + ($145))|0;
    $147 = (($146) + 32768)|0;
    $148 = ($147|0)<(0);
    if ($148) {
     label = 82;
    } else {
     $149 = HEAP32[((80 + 120|0))>>2]|0;
     $150 = ($149>>>0)>(536870912);
     if ($150) {
      label = 82;
     }
    }
   }
  }
  if ((label|0) == 82) {
   $151 = $1;
   HEAP32[$vararg_buffer30>>2] = $151;
   $vararg_ptr33 = (($vararg_buffer30) + 4|0);
   HEAP32[$vararg_ptr33>>2] = 0;
   _try_throw_(22,(137496|0),($vararg_buffer30|0));
  }
  _new_opts();
 } else {
  $152 = HEAP32[136784>>2]|0;
  $153 = ($152|0)==(2);
  if ($153) {
   $154 = $1;
   $155 = (_num($154)|0);
   $n = $155;
   $156 = $n;
   HEAP32[((80 + 112|0))>>2] = $156;
   $157 = HEAP32[((80 + 112|0))>>2]|0;
   $158 = ($157|0)<(1);
   if ($158) {
    $159 = $1;
    HEAP32[$vararg_buffer34>>2] = $159;
    $vararg_ptr37 = (($vararg_buffer34) + 4|0);
    HEAP32[$vararg_ptr37>>2] = 0;
    _try_throw_(22,(137528|0),($vararg_buffer34|0));
   }
   $160 = HEAP32[((80 + 112|0))>>2]|0;
   $161 = $n;
   $162 = ($160|0)!=($161|0);
   if ($162) {
    label = 89;
   } else {
    $163 = HEAP32[((80 + 112|0))>>2]|0;
    $164 = $163 << 1;
    $165 = (($164) + 3)|0;
    $166 = ($165|0)<(1);
    if ($166) {
     label = 89;
    }
   }
   if ((label|0) == 89) {
    $167 = $1;
    HEAP32[$vararg_buffer38>>2] = $167;
    $vararg_ptr41 = (($vararg_buffer38) + 4|0);
    HEAP32[$vararg_ptr41>>2] = 0;
    _try_throw_(22,(137560|0),($vararg_buffer38|0));
   }
   _new_opts();
  } else {
   $168 = HEAP32[136784>>2]|0;
   $169 = ($168|0)==(3);
   if ($169) {
    $170 = $1;
    HEAP32[((80 + 56|0))>>2] = $170;
   } else {
    $171 = HEAP32[136784>>2]|0;
    $172 = ($171|0)==(4);
    if ($172) {
     $173 = $1;
     $174 = (_num($173)|0);
     HEAP32[((80 + 92|0))>>2] = $174;
    } else {
     $175 = HEAP32[136784>>2]|0;
     $176 = ($175|0)==(5);
     if ($176) {
      $177 = $1;
      $178 = (_num($177)|0);
      HEAP32[((80 + 104|0))>>2] = $178;
     }
    }
   }
  }
 }
 HEAP32[136784>>2] = 0;
 $0 = 0;
 $179 = $0;
 STACKTOP = sp;return ($179|0);
}
function _help() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[((80 + 24|0))>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $n = 0;
 while(1) {
  $2 = $n;
  $3 = ($2|0)<(36);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[_stderr>>2]|0;
  $5 = $n;
  $6 = (134240 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $7;
  (_fprintf(($4|0),(134232|0),($vararg_buffer|0))|0);
  $8 = $n;
  $9 = (($8) + 1)|0;
  $n = $9;
 }
 $10 = HEAP32[_stderr>>2]|0;
 (_fflush(($10|0))|0);
 _exit(0);
 // unreachable;
}
function _complain($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ap = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 8|0;
 $0 = $fmt;
 $1 = HEAP32[((80 + 24|0))>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return 0;
 }
 $3 = HEAP32[_stderr>>2]|0;
 $4 = HEAP32[80>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 (_fprintf(($3|0),(134224|0),($vararg_buffer|0))|0);
 HEAP32[$ap>>2] = $varargs;
 $5 = HEAP32[_stderr>>2]|0;
 $6 = $0;
 (_vfprintf(($5|0),($6|0),($ap|0))|0);
 $7 = HEAP32[_stderr>>2]|0;
 (_putc(10,($7|0))|0);
 $8 = HEAP32[_stderr>>2]|0;
 (_fflush(($8|0))|0);
 STACKTOP = sp;return 0;
}
function _process($path) {
 $path = $path|0;
 var $$reg2mem675$0 = 0, $$reg2mem679$0 = 0, $$reg2mem681$0 = 0, $$reg2mem687$0 = 0, $$reg2mem691$0 = 0, $$reg2mem693$0 = 0, $$reg2mem695$0 = 0, $$reg2mem697$0 = 0, $$reg2mem699$0 = 0, $$reg2mem701$0 = 0, $$reg2mem703$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $err = 0, $len$0 = 0, $len$1 = 0, $len$2 = 0, $len$3 = 0, $len$4 = 0, $method = 0, $off$0 = 0, $off$0$phi = 0;
 var $off$1 = 0, $pre$0 = 0, $pre$1 = 0, $reply$0 = 0, $reply$1 = 0, $roll = 0, $size = 0, $st = 0, $sufx$0 = 0, $sufx2$0 = 0, $sufx2$1 = 0, $sufx2$2 = 0, $to$0 = 0, $to$1 = 0, $try_pushed_$0 = 0, $try_pushed_$0$phi = 0, $try_pushed_$1 = 0, $try_pushed_$2 = 0, $try_pushed_$2$phi = 0, $try_pushed_$3 = 0;
 var $try_pushed_4$0 = 0, $try_pushed_4$0$phi = 0, $try_pushed_4$1 = 0, $try_pushed_4$1$phi = 0, $try_pushed_4$2 = 0, $try_pushed_4$3 = 0, $try_this_ = 0, $try_this_3 = 0, $vararg_buffer = 0, $vararg_buffer706 = 0, $vararg_buffer709 = 0, $vararg_buffer712 = 0, $vararg_buffer715 = 0, $vararg_buffer718 = 0, $vararg_buffer722 = 0, $vararg_buffer725 = 0, $vararg_buffer728 = 0, $vararg_buffer733 = 0, $vararg_buffer736 = 0, $vararg_buffer739 = 0;
 var $vararg_buffer742 = 0, $vararg_buffer745 = 0, $vararg_buffer748 = 0, $vararg_buffer751 = 0, $vararg_buffer754 = 0, $vararg_buffer759 = 0, $vararg_buffer763 = 0, $vararg_buffer766 = 0, $vararg_ptr705 = 0, $vararg_ptr721 = 0, $vararg_ptr731 = 0, $vararg_ptr732 = 0, $vararg_ptr757 = 0, $vararg_ptr758 = 0, $vararg_ptr762 = 0, $vararg_ptr769 = 0, $vararg_ptr770 = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer766 = sp + 40|0;
 $vararg_buffer763 = sp + 176|0;
 $vararg_buffer759 = sp + 168|0;
 $vararg_buffer754 = sp + 152|0;
 $vararg_buffer751 = sp + 144|0;
 $vararg_buffer748 = sp + 136|0;
 $vararg_buffer745 = sp + 128|0;
 $vararg_buffer742 = sp + 120|0;
 $vararg_buffer739 = sp + 32|0;
 $vararg_buffer736 = sp + 24|0;
 $vararg_buffer733 = sp + 16|0;
 $vararg_buffer728 = sp;
 $vararg_buffer725 = sp + 56|0;
 $vararg_buffer722 = sp + 112|0;
 $vararg_buffer718 = sp + 64|0;
 $vararg_buffer715 = sp + 72|0;
 $vararg_buffer712 = sp + 80|0;
 $vararg_buffer709 = sp + 88|0;
 $vararg_buffer706 = sp + 96|0;
 $vararg_buffer = sp + 104|0;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $st = sp + 180|0;
 $err = sp + 256|0;
 $roll = sp + 268|0;
 $size = sp + 272|0;
 $try_this_ = sp + 276|0;
 $try_this_3 = sp + 448|0;
 $method = -1;
 $0 = ($path|0)==(0|0);
 L1: do {
  if ($0) {
   __THREW__ = 0;
   (invoke_iiiii(21,(((80 + 12|0))|0),(((80 + 16|0))|0),0,(66664|0))|0);
   $1 = __THREW__; __THREW__ = 0;
   if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } tempRet0 = threwValue; } else { $2 = -1; };
   $3 = tempRet0;
   if ((($2|0) == 1)) {
    $$reg2mem675$0 = $3;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
    label = 330;
    break;
   } else if ((($2|0) == 2)) {
    $$reg2mem687$0 = $3;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
    label = 167;
    break;
   }
   HEAP32[((80 + 4|0))>>2] = 0;
   HEAP32[((80 + 60|0))>>2] = 0;
   $4 = HEAP32[((80 + 28|0))>>2]|0;
   $5 = $4 & 2;
   $6 = ($5|0)!=(0);
   if ($6) {
    $7 = HEAP32[((80 + 4|0))>>2]|0;
    __THREW__ = 0;
    $8 = (invoke_iii(22,($7|0),($st|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    if ((($9|0) != 0) & ((threwValue|0) != 0)) { $10 = _testSetjmp(HEAP32[$9>>2]|0, _setjmpTable)|0; if (($10|0) == 0) { _longjmp($9|0, threwValue|0); } tempRet0 = threwValue; } else { $10 = -1; };
    $11 = tempRet0;
    if ((($10|0) == 1)) {
     $$reg2mem675$0 = $11;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($10|0) == 2)) {
     $$reg2mem687$0 = $11;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    $12 = ($8|0)!=(0);
    if ($12) {
     __THREW__ = 0;
     $13 = (invoke_ii(23,(0|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = threwValue; } else { $15 = -1; };
     $16 = tempRet0;
     if ((($15|0) == 1)) {
      $$reg2mem675$0 = $16;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break;
     } else if ((($15|0) == 2)) {
      $$reg2mem687$0 = $16;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break;
     }
     $$reg2mem703$0 = $13;
    } else {
     $17 = (($st) + 56|0);
     $18 = HEAP32[$17>>2]|0;
     $$reg2mem703$0 = $18;
    }
    $$reg2mem701$0 = $$reg2mem703$0;
   } else {
    $$reg2mem701$0 = 0;
   }
   HEAP32[((80 + 64|0))>>2] = $$reg2mem701$0;
   $len$2 = 0;
   label = 124;
  } else {
   $19 = HEAP32[((80 + 12|0))>>2]|0;
   $20 = ($path|0)!=($19|0);
   if ($20) {
    __THREW__ = 0;
    (invoke_iiiii(21,(((80 + 12|0))|0),(((80 + 16|0))|0),0,($path|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    if ((($21|0) != 0) & ((threwValue|0) != 0)) { $22 = _testSetjmp(HEAP32[$21>>2]|0, _setjmpTable)|0; if (($22|0) == 0) { _longjmp($21|0, threwValue|0); } tempRet0 = threwValue; } else { $22 = -1; };
    $23 = tempRet0;
    if ((($22|0) == 1)) {
     $$reg2mem675$0 = $23;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($22|0) == 2)) {
     $$reg2mem687$0 = $23;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
   }
   $24 = HEAP32[((80 + 12|0))>>2]|0;
   __THREW__ = 0;
   $25 = (invoke_ii(14,($24|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = threwValue; } else { $27 = -1; };
   $28 = tempRet0;
   if ((($27|0) == 1)) {
    $$reg2mem675$0 = $28;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
    label = 330;
    break;
   } else if ((($27|0) == 2)) {
    $$reg2mem687$0 = $28;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
    label = 167;
    break;
   }
   $29 = HEAP32[((80 + 12|0))>>2]|0;
   __THREW__ = 0;
   $30 = (invoke_iii(24,($29|0),($st|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   if ((($31|0) != 0) & ((threwValue|0) != 0)) { $32 = _testSetjmp(HEAP32[$31>>2]|0, _setjmpTable)|0; if (($32|0) == 0) { _longjmp($31|0, threwValue|0); } tempRet0 = threwValue; } else { $32 = -1; };
   $33 = tempRet0;
   if ((($32|0) == 1)) {
    $$reg2mem675$0 = $33;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
    label = 330;
    break;
   } else if ((($32|0) == 2)) {
    $$reg2mem687$0 = $33;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
    label = 167;
    break;
   }
   $34 = ($30|0)!=(0);
   do {
    if ($34) {
     __THREW__ = 0;
     $35 = (invoke_i(25)|0);
     $36 = __THREW__; __THREW__ = 0;
     if ((($36|0) != 0) & ((threwValue|0) != 0)) { $37 = _testSetjmp(HEAP32[$36>>2]|0, _setjmpTable)|0; if (($37|0) == 0) { _longjmp($36|0, threwValue|0); } tempRet0 = threwValue; } else { $37 = -1; };
     $38 = tempRet0;
     if ((($37|0) == 1)) {
      $$reg2mem675$0 = $38;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break L1;
     } else if ((($37|0) == 2)) {
      $$reg2mem687$0 = $38;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break L1;
     }
     $39 = HEAP32[$35>>2]|0;
     $40 = ($39|0)==(2);
     do {
      if ($40) {
       $41 = HEAP32[((80 + 68|0))>>2]|0;
       $42 = ($41|0)!=(0);
       if (!($42)) {
        $43 = HEAP32[((80 + 76|0))>>2]|0;
        $44 = ($43|0)!=(0);
        if (!($44)) {
         break;
        }
       }
       $sufx$0 = 66528;
       while(1) {
        $45 = HEAP32[$sufx$0>>2]|0;
        $46 = ($45|0)==(0|0);
        if ($46) {
         label = 24;
         break;
        }
        $47 = (($sufx$0) + 4|0);
        $48 = HEAP32[$sufx$0>>2]|0;
        __THREW__ = 0;
        (invoke_iiiii(21,(((80 + 12|0))|0),(((80 + 16|0))|0),($25|0),($48|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        if ((($49|0) != 0) & ((threwValue|0) != 0)) { $50 = _testSetjmp(HEAP32[$49>>2]|0, _setjmpTable)|0; if (($50|0) == 0) { _longjmp($49|0, threwValue|0); } tempRet0 = threwValue; } else { $50 = -1; };
        $51 = tempRet0;
        if ((($50|0) == 1)) {
         $$reg2mem675$0 = $51;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
         label = 330;
         break L1;
        } else if ((($50|0) == 2)) {
         $$reg2mem687$0 = $51;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
         label = 167;
         break L1;
        }
        __THREW__ = 0;
        $52 = (invoke_i(25)|0);
        $53 = __THREW__; __THREW__ = 0;
        if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = threwValue; } else { $54 = -1; };
        $55 = tempRet0;
        if ((($54|0) == 1)) {
         $$reg2mem675$0 = $55;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
         label = 330;
         break L1;
        } else if ((($54|0) == 2)) {
         $$reg2mem687$0 = $55;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
         label = 167;
         break L1;
        }
        HEAP32[$52>>2] = 0;
        $56 = HEAP32[((80 + 12|0))>>2]|0;
        __THREW__ = 0;
        $57 = (invoke_iii(24,($56|0),($st|0))|0);
        $58 = __THREW__; __THREW__ = 0;
        if ((($58|0) != 0) & ((threwValue|0) != 0)) { $59 = _testSetjmp(HEAP32[$58>>2]|0, _setjmpTable)|0; if (($59|0) == 0) { _longjmp($58|0, threwValue|0); } tempRet0 = threwValue; } else { $59 = -1; };
        $60 = tempRet0;
        if ((($59|0) == 1)) {
         $$reg2mem675$0 = $60;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
         label = 330;
         break L1;
        } else if ((($59|0) == 2)) {
         $$reg2mem687$0 = $60;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
         label = 167;
         break L1;
        }
        $61 = ($57|0)!=(0);
        if ($61) {
         __THREW__ = 0;
         $62 = (invoke_i(25)|0);
         $63 = __THREW__; __THREW__ = 0;
         if ((($63|0) != 0) & ((threwValue|0) != 0)) { $64 = _testSetjmp(HEAP32[$63>>2]|0, _setjmpTable)|0; if (($64|0) == 0) { _longjmp($63|0, threwValue|0); } tempRet0 = threwValue; } else { $64 = -1; };
         $65 = tempRet0;
         if ((($64|0) == 1)) {
          $$reg2mem675$0 = $65;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
          label = 330;
          break L1;
         } else if ((($64|0) == 2)) {
          $$reg2mem687$0 = $65;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
          label = 167;
          break L1;
         }
         $66 = HEAP32[$62>>2]|0;
         $67 = ($66|0)==(2);
         $$reg2mem699$0 = $67;
        } else {
         $$reg2mem699$0 = 0;
        }
        if ($$reg2mem699$0) {
         $sufx$0 = $47;
        } else {
         break;
        }
       }
       if ((label|0) == 24) {
       }
      }
     } while(0);
     __THREW__ = 0;
     $68 = (invoke_i(25)|0);
     $69 = __THREW__; __THREW__ = 0;
     if ((($69|0) != 0) & ((threwValue|0) != 0)) { $70 = _testSetjmp(HEAP32[$69>>2]|0, _setjmpTable)|0; if (($70|0) == 0) { _longjmp($69|0, threwValue|0); } tempRet0 = threwValue; } else { $70 = -1; };
     $71 = tempRet0;
     if ((($70|0) == 1)) {
      $$reg2mem675$0 = $71;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break L1;
     } else if ((($70|0) == 2)) {
      $$reg2mem687$0 = $71;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break L1;
     }
     $72 = HEAP32[$68>>2]|0;
     $73 = ($72|0)==(75);
     if ($73) {
      label = 38;
     } else {
      __THREW__ = 0;
      $74 = (invoke_i(25)|0);
      $75 = __THREW__; __THREW__ = 0;
      if ((($75|0) != 0) & ((threwValue|0) != 0)) { $76 = _testSetjmp(HEAP32[$75>>2]|0, _setjmpTable)|0; if (($76|0) == 0) { _longjmp($75|0, threwValue|0); } tempRet0 = threwValue; } else { $76 = -1; };
      $77 = tempRet0;
      if ((($76|0) == 1)) {
       $$reg2mem675$0 = $77;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break L1;
      } else if ((($76|0) == 2)) {
       $$reg2mem687$0 = $77;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break L1;
      }
      $78 = HEAP32[$74>>2]|0;
      $79 = ($78|0)==(27);
      if ($79) {
       label = 38;
      }
     }
     if ((label|0) == 38) {
      $80 = HEAP32[((80 + 12|0))>>2]|0;
      __THREW__ = 0;
      HEAP32[$vararg_buffer>>2] = $80;
      $vararg_ptr705 = (($vararg_buffer) + 4|0);
      HEAP32[$vararg_ptr705>>2] = 0;
      invoke_viii(12,33,(66672|0),($vararg_buffer|0));
      $81 = __THREW__; __THREW__ = 0;
      if ((($81|0) != 0) & ((threwValue|0) != 0)) { $82 = _testSetjmp(HEAP32[$81>>2]|0, _setjmpTable)|0; if (($82|0) == 0) { _longjmp($81|0, threwValue|0); } tempRet0 = threwValue; } else { $82 = -1; };
      $83 = tempRet0;
      if ((($82|0) == 1)) {
       $$reg2mem675$0 = $83;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break L1;
      } else if ((($82|0) == 2)) {
       $$reg2mem687$0 = $83;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break L1;
      }
     }
     __THREW__ = 0;
     $84 = (invoke_i(25)|0);
     $85 = __THREW__; __THREW__ = 0;
     if ((($85|0) != 0) & ((threwValue|0) != 0)) { $86 = _testSetjmp(HEAP32[$85>>2]|0, _setjmpTable)|0; if (($86|0) == 0) { _longjmp($85|0, threwValue|0); } tempRet0 = threwValue; } else { $86 = -1; };
     $87 = tempRet0;
     if ((($86|0) == 1)) {
      $$reg2mem675$0 = $87;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break L1;
     } else if ((($86|0) == 2)) {
      $$reg2mem687$0 = $87;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break L1;
     }
     $88 = HEAP32[$84>>2]|0;
     $89 = ($88|0)!=(0);
     if (!($89)) {
      $96 = HEAP32[((80 + 12|0))>>2]|0;
      __THREW__ = 0;
      $97 = (invoke_ii(14,($96|0))|0);
      $98 = __THREW__; __THREW__ = 0;
      if ((($98|0) != 0) & ((threwValue|0) != 0)) { $99 = _testSetjmp(HEAP32[$98>>2]|0, _setjmpTable)|0; if (($99|0) == 0) { _longjmp($98|0, threwValue|0); } tempRet0 = threwValue; } else { $99 = -1; };
      $100 = tempRet0;
      if ((($99|0) == 1)) {
       $$reg2mem675$0 = $100;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break L1;
      } else if ((($99|0) == 2)) {
       $$reg2mem687$0 = $100;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break L1;
      }
      $len$0 = $97;
      break;
     }
     $90 = HEAP32[((80 + 12|0))>>2]|0;
     $91 = (($90) + ($25)|0);
     HEAP8[$91>>0] = 0;
     $92 = HEAP32[((80 + 12|0))>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer706>>2] = $92;
     (invoke_iii(17,(66728|0),($vararg_buffer706|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     if ((($93|0) != 0) & ((threwValue|0) != 0)) { $94 = _testSetjmp(HEAP32[$93>>2]|0, _setjmpTable)|0; if (($94|0) == 0) { _longjmp($93|0, threwValue|0); } tempRet0 = threwValue; } else { $94 = -1; };
     $95 = tempRet0;
     if ((($94|0) == 1)) {
      $$reg2mem675$0 = $95;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break L1;
     } else if ((($94|0) == 2)) {
      $$reg2mem687$0 = $95;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break L1;
     }
     STACKTOP = sp;return;
    } else {
     $len$0 = $25;
    }
   } while(0);
   $101 = (($st) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $102 & 61440;
   $104 = ($103|0)!=(32768);
   if ($104) {
    $105 = (($st) + 12|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 61440;
    $108 = ($107|0)!=(40960);
    if ($108) {
     $109 = (($st) + 12|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = $110 & 61440;
     $112 = ($111|0)!=(16384);
     if ($112) {
      $113 = HEAP32[((80 + 12|0))>>2]|0;
      __THREW__ = 0;
      HEAP32[$vararg_buffer709>>2] = $113;
      (invoke_iii(17,(66760|0),($vararg_buffer709|0))|0);
      $114 = __THREW__; __THREW__ = 0;
      if ((($114|0) != 0) & ((threwValue|0) != 0)) { $115 = _testSetjmp(HEAP32[$114>>2]|0, _setjmpTable)|0; if (($115|0) == 0) { _longjmp($114|0, threwValue|0); } tempRet0 = threwValue; } else { $115 = -1; };
      $116 = tempRet0;
      if ((($115|0) == 1)) {
       $$reg2mem675$0 = $116;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break;
      } else if ((($115|0) == 2)) {
       $$reg2mem687$0 = $116;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break;
      }
      STACKTOP = sp;return;
     }
    }
   }
   $117 = (($st) + 12|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $118 & 61440;
   $120 = ($119|0)==(40960);
   if ($120) {
    $121 = HEAP32[((80 + 40|0))>>2]|0;
    $122 = ($121|0)!=(0);
    if (!($122)) {
     $123 = HEAP32[((80 + 32|0))>>2]|0;
     $124 = ($123|0)!=(0);
     if (!($124)) {
      $125 = HEAP32[((80 + 12|0))>>2]|0;
      __THREW__ = 0;
      HEAP32[$vararg_buffer712>>2] = $125;
      (invoke_iii(17,(66808|0),($vararg_buffer712|0))|0);
      $126 = __THREW__; __THREW__ = 0;
      if ((($126|0) != 0) & ((threwValue|0) != 0)) { $127 = _testSetjmp(HEAP32[$126>>2]|0, _setjmpTable)|0; if (($127|0) == 0) { _longjmp($126|0, threwValue|0); } tempRet0 = threwValue; } else { $127 = -1; };
      $128 = tempRet0;
      if ((($127|0) == 1)) {
       $$reg2mem675$0 = $128;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break;
      } else if ((($127|0) == 2)) {
       $$reg2mem687$0 = $128;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break;
      }
      STACKTOP = sp;return;
     }
    }
   }
   $129 = (($st) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $130 & 61440;
   $132 = ($131|0)==(16384);
   if ($132) {
    $133 = HEAP32[((80 + 52|0))>>2]|0;
    $134 = ($133|0)!=(0);
    if (!($134)) {
     $135 = HEAP32[((80 + 12|0))>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer715>>2] = $135;
     (invoke_iii(17,(66840|0),($vararg_buffer715|0))|0);
     $136 = __THREW__; __THREW__ = 0;
     if ((($136|0) != 0) & ((threwValue|0) != 0)) { $137 = _testSetjmp(HEAP32[$136>>2]|0, _setjmpTable)|0; if (($137|0) == 0) { _longjmp($136|0, threwValue|0); } tempRet0 = threwValue; } else { $137 = -1; };
     $138 = tempRet0;
     if ((($137|0) == 1)) {
      $$reg2mem675$0 = $138;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break;
     } else if ((($137|0) == 2)) {
      $$reg2mem687$0 = $138;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break;
     }
     STACKTOP = sp;return;
    }
   }
   $139 = (($st) + 12|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $140 & 61440;
   $142 = ($141|0)==(16384);
   if ($142) {
    HEAP32[$roll>>2] = 0;
    HEAP32[$size>>2] = 0;
    $143 = HEAP32[((80 + 12|0))>>2]|0;
    __THREW__ = 0;
    $144 = (invoke_ii(26,($143|0))|0);
    $145 = __THREW__; __THREW__ = 0;
    if ((($145|0) != 0) & ((threwValue|0) != 0)) { $146 = _testSetjmp(HEAP32[$145>>2]|0, _setjmpTable)|0; if (($146|0) == 0) { _longjmp($145|0, threwValue|0); } tempRet0 = threwValue; } else { $146 = -1; };
    $147 = tempRet0;
    if ((($146|0) == 1)) {
     $$reg2mem675$0 = $147;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($146|0) == 2)) {
     $$reg2mem687$0 = $147;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    $148 = ($144|0)==(0|0);
    if ($148) {
     STACKTOP = sp;return;
    }
    $off$0 = 0;
    L87: while(1) {
     __THREW__ = 0;
     $149 = (invoke_ii(27,($144|0))|0);
     $150 = __THREW__; __THREW__ = 0;
     if ((($150|0) != 0) & ((threwValue|0) != 0)) { $151 = _testSetjmp(HEAP32[$150>>2]|0, _setjmpTable)|0; if (($151|0) == 0) { _longjmp($150|0, threwValue|0); } tempRet0 = threwValue; } else { $151 = -1; };
     $152 = tempRet0;
     if ((($151|0) == 1)) {
      $$reg2mem675$0 = $152;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break L1;
     } else if ((($151|0) == 2)) {
      $$reg2mem687$0 = $152;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break L1;
     }
     $153 = ($149|0)!=(0|0);
     if (!($153)) {
      break;
     }
     $154 = (($149) + 11|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155 << 24 >> 24;
     $157 = ($156|0)==(0);
     do {
      if (!($157)) {
       $158 = (($149) + 11|0);
       $159 = HEAP8[$158>>0]|0;
       $160 = $159 << 24 >> 24;
       $161 = ($160|0)==(46);
       if ($161) {
        $162 = (($149) + 11|0);
        $163 = (($162) + 1|0);
        $164 = HEAP8[$163>>0]|0;
        $165 = $164 << 24 >> 24;
        $166 = ($165|0)==(0);
        if ($166) {
         break;
        }
        $167 = (($149) + 11|0);
        $168 = (($167) + 1|0);
        $169 = HEAP8[$168>>0]|0;
        $170 = $169 << 24 >> 24;
        $171 = ($170|0)==(46);
        if ($171) {
         $172 = (($149) + 11|0);
         $173 = (($172) + 2|0);
         $174 = HEAP8[$173>>0]|0;
         $175 = $174 << 24 >> 24;
         $176 = ($175|0)==(0);
         if ($176) {
          break;
         }
        }
       }
       $177 = (($149) + 11|0);
       __THREW__ = 0;
       $178 = (invoke_iiiii(21,($roll|0),($size|0),($off$0|0),($177|0))|0);
       $179 = __THREW__; __THREW__ = 0;
       if ((($179|0) != 0) & ((threwValue|0) != 0)) { $180 = _testSetjmp(HEAP32[$179>>2]|0, _setjmpTable)|0; if (($180|0) == 0) { _longjmp($179|0, threwValue|0); } tempRet0 = threwValue; } else { $180 = -1; };
       $181 = tempRet0;
       if ((($180|0) == 1)) {
        $$reg2mem675$0 = $181;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
        label = 330;
        break L1;
       } else if ((($180|0) == 2)) {
        $$reg2mem687$0 = $181;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
        label = 167;
        break L1;
       }
       $off$0 = $178;
       continue L87;
      }
     } while(0);
     $off$0$phi = $off$0;$off$0 = $off$0$phi;
    }
    __THREW__ = 0;
    (invoke_ii(28,($144|0))|0);
    $182 = __THREW__; __THREW__ = 0;
    if ((($182|0) != 0) & ((threwValue|0) != 0)) { $183 = _testSetjmp(HEAP32[$182>>2]|0, _setjmpTable)|0; if (($183|0) == 0) { _longjmp($182|0, threwValue|0); } tempRet0 = threwValue; } else { $183 = -1; };
    $184 = tempRet0;
    if ((($183|0) == 1)) {
     $$reg2mem675$0 = $184;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($183|0) == 2)) {
     $$reg2mem687$0 = $184;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    __THREW__ = 0;
    (invoke_iiiii(21,($roll|0),($size|0),($off$0|0),(66872|0))|0);
    $185 = __THREW__; __THREW__ = 0;
    if ((($185|0) != 0) & ((threwValue|0) != 0)) { $186 = _testSetjmp(HEAP32[$185>>2]|0, _setjmpTable)|0; if (($186|0) == 0) { _longjmp($185|0, threwValue|0); } tempRet0 = threwValue; } else { $186 = -1; };
    $187 = tempRet0;
    if ((($186|0) == 1)) {
     $$reg2mem675$0 = $187;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($186|0) == 2)) {
     $$reg2mem687$0 = $187;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    $188 = ($len$0|0)!=(0);
    if ($188) {
     $189 = (($len$0) - 1)|0;
     $190 = HEAP32[((80 + 12|0))>>2]|0;
     $191 = (($190) + ($189)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192 << 24 >> 24;
     $194 = ($193|0)!=(47);
     if ($194) {
      __THREW__ = 0;
      $195 = (invoke_iiiii(21,(((80 + 12|0))|0),(((80 + 16|0))|0),($len$0|0),(66880|0))|0);
      $196 = __THREW__; __THREW__ = 0;
      if ((($196|0) != 0) & ((threwValue|0) != 0)) { $197 = _testSetjmp(HEAP32[$196>>2]|0, _setjmpTable)|0; if (($197|0) == 0) { _longjmp($196|0, threwValue|0); } tempRet0 = threwValue; } else { $197 = -1; };
      $198 = tempRet0;
      if ((($197|0) == 1)) {
       $$reg2mem675$0 = $198;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break;
      } else if ((($197|0) == 2)) {
       $$reg2mem687$0 = $198;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break;
      }
      $$reg2mem697$0 = $195;
     } else {
      label = 81;
     }
    } else {
     label = 81;
    }
    if ((label|0) == 81) {
     $$reg2mem697$0 = $len$0;
    }
    $off$1 = 0;
    while(1) {
     $199 = HEAP32[$roll>>2]|0;
     $200 = (($199) + ($off$1)|0);
     $201 = HEAP8[$200>>0]|0;
     $202 = ($201<<24>>24)!=(0);
     if (!($202)) {
      break;
     }
     $203 = HEAP32[$roll>>2]|0;
     $204 = (($203) + ($off$1)|0);
     __THREW__ = 0;
     (invoke_iiiii(21,(((80 + 12|0))|0),(((80 + 16|0))|0),($$reg2mem697$0|0),($204|0))|0);
     $205 = __THREW__; __THREW__ = 0;
     if ((($205|0) != 0) & ((threwValue|0) != 0)) { $206 = _testSetjmp(HEAP32[$205>>2]|0, _setjmpTable)|0; if (($206|0) == 0) { _longjmp($205|0, threwValue|0); } tempRet0 = threwValue; } else { $206 = -1; };
     $207 = tempRet0;
     if ((($206|0) == 1)) {
      $$reg2mem675$0 = $207;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break L1;
     } else if ((($206|0) == 2)) {
      $$reg2mem687$0 = $207;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break L1;
     }
     $208 = HEAP32[((80 + 12|0))>>2]|0;
     __THREW__ = 0;
     invoke_vi(18,($208|0));
     $209 = __THREW__; __THREW__ = 0;
     if ((($209|0) != 0) & ((threwValue|0) != 0)) { $210 = _testSetjmp(HEAP32[$209>>2]|0, _setjmpTable)|0; if (($210|0) == 0) { _longjmp($209|0, threwValue|0); } tempRet0 = threwValue; } else { $210 = -1; };
     $211 = tempRet0;
     if ((($210|0) == 1)) {
      $$reg2mem675$0 = $211;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break L1;
     } else if ((($210|0) == 2)) {
      $$reg2mem687$0 = $211;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break L1;
     }
     $212 = HEAP32[$roll>>2]|0;
     $213 = (($212) + ($off$1)|0);
     __THREW__ = 0;
     $214 = (invoke_ii(14,($213|0))|0);
     $215 = __THREW__; __THREW__ = 0;
     if ((($215|0) != 0) & ((threwValue|0) != 0)) { $216 = _testSetjmp(HEAP32[$215>>2]|0, _setjmpTable)|0; if (($216|0) == 0) { _longjmp($215|0, threwValue|0); } tempRet0 = threwValue; } else { $216 = -1; };
     $217 = tempRet0;
     if ((($216|0) == 1)) {
      $$reg2mem675$0 = $217;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break L1;
     } else if ((($216|0) == 2)) {
      $$reg2mem687$0 = $217;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break L1;
     }
     $218 = (($214) + 1)|0;
     $219 = (($off$1) + ($218))|0;
     $off$1 = $219;
    }
    $220 = HEAP32[((80 + 12|0))>>2]|0;
    $221 = (($220) + ($len$0)|0);
    HEAP8[$221>>0] = 0;
    $222 = HEAP32[$roll>>2]|0;
    __THREW__ = 0;
    invoke_vi(19,($222|0));
    $223 = __THREW__; __THREW__ = 0;
    if ((($223|0) != 0) & ((threwValue|0) != 0)) { $224 = _testSetjmp(HEAP32[$223>>2]|0, _setjmpTable)|0; if (($224|0) == 0) { _longjmp($223|0, threwValue|0); } tempRet0 = threwValue; } else { $224 = -1; };
    $225 = tempRet0;
    if ((($224|0) == 1)) {
     $$reg2mem675$0 = $225;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($224|0) == 2)) {
     $$reg2mem687$0 = $225;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    STACKTOP = sp;return;
   }
   $226 = HEAP32[((80 + 40|0))>>2]|0;
   $227 = ($226|0)!=(0);
   if (!($227)) {
    $228 = HEAP32[((80 + 68|0))>>2]|0;
    $229 = ($228|0)!=(0);
    if (!($229)) {
     $230 = HEAP32[((80 + 76|0))>>2]|0;
     $231 = ($230|0)!=(0);
     if (!($231)) {
      $232 = HEAP32[((80 + 56|0))>>2]|0;
      __THREW__ = 0;
      $233 = (invoke_ii(14,($232|0))|0);
      $234 = __THREW__; __THREW__ = 0;
      if ((($234|0) != 0) & ((threwValue|0) != 0)) { $235 = _testSetjmp(HEAP32[$234>>2]|0, _setjmpTable)|0; if (($235|0) == 0) { _longjmp($234|0, threwValue|0); } tempRet0 = threwValue; } else { $235 = -1; };
      $236 = tempRet0;
      if ((($235|0) == 1)) {
       $$reg2mem675$0 = $236;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break;
      } else if ((($235|0) == 2)) {
       $$reg2mem687$0 = $236;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break;
      }
      $237 = ($len$0>>>0)>=($233>>>0);
      if ($237) {
       $238 = HEAP32[((80 + 12|0))>>2]|0;
       $239 = (($238) + ($len$0)|0);
       $240 = HEAP32[((80 + 56|0))>>2]|0;
       __THREW__ = 0;
       $241 = (invoke_ii(14,($240|0))|0);
       $242 = __THREW__; __THREW__ = 0;
       if ((($242|0) != 0) & ((threwValue|0) != 0)) { $243 = _testSetjmp(HEAP32[$242>>2]|0, _setjmpTable)|0; if (($243|0) == 0) { _longjmp($242|0, threwValue|0); } tempRet0 = threwValue; } else { $243 = -1; };
       $244 = tempRet0;
       if ((($243|0) == 1)) {
        $$reg2mem675$0 = $244;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
        label = 330;
        break;
       } else if ((($243|0) == 2)) {
        $$reg2mem687$0 = $244;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
        label = 167;
        break;
       }
       $245 = (0 - ($241))|0;
       $246 = (($239) + ($245)|0);
       $247 = HEAP32[((80 + 56|0))>>2]|0;
       __THREW__ = 0;
       $248 = (invoke_iii(13,($246|0),($247|0))|0);
       $249 = __THREW__; __THREW__ = 0;
       if ((($249|0) != 0) & ((threwValue|0) != 0)) { $250 = _testSetjmp(HEAP32[$249>>2]|0, _setjmpTable)|0; if (($250|0) == 0) { _longjmp($249|0, threwValue|0); } tempRet0 = threwValue; } else { $250 = -1; };
       $251 = tempRet0;
       if ((($250|0) == 1)) {
        $$reg2mem675$0 = $251;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
        label = 330;
        break;
       } else if ((($250|0) == 2)) {
        $$reg2mem687$0 = $251;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
        label = 167;
        break;
       }
       $252 = ($248|0)==(0);
       if ($252) {
        $253 = HEAP32[((80 + 12|0))>>2]|0;
        $254 = HEAP32[((80 + 56|0))>>2]|0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer718>>2] = $253;
        $vararg_ptr721 = (($vararg_buffer718) + 4|0);
        HEAP32[$vararg_ptr721>>2] = $254;
        (invoke_iii(17,(66888|0),($vararg_buffer718|0))|0);
        $255 = __THREW__; __THREW__ = 0;
        if ((($255|0) != 0) & ((threwValue|0) != 0)) { $256 = _testSetjmp(HEAP32[$255>>2]|0, _setjmpTable)|0; if (($256|0) == 0) { _longjmp($255|0, threwValue|0); } tempRet0 = threwValue; } else { $256 = -1; };
        $257 = tempRet0;
        if ((($256|0) == 1)) {
         $$reg2mem675$0 = $257;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
         label = 330;
         break;
        } else if ((($256|0) == 2)) {
         $$reg2mem687$0 = $257;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
         label = 167;
         break;
        }
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
   $258 = HEAP32[((80 + 76|0))>>2]|0;
   $259 = ($258|0)==(1);
   do {
    if ($259) {
     $260 = HEAP32[((80 + 32|0))>>2]|0;
     $261 = ($260|0)!=(0);
     if ($261) {
      $len$1 = $len$0;
     } else {
      $262 = HEAP32[((80 + 68|0))>>2]|0;
      $263 = ($262|0)!=(0);
      if ($263) {
       $len$1 = $len$0;
      } else {
       $264 = HEAP32[((80 + 12|0))>>2]|0;
       __THREW__ = 0;
       $265 = (invoke_ii(29,($264|0))|0);
       $266 = __THREW__; __THREW__ = 0;
       if ((($266|0) != 0) & ((threwValue|0) != 0)) { $267 = _testSetjmp(HEAP32[$266>>2]|0, _setjmpTable)|0; if (($267|0) == 0) { _longjmp($266|0, threwValue|0); } tempRet0 = threwValue; } else { $267 = -1; };
       $268 = tempRet0;
       if ((($267|0) == 1)) {
        $$reg2mem675$0 = $268;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
        label = 330;
        break L1;
       } else if ((($267|0) == 2)) {
        $$reg2mem687$0 = $268;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
        label = 167;
        break L1;
       }
       $269 = ($265|0)==(0);
       if (!($269)) {
        $274 = (($len$0) - ($265))|0;
        $len$1 = $274;
        break;
       }
       $270 = HEAP32[((80 + 12|0))>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer722>>2] = $270;
       (invoke_iii(17,(66920|0),($vararg_buffer722|0))|0);
       $271 = __THREW__; __THREW__ = 0;
       if ((($271|0) != 0) & ((threwValue|0) != 0)) { $272 = _testSetjmp(HEAP32[$271>>2]|0, _setjmpTable)|0; if (($272|0) == 0) { _longjmp($271|0, threwValue|0); } tempRet0 = threwValue; } else { $272 = -1; };
       $273 = tempRet0;
       if ((($272|0) == 1)) {
        $$reg2mem675$0 = $273;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
        label = 330;
        break L1;
       } else if ((($272|0) == 2)) {
        $$reg2mem687$0 = $273;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
        label = 167;
        break L1;
       }
       STACKTOP = sp;return;
      }
     }
    } else {
     $len$1 = $len$0;
    }
   } while(0);
   $275 = HEAP32[((80 + 12|0))>>2]|0;
   __THREW__ = 0;
   HEAP32[$vararg_buffer725>>2] = 0;
   $276 = (invoke_iiii(30,($275|0),0,($vararg_buffer725|0))|0);
   $277 = __THREW__; __THREW__ = 0;
   if ((($277|0) != 0) & ((threwValue|0) != 0)) { $278 = _testSetjmp(HEAP32[$277>>2]|0, _setjmpTable)|0; if (($278|0) == 0) { _longjmp($277|0, threwValue|0); } tempRet0 = threwValue; } else { $278 = -1; };
   $279 = tempRet0;
   if ((($278|0) == 1)) {
    $$reg2mem675$0 = $279;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
    label = 330;
    break;
   } else if ((($278|0) == 2)) {
    $$reg2mem687$0 = $279;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
    label = 167;
    break;
   }
   HEAP32[((80 + 4|0))>>2] = $276;
   $280 = HEAP32[((80 + 4|0))>>2]|0;
   $281 = ($280|0)<(0);
   if ($281) {
    __THREW__ = 0;
    $282 = (invoke_i(25)|0);
    $283 = __THREW__; __THREW__ = 0;
    if ((($283|0) != 0) & ((threwValue|0) != 0)) { $284 = _testSetjmp(HEAP32[$283>>2]|0, _setjmpTable)|0; if (($284|0) == 0) { _longjmp($283|0, threwValue|0); } tempRet0 = threwValue; } else { $284 = -1; };
    $285 = tempRet0;
    if ((($284|0) == 1)) {
     $$reg2mem675$0 = $285;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($284|0) == 2)) {
     $$reg2mem687$0 = $285;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    $286 = HEAP32[$282>>2]|0;
    $287 = HEAP32[((80 + 12|0))>>2]|0;
    __THREW__ = 0;
    $288 = (invoke_i(25)|0);
    $289 = __THREW__; __THREW__ = 0;
    if ((($289|0) != 0) & ((threwValue|0) != 0)) { $290 = _testSetjmp(HEAP32[$289>>2]|0, _setjmpTable)|0; if (($290|0) == 0) { _longjmp($289|0, threwValue|0); } tempRet0 = threwValue; } else { $290 = -1; };
    $291 = tempRet0;
    if ((($290|0) == 1)) {
     $$reg2mem675$0 = $291;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($290|0) == 2)) {
     $$reg2mem687$0 = $291;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    $292 = HEAP32[$288>>2]|0;
    __THREW__ = 0;
    $293 = (invoke_ii(31,($292|0))|0);
    $294 = __THREW__; __THREW__ = 0;
    if ((($294|0) != 0) & ((threwValue|0) != 0)) { $295 = _testSetjmp(HEAP32[$294>>2]|0, _setjmpTable)|0; if (($295|0) == 0) { _longjmp($294|0, threwValue|0); } tempRet0 = threwValue; } else { $295 = -1; };
    $296 = tempRet0;
    if ((($295|0) == 1)) {
     $$reg2mem675$0 = $296;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($295|0) == 2)) {
     $$reg2mem687$0 = $296;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    __THREW__ = 0;
    HEAP32[$vararg_buffer728>>2] = $287;
    $vararg_ptr731 = (($vararg_buffer728) + 4|0);
    HEAP32[$vararg_ptr731>>2] = $293;
    $vararg_ptr732 = (($vararg_buffer728) + 8|0);
    HEAP32[$vararg_ptr732>>2] = 0;
    invoke_viii(12,($286|0),(66504|0),($vararg_buffer728|0));
    $297 = __THREW__; __THREW__ = 0;
    if ((($297|0) != 0) & ((threwValue|0) != 0)) { $298 = _testSetjmp(HEAP32[$297>>2]|0, _setjmpTable)|0; if (($298|0) == 0) { _longjmp($297|0, threwValue|0); } tempRet0 = threwValue; } else { $298 = -1; };
    $299 = tempRet0;
    if ((($298|0) == 1)) {
     $$reg2mem675$0 = $299;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($298|0) == 2)) {
     $$reg2mem687$0 = $299;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
   }
   $300 = HEAP32[((80 + 28|0))>>2]|0;
   $301 = $300 & 1;
   $302 = ($301|0)!=(0);
   if ($302) {
    $303 = HEAP32[((80 + 12|0))>>2]|0;
    __THREW__ = 0;
    $304 = (invoke_ii(32,($303|0))|0);
    $305 = __THREW__; __THREW__ = 0;
    if ((($305|0) != 0) & ((threwValue|0) != 0)) { $306 = _testSetjmp(HEAP32[$305>>2]|0, _setjmpTable)|0; if (($306|0) == 0) { _longjmp($305|0, threwValue|0); } tempRet0 = threwValue; } else { $306 = -1; };
    $307 = tempRet0;
    if ((($306|0) == 1)) {
     $$reg2mem675$0 = $307;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($306|0) == 2)) {
     $$reg2mem687$0 = $307;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    $$reg2mem695$0 = $304;
   } else {
    $$reg2mem695$0 = 0;
   }
   HEAP32[((80 + 60|0))>>2] = $$reg2mem695$0;
   $308 = HEAP32[((80 + 28|0))>>2]|0;
   $309 = $308 & 2;
   $310 = ($309|0)!=(0);
   if ($310) {
    $311 = (($st) + 56|0);
    $312 = HEAP32[$311>>2]|0;
    $$reg2mem693$0 = $312;
   } else {
    $$reg2mem693$0 = 0;
   }
   HEAP32[((80 + 64|0))>>2] = $$reg2mem693$0;
   $len$2 = $len$1;
   label = 124;
  }
 } while(0);
 L161: do {
  if ((label|0) == 124) {
   $313 = HEAP32[((80 + 128|0))>>2]|0;
   $314 = ($313|0)!=(0|0);
   if ($314) {
    $315 = HEAP32[((80 + 128|0))>>2]|0;
    __THREW__ = 0;
    invoke_vi(19,($315|0));
    $316 = __THREW__; __THREW__ = 0;
    if ((($316|0) != 0) & ((threwValue|0) != 0)) { $317 = _testSetjmp(HEAP32[$316>>2]|0, _setjmpTable)|0; if (($317|0) == 0) { _longjmp($316|0, threwValue|0); } tempRet0 = threwValue; } else { $317 = -1; };
    $318 = tempRet0;
    if ((($317|0) == 1)) {
     $$reg2mem675$0 = $318;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($317|0) == 2)) {
     $$reg2mem687$0 = $318;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    HEAP32[((80 + 128|0))>>2] = 0;
   }
   $319 = HEAP32[((80 + 76|0))>>2]|0;
   $320 = ($319|0)!=(0);
   do {
    if ($320) {
     __THREW__ = 0;
     invoke_v(33);
     $321 = __THREW__; __THREW__ = 0;
     if ((($321|0) != 0) & ((threwValue|0) != 0)) { $322 = _testSetjmp(HEAP32[$321>>2]|0, _setjmpTable)|0; if (($322|0) == 0) { _longjmp($321|0, threwValue|0); } tempRet0 = threwValue; } else { $322 = -1; };
     $323 = tempRet0;
     if ((($322|0) == 1)) {
      $$reg2mem675$0 = $323;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break L161;
     } else if ((($322|0) == 2)) {
      $$reg2mem687$0 = $323;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break L161;
     }
     __THREW__ = 0;
     $324 = (invoke_ii(34,1)|0);
     $325 = __THREW__; __THREW__ = 0;
     if ((($325|0) != 0) & ((threwValue|0) != 0)) { $326 = _testSetjmp(HEAP32[$325>>2]|0, _setjmpTable)|0; if (($326|0) == 0) { _longjmp($325|0, threwValue|0); } tempRet0 = threwValue; } else { $326 = -1; };
     $327 = tempRet0;
     if ((($326|0) == 1)) {
      $$reg2mem675$0 = $327;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break L161;
     } else if ((($326|0) == 2)) {
      $$reg2mem687$0 = $327;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break L161;
     }
     $method = $324;
     $328 = $method;
     $329 = ($328|0)!=(8);
     do {
      if ($329) {
       $330 = $method;
       $331 = ($330|0)!=(257);
       if ($331) {
        $332 = $method;
        $333 = ($332|0)==(-2);
        if ($333) {
         $334 = HEAP32[((80 + 40|0))>>2]|0;
         $335 = ($334|0)!=(0);
         if ($335) {
          $336 = HEAP32[((80 + 32|0))>>2]|0;
          $337 = ($336|0)!=(0);
          if ($337) {
           $338 = HEAP32[((80 + 76|0))>>2]|0;
           $339 = ($338|0)!=(2);
           if ($339) {
            $340 = HEAP32[((80 + 68|0))>>2]|0;
            $341 = ($340|0)!=(0);
            if (!($341)) {
             break;
            }
           }
          }
         }
        }
        $342 = HEAP32[((80 + 128|0))>>2]|0;
        $343 = ($342|0)!=(0|0);
        if ($343) {
         $344 = HEAP32[((80 + 128|0))>>2]|0;
         __THREW__ = 0;
         invoke_vi(19,($344|0));
         $345 = __THREW__; __THREW__ = 0;
         if ((($345|0) != 0) & ((threwValue|0) != 0)) { $346 = _testSetjmp(HEAP32[$345>>2]|0, _setjmpTable)|0; if (($346|0) == 0) { _longjmp($345|0, threwValue|0); } tempRet0 = threwValue; } else { $346 = -1; };
         $347 = tempRet0;
         if ((($346|0) == 1)) {
          $$reg2mem675$0 = $347;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
          label = 330;
          break L161;
         } else if ((($346|0) == 2)) {
          $$reg2mem687$0 = $347;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
          label = 167;
          break L161;
         }
         HEAP32[((80 + 128|0))>>2] = 0;
        }
        $348 = HEAP32[((80 + 4|0))>>2]|0;
        $349 = ($348|0)!=(0);
        if ($349) {
         $350 = HEAP32[((80 + 4|0))>>2]|0;
         __THREW__ = 0;
         (invoke_ii(35,($350|0))|0);
         $351 = __THREW__; __THREW__ = 0;
         if ((($351|0) != 0) & ((threwValue|0) != 0)) { $352 = _testSetjmp(HEAP32[$351>>2]|0, _setjmpTable)|0; if (($352|0) == 0) { _longjmp($351|0, threwValue|0); } tempRet0 = threwValue; } else { $352 = -1; };
         $353 = tempRet0;
         if ((($352|0) == 1)) {
          $$reg2mem675$0 = $353;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
          label = 330;
          break L161;
         } else if ((($352|0) == 2)) {
          $$reg2mem687$0 = $353;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
          label = 167;
          break L161;
         }
        }
        $354 = $method;
        $355 = ($354|0)!=(-1);
        if ($355) {
         $356 = $method;
         $357 = ($356|0)<(0);
         if ($357) {
          $358 = $method;
          $359 = ($358|0)!=(-6);
          $360 = $359 ? 66968 : 67000;
          $$reg2mem691$0 = $360;
         } else {
          $$reg2mem691$0 = 67048;
         }
         $361 = HEAP32[((80 + 12|0))>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer733>>2] = $361;
         (invoke_iii(17,($$reg2mem691$0|0),($vararg_buffer733|0))|0);
         $362 = __THREW__; __THREW__ = 0;
         if ((($362|0) != 0) & ((threwValue|0) != 0)) { $363 = _testSetjmp(HEAP32[$362>>2]|0, _setjmpTable)|0; if (($363|0) == 0) { _longjmp($362|0, threwValue|0); } tempRet0 = threwValue; } else { $363 = -1; };
         $364 = tempRet0;
         if ((($363|0) == 1)) {
          $$reg2mem675$0 = $364;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
          label = 330;
          break L161;
         } else if ((($363|0) == 2)) {
          $$reg2mem687$0 = $364;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
          label = 167;
          break L161;
         }
        }
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $365 = HEAP32[((80 + 76|0))>>2]|0;
     $366 = ($365|0)==(2);
     if (!($366)) {
      break;
     }
     $367 = (($try_this_) + 156|0);
     HEAP32[$367>>2] = 0;
     $368 = (($try_this_) + 156|0);
     $369 = (($368) + 4|0);
     HEAP32[$369>>2] = 0;
     $370 = (($try_this_) + 156|0);
     $371 = (($370) + 8|0);
     HEAP32[$371>>2] = 0;
     __THREW__ = 0;
     invoke_v(1);
     $372 = __THREW__; __THREW__ = 0;
     if ((($372|0) != 0) & ((threwValue|0) != 0)) { $373 = _testSetjmp(HEAP32[$372>>2]|0, _setjmpTable)|0; if (($373|0) == 0) { _longjmp($372|0, threwValue|0); } tempRet0 = threwValue; } else { $373 = -1; };
     $374 = tempRet0;
     if ((($373|0) == 1)) {
      $$reg2mem675$0 = $374;$try_pushed_$2 = 1;$try_pushed_4$1 = 0;
      label = 330;
      break L161;
     } else if ((($373|0) == 2)) {
      $$reg2mem687$0 = $374;$try_pushed_$0 = 1;$try_pushed_4$0 = 0;
      label = 167;
      break L161;
     }
     $375 = HEAP32[_try_key_>>2]|0;
     __THREW__ = 0;
     $376 = (invoke_ii(2,($375|0))|0);
     $377 = __THREW__; __THREW__ = 0;
     if ((($377|0) != 0) & ((threwValue|0) != 0)) { $378 = _testSetjmp(HEAP32[$377>>2]|0, _setjmpTable)|0; if (($378|0) == 0) { _longjmp($377|0, threwValue|0); } tempRet0 = threwValue; } else { $378 = -1; };
     $379 = tempRet0;
     if ((($378|0) == 1)) {
      $$reg2mem675$0 = $379;$try_pushed_$2 = 1;$try_pushed_4$1 = 0;
      label = 330;
      break L161;
     } else if ((($378|0) == 2)) {
      $$reg2mem687$0 = $379;$try_pushed_$0 = 1;$try_pushed_4$0 = 0;
      label = 167;
      break L161;
     }
     $380 = (($try_this_) + 168|0);
     HEAP32[$380>>2] = $376;
     $381 = HEAP32[_try_key_>>2]|0;
     __THREW__ = 0;
     $382 = (invoke_iii(3,($381|0),($try_this_|0))|0);
     $383 = __THREW__; __THREW__ = 0;
     if ((($383|0) != 0) & ((threwValue|0) != 0)) { $384 = _testSetjmp(HEAP32[$383>>2]|0, _setjmpTable)|0; if (($384|0) == 0) { _longjmp($383|0, threwValue|0); } tempRet0 = threwValue; } else { $384 = -1; };
     $385 = tempRet0;
     if ((($384|0) == 1)) {
      $$reg2mem675$0 = $385;$try_pushed_$2 = 1;$try_pushed_4$1 = 0;
      label = 330;
      break L161;
     } else if ((($384|0) == 2)) {
      $$reg2mem687$0 = $385;$try_pushed_$0 = 1;$try_pushed_4$0 = 0;
      label = 167;
      break L161;
     }
     $386 = ($382|0)==(0);
     if (!($386)) {
      __THREW__ = 0;
      invoke_viiii(4,(8|0),(64|0),3577,(67096|0));
      $387 = __THREW__; __THREW__ = 0;
      if ((($387|0) != 0) & ((threwValue|0) != 0)) { $388 = _testSetjmp(HEAP32[$387>>2]|0, _setjmpTable)|0; if (($388|0) == 0) { _longjmp($387|0, threwValue|0); } tempRet0 = threwValue; } else { $388 = -1; };
      $389 = tempRet0;
      if ((($388|0) == 1)) {
       $$reg2mem675$0 = $389;$try_pushed_$2 = 1;$try_pushed_4$1 = 0;
       label = 330;
       break L161;
      } else if ((($388|0) == 2)) {
       $$reg2mem687$0 = $389;$try_pushed_$0 = 1;$try_pushed_4$0 = 0;
       label = 167;
       break L161;
      }
      // unreachable;
     }
     _saveSetjmp($try_this_,2,_setjmpTable|0)|0;
     __THREW__ = 0;
     $390 = __THREW__; __THREW__ = 0;
     if ((($390|0) != 0) & ((threwValue|0) != 0)) { $391 = _testSetjmp(HEAP32[$390>>2]|0, _setjmpTable)|0; if (($391|0) == 0) { _longjmp($390|0, threwValue|0); } tempRet0 = threwValue; } else { $391 = -1; };
     $392 = tempRet0;
     if ((($391|0) == 1)) {
      $$reg2mem675$0 = $392;$try_pushed_$2 = 1;$try_pushed_4$1 = 0;
      label = 330;
      break L161;
     } else if ((($391|0) == 2)) {
      $$reg2mem687$0 = $392;$try_pushed_$0 = 1;$try_pushed_4$0 = 0;
      label = 167;
      break L161;
     }
     $$reg2mem687$0 = 0;$try_pushed_$0 = 1;$try_pushed_4$0 = 0;
     label = 167;
     break L161;
    }
   } while(0);
   $484 = HEAP32[((80 + 68|0))>>2]|0;
   $485 = ($484|0)!=(0);
   if ($485) {
    __THREW__ = 0;
    invoke_v(41);
    $486 = __THREW__; __THREW__ = 0;
    if ((($486|0) != 0) & ((threwValue|0) != 0)) { $487 = _testSetjmp(HEAP32[$486>>2]|0, _setjmpTable)|0; if (($487|0) == 0) { _longjmp($486|0, threwValue|0); } tempRet0 = threwValue; } else { $487 = -1; };
    $488 = tempRet0;
    if ((($487|0) == 1)) {
     $$reg2mem675$0 = $488;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($487|0) == 2)) {
     $$reg2mem687$0 = $488;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    $489 = HEAP32[((80 + 128|0))>>2]|0;
    $490 = ($489|0)!=(0|0);
    if ($490) {
     $491 = HEAP32[((80 + 128|0))>>2]|0;
     __THREW__ = 0;
     invoke_vi(19,($491|0));
     $492 = __THREW__; __THREW__ = 0;
     if ((($492|0) != 0) & ((threwValue|0) != 0)) { $493 = _testSetjmp(HEAP32[$492>>2]|0, _setjmpTable)|0; if (($493|0) == 0) { _longjmp($492|0, threwValue|0); } tempRet0 = threwValue; } else { $493 = -1; };
     $494 = tempRet0;
     if ((($493|0) == 1)) {
      $$reg2mem675$0 = $494;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break;
     } else if ((($493|0) == 2)) {
      $$reg2mem687$0 = $494;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break;
     }
     HEAP32[((80 + 128|0))>>2] = 0;
    }
    $495 = HEAP32[((80 + 4|0))>>2]|0;
    $496 = ($495|0)!=(0);
    if ($496) {
     $497 = HEAP32[((80 + 4|0))>>2]|0;
     __THREW__ = 0;
     (invoke_ii(35,($497|0))|0);
     $498 = __THREW__; __THREW__ = 0;
     if ((($498|0) != 0) & ((threwValue|0) != 0)) { $499 = _testSetjmp(HEAP32[$498>>2]|0, _setjmpTable)|0; if (($499|0) == 0) { _longjmp($498|0, threwValue|0); } tempRet0 = threwValue; } else { $499 = -1; };
     $500 = tempRet0;
     if ((($499|0) == 1)) {
      $$reg2mem675$0 = $500;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break;
     } else if ((($499|0) == 2)) {
      $$reg2mem687$0 = $500;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break;
     }
    }
    STACKTOP = sp;return;
   }
   $501 = ($path|0)==(0|0);
   if ($501) {
    label = 233;
   } else {
    $502 = HEAP32[((80 + 32|0))>>2]|0;
    $503 = ($502|0)!=(0);
    if ($503) {
     label = 233;
    } else {
     $525 = HEAP32[((80 + 12|0))>>2]|0;
     $526 = HEAP32[((80 + 76|0))>>2]|0;
     $527 = ($526|0)!=(0);
     if ($527) {
      $528 = HEAP32[((80 + 28|0))>>2]|0;
      $529 = $528 & 1;
      $530 = ($529|0)!=(0);
      if ($530) {
       $531 = HEAP32[((80 + 128|0))>>2]|0;
       $532 = ($531|0)!=(0|0);
       if ($532) {
        $533 = HEAP32[((80 + 12|0))>>2]|0;
        __THREW__ = 0;
        $534 = (invoke_ii(32,($533|0))|0);
        $535 = __THREW__; __THREW__ = 0;
        if ((($535|0) != 0) & ((threwValue|0) != 0)) { $536 = _testSetjmp(HEAP32[$535>>2]|0, _setjmpTable)|0; if (($536|0) == 0) { _longjmp($535|0, threwValue|0); } tempRet0 = threwValue; } else { $536 = -1; };
        $537 = tempRet0;
        if ((($536|0) == 1)) {
         $$reg2mem675$0 = $537;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
         label = 330;
         break;
        } else if ((($536|0) == 2)) {
         $$reg2mem687$0 = $537;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
         label = 167;
         break;
        }
        $538 = HEAP32[((80 + 12|0))>>2]|0;
        $539 = $534;
        $540 = $538;
        $541 = (($539) - ($540))|0;
        $542 = HEAP32[((80 + 128|0))>>2]|0;
        __THREW__ = 0;
        $543 = (invoke_ii(32,($542|0))|0);
        $544 = __THREW__; __THREW__ = 0;
        if ((($544|0) != 0) & ((threwValue|0) != 0)) { $545 = _testSetjmp(HEAP32[$544>>2]|0, _setjmpTable)|0; if (($545|0) == 0) { _longjmp($544|0, threwValue|0); } tempRet0 = threwValue; } else { $545 = -1; };
        $546 = tempRet0;
        if ((($545|0) == 1)) {
         $$reg2mem675$0 = $546;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
         label = 330;
         break;
        } else if ((($545|0) == 2)) {
         $$reg2mem687$0 = $546;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
         label = 167;
         break;
        }
        __THREW__ = 0;
        $547 = (invoke_ii(14,($543|0))|0);
        $548 = __THREW__; __THREW__ = 0;
        if ((($548|0) != 0) & ((threwValue|0) != 0)) { $549 = _testSetjmp(HEAP32[$548>>2]|0, _setjmpTable)|0; if (($549|0) == 0) { _longjmp($548|0, threwValue|0); } tempRet0 = threwValue; } else { $549 = -1; };
        $550 = tempRet0;
        if ((($549|0) == 1)) {
         $$reg2mem675$0 = $550;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
         label = 330;
         break;
        } else if ((($549|0) == 2)) {
         $$reg2mem687$0 = $550;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
         label = 167;
         break;
        }
        $len$3 = $547;$pre$0 = $541;$sufx2$1 = 66872;$to$0 = $543;
       } else {
        label = 249;
       }
      } else {
       label = 249;
      }
      if ((label|0) == 249) {
       $551 = (($525) + ($len$2)|0);
       __THREW__ = 0;
       $552 = (invoke_iii(13,($551|0),(66656|0))|0);
       $553 = __THREW__; __THREW__ = 0;
       if ((($553|0) != 0) & ((threwValue|0) != 0)) { $554 = _testSetjmp(HEAP32[$553>>2]|0, _setjmpTable)|0; if (($554|0) == 0) { _longjmp($553|0, threwValue|0); } tempRet0 = threwValue; } else { $554 = -1; };
       $555 = tempRet0;
       if ((($554|0) == 1)) {
        $$reg2mem675$0 = $555;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
        label = 330;
        break;
       } else if ((($554|0) == 2)) {
        $$reg2mem687$0 = $555;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
        label = 167;
        break;
       }
       $556 = ($552|0)==(0);
       if ($556) {
        $sufx2$0 = 67240;
       } else {
        $sufx2$0 = 66872;
       }
       $len$3 = $len$2;$pre$0 = 0;$sufx2$1 = $sufx2$0;$to$0 = $525;
      }
      $len$4 = $len$3;$pre$1 = $pre$0;$sufx2$2 = $sufx2$1;$to$1 = $to$0;
     } else {
      $557 = HEAP32[((80 + 56|0))>>2]|0;
      $len$4 = $len$2;$pre$1 = 0;$sufx2$2 = $557;$to$1 = $525;
     }
     $558 = (($pre$1) + ($len$4))|0;
     __THREW__ = 0;
     $559 = (invoke_ii(14,($sufx2$2|0))|0);
     $560 = __THREW__; __THREW__ = 0;
     if ((($560|0) != 0) & ((threwValue|0) != 0)) { $561 = _testSetjmp(HEAP32[$560>>2]|0, _setjmpTable)|0; if (($561|0) == 0) { _longjmp($560|0, threwValue|0); } tempRet0 = threwValue; } else { $561 = -1; };
     $562 = tempRet0;
     if ((($561|0) == 1)) {
      $$reg2mem675$0 = $562;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break;
     } else if ((($561|0) == 2)) {
      $$reg2mem687$0 = $562;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break;
     }
     $563 = (($558) + ($559))|0;
     $564 = (($563) + 1)|0;
     __THREW__ = 0;
     $565 = (invoke_iii(42,(0|0),($564|0))|0);
     $566 = __THREW__; __THREW__ = 0;
     if ((($566|0) != 0) & ((threwValue|0) != 0)) { $567 = _testSetjmp(HEAP32[$566>>2]|0, _setjmpTable)|0; if (($567|0) == 0) { _longjmp($566|0, threwValue|0); } tempRet0 = threwValue; } else { $567 = -1; };
     $568 = tempRet0;
     if ((($567|0) == 1)) {
      $$reg2mem675$0 = $568;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break;
     } else if ((($567|0) == 2)) {
      $$reg2mem687$0 = $568;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break;
     }
     HEAP32[((80 + 20|0))>>2] = $565;
     $569 = HEAP32[((80 + 20|0))>>2]|0;
     $570 = HEAP32[((80 + 12|0))>>2]|0;
     _memcpy(($569|0),($570|0),($pre$1|0))|0;
     $571 = HEAP32[((80 + 20|0))>>2]|0;
     $572 = (($571) + ($pre$1)|0);
     _memcpy(($572|0),($to$1|0),($len$4|0))|0;
     $573 = HEAP32[((80 + 20|0))>>2]|0;
     $574 = (($573) + ($pre$1)|0);
     $575 = (($574) + ($len$4)|0);
     __THREW__ = 0;
     (invoke_iii(43,($575|0),($sufx2$2|0))|0);
     $576 = __THREW__; __THREW__ = 0;
     if ((($576|0) != 0) & ((threwValue|0) != 0)) { $577 = _testSetjmp(HEAP32[$576>>2]|0, _setjmpTable)|0; if (($577|0) == 0) { _longjmp($576|0, threwValue|0); } tempRet0 = threwValue; } else { $577 = -1; };
     $578 = tempRet0;
     if ((($577|0) == 1)) {
      $$reg2mem675$0 = $578;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break;
     } else if ((($577|0) == 2)) {
      $$reg2mem687$0 = $578;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break;
     }
     $579 = HEAP32[((80 + 20|0))>>2]|0;
     $580 = HEAP32[((80 + 40|0))>>2]|0;
     $581 = ($580|0)!=(0);
     $582 = $581 ? 0 : 128;
     $583 = 577 | $582;
     __THREW__ = 0;
     HEAP32[$vararg_buffer742>>2] = 384;
     $584 = (invoke_iiii(30,($579|0),($583|0),($vararg_buffer742|0))|0);
     $585 = __THREW__; __THREW__ = 0;
     if ((($585|0) != 0) & ((threwValue|0) != 0)) { $586 = _testSetjmp(HEAP32[$585>>2]|0, _setjmpTable)|0; if (($586|0) == 0) { _longjmp($585|0, threwValue|0); } tempRet0 = threwValue; } else { $586 = -1; };
     $587 = tempRet0;
     if ((($586|0) == 1)) {
      $$reg2mem675$0 = $587;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break;
     } else if ((($586|0) == 2)) {
      $$reg2mem687$0 = $587;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break;
     }
     HEAP32[((80 + 8|0))>>2] = $584;
     $588 = HEAP32[((80 + 8|0))>>2]|0;
     $589 = ($588|0)<(0);
     if ($589) {
      __THREW__ = 0;
      $590 = (invoke_i(25)|0);
      $591 = __THREW__; __THREW__ = 0;
      if ((($591|0) != 0) & ((threwValue|0) != 0)) { $592 = _testSetjmp(HEAP32[$591>>2]|0, _setjmpTable)|0; if (($592|0) == 0) { _longjmp($591|0, threwValue|0); } tempRet0 = threwValue; } else { $592 = -1; };
      $593 = tempRet0;
      if ((($592|0) == 1)) {
       $$reg2mem675$0 = $593;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break;
      } else if ((($592|0) == 2)) {
       $$reg2mem687$0 = $593;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break;
      }
      $594 = HEAP32[$590>>2]|0;
      $595 = ($594|0)==(17);
      if ($595) {
       __THREW__ = 0;
       $596 = (invoke_ii(15,0)|0);
       $597 = __THREW__; __THREW__ = 0;
       if ((($597|0) != 0) & ((threwValue|0) != 0)) { $598 = _testSetjmp(HEAP32[$597>>2]|0, _setjmpTable)|0; if (($598|0) == 0) { _longjmp($597|0, threwValue|0); } tempRet0 = threwValue; } else { $598 = -1; };
       $599 = tempRet0;
       if ((($598|0) == 1)) {
        $$reg2mem675$0 = $599;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
        label = 330;
        break;
       } else if ((($598|0) == 2)) {
        $$reg2mem687$0 = $599;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
        label = 167;
        break;
       }
       $600 = ($596|0)!=(0);
       if ($600) {
        $601 = HEAP32[((80 + 24|0))>>2]|0;
        $602 = ($601|0)!=(0);
        if ($602) {
         $603 = HEAP32[_stderr>>2]|0;
         $604 = HEAP32[((80 + 20|0))>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer745>>2] = $604;
         (invoke_iiii(44,($603|0),(67248|0),($vararg_buffer745|0))|0);
         $605 = __THREW__; __THREW__ = 0;
         if ((($605|0) != 0) & ((threwValue|0) != 0)) { $606 = _testSetjmp(HEAP32[$605>>2]|0, _setjmpTable)|0; if (($606|0) == 0) { _longjmp($605|0, threwValue|0); } tempRet0 = threwValue; } else { $606 = -1; };
         $607 = tempRet0;
         if ((($606|0) == 1)) {
          $$reg2mem675$0 = $607;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
          label = 330;
          break;
         } else if ((($606|0) == 2)) {
          $$reg2mem687$0 = $607;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
          label = 167;
          break;
         }
         $608 = HEAP32[_stderr>>2]|0;
         __THREW__ = 0;
         (invoke_ii(45,($608|0))|0);
         $609 = __THREW__; __THREW__ = 0;
         if ((($609|0) != 0) & ((threwValue|0) != 0)) { $610 = _testSetjmp(HEAP32[$609>>2]|0, _setjmpTable)|0; if (($610|0) == 0) { _longjmp($609|0, threwValue|0); } tempRet0 = threwValue; } else { $610 = -1; };
         $611 = tempRet0;
         if ((($610|0) == 1)) {
          $$reg2mem675$0 = $611;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
          label = 330;
          break;
         } else if ((($610|0) == 2)) {
          $$reg2mem687$0 = $611;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
          label = 167;
          break;
         }
         $reply$0 = -1;
         while(1) {
          __THREW__ = 0;
          $612 = (invoke_i(46)|0);
          $613 = __THREW__; __THREW__ = 0;
          if ((($613|0) != 0) & ((threwValue|0) != 0)) { $614 = _testSetjmp(HEAP32[$613>>2]|0, _setjmpTable)|0; if (($614|0) == 0) { _longjmp($613|0, threwValue|0); } tempRet0 = threwValue; } else { $614 = -1; };
          $615 = tempRet0;
          if ((($614|0) == 1)) {
           $$reg2mem675$0 = $615;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
           label = 330;
           break L161;
          } else if ((($614|0) == 2)) {
           $$reg2mem687$0 = $615;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
           label = 167;
           break L161;
          }
          $616 = ($reply$0|0)<(0);
          if ($616) {
           $617 = ($612|0)!=(32);
           if ($617) {
            $618 = ($612|0)!=(9);
            if ($618) {
             $619 = ($612|0)==(121);
             if ($619) {
              $$reg2mem681$0 = 1;
             } else {
              $620 = ($612|0)==(89);
              $$reg2mem681$0 = $620;
             }
             $621 = $$reg2mem681$0 ? 1 : 0;
             $reply$1 = $621;
            } else {
             $reply$1 = $reply$0;
            }
           } else {
            $reply$1 = $reply$0;
           }
          } else {
           $reply$1 = $reply$0;
          }
          $622 = ($612|0)!=(-1);
          if ($622) {
           $623 = ($612|0)!=(10);
           if ($623) {
            $624 = ($612|0)!=(13);
            $$reg2mem679$0 = $624;
           } else {
            $$reg2mem679$0 = 0;
           }
          } else {
           $$reg2mem679$0 = 0;
          }
          if ($$reg2mem679$0) {
           $reply$0 = $reply$1;
          } else {
           break;
          }
         }
         $625 = ($reply$1|0)==(1);
         if ($625) {
          $626 = HEAP32[((80 + 20|0))>>2]|0;
          __THREW__ = 0;
          HEAP32[$vararg_buffer748>>2] = 384;
          $627 = (invoke_iiii(30,($626|0),577,($vararg_buffer748|0))|0);
          $628 = __THREW__; __THREW__ = 0;
          if ((($628|0) != 0) & ((threwValue|0) != 0)) { $629 = _testSetjmp(HEAP32[$628>>2]|0, _setjmpTable)|0; if (($629|0) == 0) { _longjmp($628|0, threwValue|0); } tempRet0 = threwValue; } else { $629 = -1; };
          $630 = tempRet0;
          if ((($629|0) == 1)) {
           $$reg2mem675$0 = $630;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
           label = 330;
           break;
          } else if ((($629|0) == 2)) {
           $$reg2mem687$0 = $630;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
           label = 167;
           break;
          }
          HEAP32[((80 + 8|0))>>2] = $627;
         }
        }
       }
      }
     }
     $631 = HEAP32[((80 + 8|0))>>2]|0;
     $632 = ($631|0)<(0);
     if ($632) {
      __THREW__ = 0;
      $633 = (invoke_i(25)|0);
      $634 = __THREW__; __THREW__ = 0;
      if ((($634|0) != 0) & ((threwValue|0) != 0)) { $635 = _testSetjmp(HEAP32[$634>>2]|0, _setjmpTable)|0; if (($635|0) == 0) { _longjmp($634|0, threwValue|0); } tempRet0 = threwValue; } else { $635 = -1; };
      $636 = tempRet0;
      if ((($635|0) == 1)) {
       $$reg2mem675$0 = $636;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break;
      } else if ((($635|0) == 2)) {
       $$reg2mem687$0 = $636;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break;
      }
      $637 = HEAP32[$633>>2]|0;
      $638 = ($637|0)==(17);
      if ($638) {
       $639 = HEAP32[((80 + 20|0))>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer751>>2] = $639;
       (invoke_iii(17,(67280|0),($vararg_buffer751|0))|0);
       $640 = __THREW__; __THREW__ = 0;
       if ((($640|0) != 0) & ((threwValue|0) != 0)) { $641 = _testSetjmp(HEAP32[$640>>2]|0, _setjmpTable)|0; if (($641|0) == 0) { _longjmp($640|0, threwValue|0); } tempRet0 = threwValue; } else { $641 = -1; };
       $642 = tempRet0;
       if ((($641|0) == 1)) {
        $$reg2mem675$0 = $642;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
        label = 330;
        break;
       } else if ((($641|0) == 2)) {
        $$reg2mem687$0 = $642;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
        label = 167;
        break;
       }
       $643 = HEAP32[((80 + 20|0))>>2]|0;
       $644 = ($643|0)!=(0|0);
       if ($644) {
        $645 = HEAP32[((80 + 20|0))>>2]|0;
        __THREW__ = 0;
        invoke_vi(19,($645|0));
        $646 = __THREW__; __THREW__ = 0;
        if ((($646|0) != 0) & ((threwValue|0) != 0)) { $647 = _testSetjmp(HEAP32[$646>>2]|0, _setjmpTable)|0; if (($647|0) == 0) { _longjmp($646|0, threwValue|0); } tempRet0 = threwValue; } else { $647 = -1; };
        $648 = tempRet0;
        if ((($647|0) == 1)) {
         $$reg2mem675$0 = $648;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
         label = 330;
         break;
        } else if ((($647|0) == 2)) {
         $$reg2mem687$0 = $648;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
         label = 167;
         break;
        }
        HEAP32[((80 + 20|0))>>2] = 0;
       }
       $649 = HEAP32[((80 + 128|0))>>2]|0;
       $650 = ($649|0)!=(0|0);
       if ($650) {
        $651 = HEAP32[((80 + 128|0))>>2]|0;
        __THREW__ = 0;
        invoke_vi(19,($651|0));
        $652 = __THREW__; __THREW__ = 0;
        if ((($652|0) != 0) & ((threwValue|0) != 0)) { $653 = _testSetjmp(HEAP32[$652>>2]|0, _setjmpTable)|0; if (($653|0) == 0) { _longjmp($652|0, threwValue|0); } tempRet0 = threwValue; } else { $653 = -1; };
        $654 = tempRet0;
        if ((($653|0) == 1)) {
         $$reg2mem675$0 = $654;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
         label = 330;
         break;
        } else if ((($653|0) == 2)) {
         $$reg2mem687$0 = $654;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
         label = 167;
         break;
        }
        HEAP32[((80 + 128|0))>>2] = 0;
       }
       $655 = HEAP32[((80 + 4|0))>>2]|0;
       $656 = ($655|0)!=(0);
       if ($656) {
        $657 = HEAP32[((80 + 4|0))>>2]|0;
        __THREW__ = 0;
        (invoke_ii(35,($657|0))|0);
        $658 = __THREW__; __THREW__ = 0;
        if ((($658|0) != 0) & ((threwValue|0) != 0)) { $659 = _testSetjmp(HEAP32[$658>>2]|0, _setjmpTable)|0; if (($659|0) == 0) { _longjmp($658|0, threwValue|0); } tempRet0 = threwValue; } else { $659 = -1; };
        $660 = tempRet0;
        if ((($659|0) == 1)) {
         $$reg2mem675$0 = $660;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
         label = 330;
         break;
        } else if ((($659|0) == 2)) {
         $$reg2mem687$0 = $660;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
         label = 167;
         break;
        }
       }
       STACKTOP = sp;return;
      }
     }
     $661 = HEAP32[((80 + 8|0))>>2]|0;
     $662 = ($661|0)<(0);
     if ($662) {
      __THREW__ = 0;
      $663 = (invoke_i(25)|0);
      $664 = __THREW__; __THREW__ = 0;
      if ((($664|0) != 0) & ((threwValue|0) != 0)) { $665 = _testSetjmp(HEAP32[$664>>2]|0, _setjmpTable)|0; if (($665|0) == 0) { _longjmp($664|0, threwValue|0); } tempRet0 = threwValue; } else { $665 = -1; };
      $666 = tempRet0;
      if ((($665|0) == 1)) {
       $$reg2mem675$0 = $666;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break;
      } else if ((($665|0) == 2)) {
       $$reg2mem687$0 = $666;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break;
      }
      $667 = HEAP32[$663>>2]|0;
      $668 = HEAP32[((80 + 20|0))>>2]|0;
      __THREW__ = 0;
      $669 = (invoke_i(25)|0);
      $670 = __THREW__; __THREW__ = 0;
      if ((($670|0) != 0) & ((threwValue|0) != 0)) { $671 = _testSetjmp(HEAP32[$670>>2]|0, _setjmpTable)|0; if (($671|0) == 0) { _longjmp($670|0, threwValue|0); } tempRet0 = threwValue; } else { $671 = -1; };
      $672 = tempRet0;
      if ((($671|0) == 1)) {
       $$reg2mem675$0 = $672;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break;
      } else if ((($671|0) == 2)) {
       $$reg2mem687$0 = $672;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break;
      }
      $673 = HEAP32[$669>>2]|0;
      __THREW__ = 0;
      $674 = (invoke_ii(31,($673|0))|0);
      $675 = __THREW__; __THREW__ = 0;
      if ((($675|0) != 0) & ((threwValue|0) != 0)) { $676 = _testSetjmp(HEAP32[$675>>2]|0, _setjmpTable)|0; if (($676|0) == 0) { _longjmp($675|0, threwValue|0); } tempRet0 = threwValue; } else { $676 = -1; };
      $677 = tempRet0;
      if ((($676|0) == 1)) {
       $$reg2mem675$0 = $677;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break;
      } else if ((($676|0) == 2)) {
       $$reg2mem687$0 = $677;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break;
      }
      __THREW__ = 0;
      HEAP32[$vararg_buffer754>>2] = $668;
      $vararg_ptr757 = (($vararg_buffer754) + 4|0);
      HEAP32[$vararg_ptr757>>2] = $674;
      $vararg_ptr758 = (($vararg_buffer754) + 8|0);
      HEAP32[$vararg_ptr758>>2] = 0;
      invoke_viii(12,($667|0),(66480|0),($vararg_buffer754|0));
      $678 = __THREW__; __THREW__ = 0;
      if ((($678|0) != 0) & ((threwValue|0) != 0)) { $679 = _testSetjmp(HEAP32[$678>>2]|0, _setjmpTable)|0; if (($679|0) == 0) { _longjmp($678|0, threwValue|0); } tempRet0 = threwValue; } else { $679 = -1; };
      $680 = tempRet0;
      if ((($679|0) == 1)) {
       $$reg2mem675$0 = $680;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break;
      } else if ((($679|0) == 2)) {
       $$reg2mem687$0 = $680;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break;
      }
     }
    }
   }
   if ((label|0) == 233) {
    __THREW__ = 0;
    $504 = (invoke_iii(42,(0|0),9)|0);
    $505 = __THREW__; __THREW__ = 0;
    if ((($505|0) != 0) & ((threwValue|0) != 0)) { $506 = _testSetjmp(HEAP32[$505>>2]|0, _setjmpTable)|0; if (($506|0) == 0) { _longjmp($505|0, threwValue|0); } tempRet0 = threwValue; } else { $506 = -1; };
    $507 = tempRet0;
    if ((($506|0) == 1)) {
     $$reg2mem675$0 = $507;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($506|0) == 2)) {
     $$reg2mem687$0 = $507;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    HEAP32[((80 + 20|0))>>2] = $504;
    $508 = HEAP32[((80 + 20|0))>>2]|0;
    __THREW__ = 0;
    (invoke_iii(43,($508|0),(67160|0))|0);
    $509 = __THREW__; __THREW__ = 0;
    if ((($509|0) != 0) & ((threwValue|0) != 0)) { $510 = _testSetjmp(HEAP32[$509>>2]|0, _setjmpTable)|0; if (($510|0) == 0) { _longjmp($509|0, threwValue|0); } tempRet0 = threwValue; } else { $510 = -1; };
    $511 = tempRet0;
    if ((($510|0) == 1)) {
     $$reg2mem675$0 = $511;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($510|0) == 2)) {
     $$reg2mem687$0 = $511;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    HEAP32[((80 + 8|0))>>2] = 1;
    $512 = HEAP32[((80 + 76|0))>>2]|0;
    $513 = ($512|0)!=(0);
    if (!($513)) {
     $514 = HEAP32[((80 + 40|0))>>2]|0;
     $515 = ($514|0)!=(0);
     if (!($515)) {
      $516 = HEAP32[((80 + 8|0))>>2]|0;
      __THREW__ = 0;
      $517 = (invoke_ii(15,($516|0))|0);
      $518 = __THREW__; __THREW__ = 0;
      if ((($518|0) != 0) & ((threwValue|0) != 0)) { $519 = _testSetjmp(HEAP32[$518>>2]|0, _setjmpTable)|0; if (($519|0) == 0) { _longjmp($518|0, threwValue|0); } tempRet0 = threwValue; } else { $519 = -1; };
      $520 = tempRet0;
      if ((($519|0) == 1)) {
       $$reg2mem675$0 = $520;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
       label = 330;
       break;
      } else if ((($519|0) == 2)) {
       $$reg2mem687$0 = $520;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
       label = 167;
       break;
      }
      $521 = ($517|0)!=(0);
      if ($521) {
       __THREW__ = 0;
       HEAP32[$vararg_buffer739>>2] = 0;
       invoke_viii(12,22,(67176|0),($vararg_buffer739|0));
       $522 = __THREW__; __THREW__ = 0;
       if ((($522|0) != 0) & ((threwValue|0) != 0)) { $523 = _testSetjmp(HEAP32[$522>>2]|0, _setjmpTable)|0; if (($523|0) == 0) { _longjmp($522|0, threwValue|0); } tempRet0 = threwValue; } else { $523 = -1; };
       $524 = tempRet0;
       if ((($523|0) == 1)) {
        $$reg2mem675$0 = $524;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
        label = 330;
        break;
       } else if ((($523|0) == 2)) {
        $$reg2mem687$0 = $524;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
        label = 167;
        break;
       }
      }
     }
    }
   }
   $681 = HEAP32[((80 + 128|0))>>2]|0;
   $682 = ($681|0)!=(0|0);
   if ($682) {
    $683 = HEAP32[((80 + 128|0))>>2]|0;
    __THREW__ = 0;
    invoke_vi(19,($683|0));
    $684 = __THREW__; __THREW__ = 0;
    if ((($684|0) != 0) & ((threwValue|0) != 0)) { $685 = _testSetjmp(HEAP32[$684>>2]|0, _setjmpTable)|0; if (($685|0) == 0) { _longjmp($684|0, threwValue|0); } tempRet0 = threwValue; } else { $685 = -1; };
    $686 = tempRet0;
    if ((($685|0) == 1)) {
     $$reg2mem675$0 = $686;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($685|0) == 2)) {
     $$reg2mem687$0 = $686;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
    HEAP32[((80 + 128|0))>>2] = 0;
   }
   $687 = HEAP32[((80 + 24|0))>>2]|0;
   $688 = ($687|0)>(1);
   if ($688) {
    $689 = HEAP32[_stderr>>2]|0;
    $690 = HEAP32[((80 + 12|0))>>2]|0;
    $691 = HEAP32[((80 + 20|0))>>2]|0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer759>>2] = $690;
    $vararg_ptr762 = (($vararg_buffer759) + 4|0);
    HEAP32[$vararg_ptr762>>2] = $691;
    (invoke_iiii(44,($689|0),(67304|0),($vararg_buffer759|0))|0);
    $692 = __THREW__; __THREW__ = 0;
    if ((($692|0) != 0) & ((threwValue|0) != 0)) { $693 = _testSetjmp(HEAP32[$692>>2]|0, _setjmpTable)|0; if (($693|0) == 0) { _longjmp($692|0, threwValue|0); } tempRet0 = threwValue; } else { $693 = -1; };
    $694 = tempRet0;
    if ((($693|0) == 1)) {
     $$reg2mem675$0 = $694;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
     label = 330;
     break;
    } else if ((($693|0) == 2)) {
     $$reg2mem687$0 = $694;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
     label = 167;
     break;
    }
   }
   $695 = HEAP32[((80 + 76|0))>>2]|0;
   $696 = ($695|0)!=(0);
   if (!($696)) {
    $817 = HEAP32[((80 + 112|0))>>2]|0;
    $818 = ($817|0)>(1);
    if ($818) {
     __THREW__ = 0;
     invoke_v(49);
     $819 = __THREW__; __THREW__ = 0;
     if ((($819|0) != 0) & ((threwValue|0) != 0)) { $820 = _testSetjmp(HEAP32[$819>>2]|0, _setjmpTable)|0; if (($820|0) == 0) { _longjmp($819|0, threwValue|0); } tempRet0 = threwValue; } else { $820 = -1; };
     $821 = tempRet0;
     if ((($820|0) == 1)) {
      $$reg2mem675$0 = $821;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break;
     } else if ((($820|0) == 2)) {
      $$reg2mem687$0 = $821;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break;
     }
    } else {
     __THREW__ = 0;
     invoke_vi(50,0);
     $822 = __THREW__; __THREW__ = 0;
     if ((($822|0) != 0) & ((threwValue|0) != 0)) { $823 = _testSetjmp(HEAP32[$822>>2]|0, _setjmpTable)|0; if (($823|0) == 0) { _longjmp($822|0, threwValue|0); } tempRet0 = threwValue; } else { $823 = -1; };
     $824 = tempRet0;
     if ((($823|0) == 1)) {
      $$reg2mem675$0 = $824;$try_pushed_$2 = 0;$try_pushed_4$1 = 0;
      label = 330;
      break;
     } else if ((($823|0) == 2)) {
      $$reg2mem687$0 = $824;$try_pushed_$0 = 0;$try_pushed_4$0 = 0;
      label = 167;
      break;
     }
    }
    $try_pushed_$3 = 0;$try_pushed_4$3 = 0;
    label = 391;
    break;
   }
   $697 = (($try_this_3) + 156|0);
   HEAP32[$697>>2] = 0;
   $698 = (($try_this_3) + 156|0);
   $699 = (($698) + 4|0);
   HEAP32[$699>>2] = 0;
   $700 = (($try_this_3) + 156|0);
   $701 = (($700) + 8|0);
   HEAP32[$701>>2] = 0;
   __THREW__ = 0;
   invoke_v(1);
   $702 = __THREW__; __THREW__ = 0;
   if ((($702|0) != 0) & ((threwValue|0) != 0)) { $703 = _testSetjmp(HEAP32[$702>>2]|0, _setjmpTable)|0; if (($703|0) == 0) { _longjmp($702|0, threwValue|0); } tempRet0 = threwValue; } else { $703 = -1; };
   $704 = tempRet0;
   if ((($703|0) == 1)) {
    $$reg2mem675$0 = $704;$try_pushed_$2 = 0;$try_pushed_4$1 = 1;
    label = 330;
    break;
   } else if ((($703|0) == 2)) {
    $$reg2mem687$0 = $704;$try_pushed_$0 = 0;$try_pushed_4$0 = 1;
    label = 167;
    break;
   }
   $705 = HEAP32[_try_key_>>2]|0;
   __THREW__ = 0;
   $706 = (invoke_ii(2,($705|0))|0);
   $707 = __THREW__; __THREW__ = 0;
   if ((($707|0) != 0) & ((threwValue|0) != 0)) { $708 = _testSetjmp(HEAP32[$707>>2]|0, _setjmpTable)|0; if (($708|0) == 0) { _longjmp($707|0, threwValue|0); } tempRet0 = threwValue; } else { $708 = -1; };
   $709 = tempRet0;
   if ((($708|0) == 1)) {
    $$reg2mem675$0 = $709;$try_pushed_$2 = 0;$try_pushed_4$1 = 1;
    label = 330;
    break;
   } else if ((($708|0) == 2)) {
    $$reg2mem687$0 = $709;$try_pushed_$0 = 0;$try_pushed_4$0 = 1;
    label = 167;
    break;
   }
   $710 = (($try_this_3) + 168|0);
   HEAP32[$710>>2] = $706;
   $711 = HEAP32[_try_key_>>2]|0;
   __THREW__ = 0;
   $712 = (invoke_iii(3,($711|0),($try_this_3|0))|0);
   $713 = __THREW__; __THREW__ = 0;
   if ((($713|0) != 0) & ((threwValue|0) != 0)) { $714 = _testSetjmp(HEAP32[$713>>2]|0, _setjmpTable)|0; if (($714|0) == 0) { _longjmp($713|0, threwValue|0); } tempRet0 = threwValue; } else { $714 = -1; };
   $715 = tempRet0;
   if ((($714|0) == 1)) {
    $$reg2mem675$0 = $715;$try_pushed_$2 = 0;$try_pushed_4$1 = 1;
    label = 330;
    break;
   } else if ((($714|0) == 2)) {
    $$reg2mem687$0 = $715;$try_pushed_$0 = 0;$try_pushed_4$0 = 1;
    label = 167;
    break;
   }
   $716 = ($712|0)==(0);
   if (!($716)) {
    __THREW__ = 0;
    invoke_viiii(4,(8|0),(64|0),3688,(67096|0));
    $717 = __THREW__; __THREW__ = 0;
    if ((($717|0) != 0) & ((threwValue|0) != 0)) { $718 = _testSetjmp(HEAP32[$717>>2]|0, _setjmpTable)|0; if (($718|0) == 0) { _longjmp($717|0, threwValue|0); } tempRet0 = threwValue; } else { $718 = -1; };
    $719 = tempRet0;
    if ((($718|0) == 1)) {
     $$reg2mem675$0 = $719;$try_pushed_$2 = 0;$try_pushed_4$1 = 1;
     label = 330;
     break;
    } else if ((($718|0) == 2)) {
     $$reg2mem687$0 = $719;$try_pushed_$0 = 0;$try_pushed_4$0 = 1;
     label = 167;
     break;
    }
    // unreachable;
   }
   _saveSetjmp($try_this_3,1,_setjmpTable|0)|0;
   __THREW__ = 0;
   $720 = __THREW__; __THREW__ = 0;
   if ((($720|0) != 0) & ((threwValue|0) != 0)) { $721 = _testSetjmp(HEAP32[$720>>2]|0, _setjmpTable)|0; if (($721|0) == 0) { _longjmp($720|0, threwValue|0); } tempRet0 = threwValue; } else { $721 = -1; };
   $722 = tempRet0;
   if ((($721|0) == 1)) {
    $$reg2mem675$0 = $722;$try_pushed_$2 = 0;$try_pushed_4$1 = 1;
    label = 330;
    break;
   } else if ((($721|0) == 2)) {
    $$reg2mem687$0 = $722;$try_pushed_$0 = 0;$try_pushed_4$0 = 1;
    label = 167;
    break;
   }
   $$reg2mem675$0 = 0;$try_pushed_$2 = 0;$try_pushed_4$1 = 1;
   label = 330;
  }
 } while(0);
 L361: while(1) {
  if ((label|0) == 167) {
   label = 0;
   $393 = ($$reg2mem687$0|0)<(2);
   if ($393) {
    $394 = $method;
    $395 = ($394|0)==(8);
    if ($395) {
     __THREW__ = 0;
     invoke_v(36);
     $396 = __THREW__; __THREW__ = 0;
     if ((($396|0) != 0) & ((threwValue|0) != 0)) { $397 = _testSetjmp(HEAP32[$396>>2]|0, _setjmpTable)|0; if (($397|0) == 0) { _longjmp($396|0, threwValue|0); } tempRet0 = threwValue; } else { $397 = -1; };
     $398 = tempRet0;
     if ((($397|0) == 1)) {
      $$reg2mem675$0 = $398;$try_pushed_$2 = $try_pushed_$0;$try_pushed_4$1 = $try_pushed_4$0;
      label = 330;
      continue;
     } else if ((($397|0) == 2)) {
      $try_pushed_4$0$phi = $try_pushed_4$0;$try_pushed_$0$phi = $try_pushed_$0;$$reg2mem687$0 = $398;$try_pushed_4$0 = $try_pushed_4$0$phi;$try_pushed_$0 = $try_pushed_$0$phi;
      label = 167;
      continue;
     }
    } else {
     __THREW__ = 0;
     invoke_v(37);
     $399 = __THREW__; __THREW__ = 0;
     if ((($399|0) != 0) & ((threwValue|0) != 0)) { $400 = _testSetjmp(HEAP32[$399>>2]|0, _setjmpTable)|0; if (($400|0) == 0) { _longjmp($399|0, threwValue|0); } tempRet0 = threwValue; } else { $400 = -1; };
     $401 = tempRet0;
     if ((($400|0) == 1)) {
      $$reg2mem675$0 = $401;$try_pushed_$2 = $try_pushed_$0;$try_pushed_4$1 = $try_pushed_4$0;
      label = 330;
      continue;
     } else if ((($400|0) == 2)) {
      $try_pushed_4$0$phi = $try_pushed_4$0;$try_pushed_$0$phi = $try_pushed_$0;$$reg2mem687$0 = $401;$try_pushed_4$0 = $try_pushed_4$0$phi;$try_pushed_$0 = $try_pushed_$0$phi;
      label = 167;
      continue;
     }
     $402 = HEAP32[((80 + 68|0))>>2]|0;
     $403 = ($402|0)!=(0);
     if ($403) {
      $404 = HEAP32[((80 + 32928|0))>>2]|0;
      $405 = (($404) - 3)|0;
      HEAP32[((80 + 32928|0))>>2] = $405;
      $406 = $method;
      $407 = HEAP32[((80 + 32932|0))>>2]|0;
      __THREW__ = 0;
      invoke_viiii(38,($406|0),0,($407|0),0);
      $408 = __THREW__; __THREW__ = 0;
      if ((($408|0) != 0) & ((threwValue|0) != 0)) { $409 = _testSetjmp(HEAP32[$408>>2]|0, _setjmpTable)|0; if (($409|0) == 0) { _longjmp($408|0, threwValue|0); } tempRet0 = threwValue; } else { $409 = -1; };
      $410 = tempRet0;
      if ((($409|0) == 1)) {
       $$reg2mem675$0 = $410;$try_pushed_$2 = $try_pushed_$0;$try_pushed_4$1 = $try_pushed_4$0;
       label = 330;
       continue;
      } else if ((($409|0) == 2)) {
       $try_pushed_4$0$phi = $try_pushed_4$0;$try_pushed_$0$phi = $try_pushed_$0;$$reg2mem687$0 = $410;$try_pushed_4$0 = $try_pushed_4$0$phi;$try_pushed_$0 = $try_pushed_$0$phi;
       label = 167;
       continue;
      }
     }
    }
   }
   $411 = ($try_pushed_$0|0)!=(0);
   if ($411) {
    $412 = HEAP32[_try_key_>>2]|0;
    $413 = (($try_this_) + 168|0);
    $414 = HEAP32[$413>>2]|0;
    __THREW__ = 0;
    $415 = (invoke_iii(3,($412|0),($414|0))|0);
    $416 = __THREW__; __THREW__ = 0;
    if ((($416|0) != 0) & ((threwValue|0) != 0)) { $417 = _testSetjmp(HEAP32[$416>>2]|0, _setjmpTable)|0; if (($417|0) == 0) { _longjmp($416|0, threwValue|0); } tempRet0 = threwValue; } else { $417 = -1; };
    $418 = tempRet0;
    if ((($417|0) == 1)) {
     $$reg2mem675$0 = $418;$try_pushed_$2 = $try_pushed_$0;$try_pushed_4$1 = $try_pushed_4$0;
     label = 330;
     continue;
    } else if ((($417|0) == 2)) {
     $try_pushed_4$0$phi = $try_pushed_4$0;$try_pushed_$0$phi = $try_pushed_$0;$$reg2mem687$0 = $418;$try_pushed_4$0 = $try_pushed_4$0$phi;$try_pushed_$0 = $try_pushed_$0$phi;
     label = 167;
     continue;
    }
    $419 = ($415|0)==(0);
    if (!($419)) {
     __THREW__ = 0;
     invoke_viiii(4,(8|0),(64|0),3588,(67096|0));
     $420 = __THREW__; __THREW__ = 0;
     if ((($420|0) != 0) & ((threwValue|0) != 0)) { $421 = _testSetjmp(HEAP32[$420>>2]|0, _setjmpTable)|0; if (($421|0) == 0) { _longjmp($420|0, threwValue|0); } tempRet0 = threwValue; } else { $421 = -1; };
     $422 = tempRet0;
     if ((($421|0) == 1)) {
      $$reg2mem675$0 = $422;$try_pushed_$2 = $try_pushed_$0;$try_pushed_4$1 = $try_pushed_4$0;
      label = 330;
      continue;
     } else if ((($421|0) == 2)) {
      $try_pushed_4$0$phi = $try_pushed_4$0;$try_pushed_$0$phi = $try_pushed_$0;$$reg2mem687$0 = $422;$try_pushed_4$0 = $try_pushed_4$0$phi;$try_pushed_$0 = $try_pushed_$0$phi;
      label = 167;
      continue;
     } else {
      label = 185;
      break;
     }
    }
    $try_pushed_$1 = 0;
   } else {
    $try_pushed_$1 = $try_pushed_$0;
   }
   $423 = (($try_this_) + 156|0);
   ;HEAP32[$err+0>>2]=HEAP32[$423+0>>2]|0;HEAP32[$err+4>>2]=HEAP32[$423+4>>2]|0;HEAP32[$err+8>>2]=HEAP32[$423+8>>2]|0;
   $424 = HEAP32[$err>>2]|0;
   $425 = ($424|0)!=(0);
   do {
    if ($425) {
     $426 = HEAP32[$err>>2]|0;
     $427 = ($426|0)!=(33);
     if (!($427)) {
      $454 = (($err) + 8|0);
      $455 = HEAP32[$454>>2]|0;
      __THREW__ = 0;
      HEAP32[$vararg_buffer736>>2] = $455;
      (invoke_iii(17,(67144|0),($vararg_buffer736|0))|0);
      $456 = __THREW__; __THREW__ = 0;
      if ((($456|0) != 0) & ((threwValue|0) != 0)) { $457 = _testSetjmp(HEAP32[$456>>2]|0, _setjmpTable)|0; if (($457|0) == 0) { _longjmp($456|0, threwValue|0); } tempRet0 = threwValue; } else { $457 = -1; };
      $458 = tempRet0;
      if ((($457|0) == 1)) {
       $$reg2mem675$0 = $458;$try_pushed_$2 = $try_pushed_$1;$try_pushed_4$1 = $try_pushed_4$0;
       label = 330;
       continue L361;
      } else if ((($457|0) == 2)) {
       $try_pushed_4$0$phi = $try_pushed_4$0;$$reg2mem687$0 = $458;$try_pushed_$0 = $try_pushed_$1;$try_pushed_4$0 = $try_pushed_4$0$phi;
       label = 167;
       continue L361;
      }
      $459 = (($err) + 4|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = ($460|0)!=(0);
      if ($461) {
       $462 = (($err) + 8|0);
       $463 = HEAP32[$462>>2]|0;
       __THREW__ = 0;
       invoke_vi(19,($463|0));
       $464 = __THREW__; __THREW__ = 0;
       if ((($464|0) != 0) & ((threwValue|0) != 0)) { $465 = _testSetjmp(HEAP32[$464>>2]|0, _setjmpTable)|0; if (($465|0) == 0) { _longjmp($464|0, threwValue|0); } tempRet0 = threwValue; } else { $465 = -1; };
       $466 = tempRet0;
       if ((($465|0) == 1)) {
        $$reg2mem675$0 = $466;$try_pushed_$2 = $try_pushed_$1;$try_pushed_4$1 = $try_pushed_4$0;
        label = 330;
        continue L361;
       } else if ((($465|0) == 2)) {
        $try_pushed_4$0$phi = $try_pushed_4$0;$$reg2mem687$0 = $466;$try_pushed_$0 = $try_pushed_$1;$try_pushed_4$0 = $try_pushed_4$0$phi;
        label = 167;
        continue L361;
       }
       $467 = (($err) + 4|0);
       HEAP32[$467>>2] = 0;
       $468 = (($err) + 8|0);
       HEAP32[$468>>2] = 0;
      }
      __THREW__ = 0;
      (invoke_iiii(40,(80|0),(0|0),0)|0);
      $469 = __THREW__; __THREW__ = 0;
      if ((($469|0) != 0) & ((threwValue|0) != 0)) { $470 = _testSetjmp(HEAP32[$469>>2]|0, _setjmpTable)|0; if (($470|0) == 0) { _longjmp($469|0, threwValue|0); } tempRet0 = threwValue; } else { $470 = -1; };
      $471 = tempRet0;
      if ((($470|0) == 1)) {
       $$reg2mem675$0 = $471;$try_pushed_$2 = $try_pushed_$1;$try_pushed_4$1 = $try_pushed_4$0;
       label = 330;
       continue L361;
      } else if ((($470|0) == 2)) {
       $try_pushed_4$0$phi = $try_pushed_4$0;$$reg2mem687$0 = $471;$try_pushed_$0 = $try_pushed_$1;$try_pushed_4$0 = $try_pushed_4$0$phi;
       label = 167;
       continue L361;
      }
      break;
     }
     __THREW__ = 0;
     invoke_v(1);
     $428 = __THREW__; __THREW__ = 0;
     if ((($428|0) != 0) & ((threwValue|0) != 0)) { $429 = _testSetjmp(HEAP32[$428>>2]|0, _setjmpTable)|0; if (($429|0) == 0) { _longjmp($428|0, threwValue|0); } tempRet0 = threwValue; } else { $429 = -1; };
     $430 = tempRet0;
     if ((($429|0) == 1)) {
      $$reg2mem675$0 = $430;$try_pushed_$2 = $try_pushed_$1;$try_pushed_4$1 = $try_pushed_4$0;
      label = 330;
      continue L361;
     } else if ((($429|0) == 2)) {
      $try_pushed_4$0$phi = $try_pushed_4$0;$$reg2mem687$0 = $430;$try_pushed_$0 = $try_pushed_$1;$try_pushed_4$0 = $try_pushed_4$0$phi;
      label = 167;
      continue L361;
     }
     $431 = HEAP32[_try_key_>>2]|0;
     __THREW__ = 0;
     $432 = (invoke_ii(2,($431|0))|0);
     $433 = __THREW__; __THREW__ = 0;
     if ((($433|0) != 0) & ((threwValue|0) != 0)) { $434 = _testSetjmp(HEAP32[$433>>2]|0, _setjmpTable)|0; if (($434|0) == 0) { _longjmp($433|0, threwValue|0); } tempRet0 = threwValue; } else { $434 = -1; };
     $435 = tempRet0;
     if ((($434|0) == 1)) {
      $$reg2mem675$0 = $435;$try_pushed_$2 = $try_pushed_$1;$try_pushed_4$1 = $try_pushed_4$0;
      label = 330;
      continue L361;
     } else if ((($434|0) == 2)) {
      $try_pushed_4$0$phi = $try_pushed_4$0;$$reg2mem687$0 = $435;$try_pushed_$0 = $try_pushed_$1;$try_pushed_4$0 = $try_pushed_4$0$phi;
      label = 167;
      continue L361;
     }
     $436 = ($432|0)!=(0|0);
     if (!($436)) {
      __THREW__ = 0;
      invoke_viiii(4,(67104|0),(64|0),3590,(67096|0));
      $437 = __THREW__; __THREW__ = 0;
      if ((($437|0) != 0) & ((threwValue|0) != 0)) { $438 = _testSetjmp(HEAP32[$437>>2]|0, _setjmpTable)|0; if (($438|0) == 0) { _longjmp($437|0, threwValue|0); } tempRet0 = threwValue; } else { $438 = -1; };
      $439 = tempRet0;
      if ((($438|0) == 1)) {
       $$reg2mem675$0 = $439;$try_pushed_$2 = $try_pushed_$1;$try_pushed_4$1 = $try_pushed_4$0;
       label = 330;
       continue L361;
      } else if ((($438|0) == 2)) {
       $try_pushed_4$0$phi = $try_pushed_4$0;$$reg2mem687$0 = $439;$try_pushed_$0 = $try_pushed_$1;$try_pushed_4$0 = $try_pushed_4$0$phi;
       label = 167;
       continue L361;
      } else {
       label = 197;
       break L361;
      }
     }
     $440 = HEAP32[_try_key_>>2]|0;
     __THREW__ = 0;
     $441 = (invoke_ii(2,($440|0))|0);
     $442 = __THREW__; __THREW__ = 0;
     if ((($442|0) != 0) & ((threwValue|0) != 0)) { $443 = _testSetjmp(HEAP32[$442>>2]|0, _setjmpTable)|0; if (($443|0) == 0) { _longjmp($442|0, threwValue|0); } tempRet0 = threwValue; } else { $443 = -1; };
     $444 = tempRet0;
     if ((($443|0) == 1)) {
      $$reg2mem675$0 = $444;$try_pushed_$2 = $try_pushed_$1;$try_pushed_4$1 = $try_pushed_4$0;
      label = 330;
      continue L361;
     } else if ((($443|0) == 2)) {
      $try_pushed_4$0$phi = $try_pushed_4$0;$$reg2mem687$0 = $444;$try_pushed_$0 = $try_pushed_$1;$try_pushed_4$0 = $try_pushed_4$0$phi;
      label = 167;
      continue L361;
     }
     $445 = (($441) + 156|0);
     ;HEAP32[$445+0>>2]=HEAP32[$err+0>>2]|0;HEAP32[$445+4>>2]=HEAP32[$err+4>>2]|0;HEAP32[$445+8>>2]=HEAP32[$err+8>>2]|0;
     $446 = HEAP32[_try_key_>>2]|0;
     __THREW__ = 0;
     $447 = (invoke_ii(2,($446|0))|0);
     $448 = __THREW__; __THREW__ = 0;
     if ((($448|0) != 0) & ((threwValue|0) != 0)) { $449 = _testSetjmp(HEAP32[$448>>2]|0, _setjmpTable)|0; if (($449|0) == 0) { _longjmp($448|0, threwValue|0); } tempRet0 = threwValue; } else { $449 = -1; };
     $450 = tempRet0;
     if ((($449|0) == 1)) {
      $$reg2mem675$0 = $450;$try_pushed_$2 = $try_pushed_$1;$try_pushed_4$1 = $try_pushed_4$0;
      label = 330;
      continue L361;
     } else if ((($449|0) == 2)) {
      $try_pushed_4$0$phi = $try_pushed_4$0;$$reg2mem687$0 = $450;$try_pushed_$0 = $try_pushed_$1;$try_pushed_4$0 = $try_pushed_4$0$phi;
      label = 167;
      continue L361;
     }
     __THREW__ = 0;
     invoke_vii(39,($447|0),2);
     $451 = __THREW__; __THREW__ = 0;
     if ((($451|0) != 0) & ((threwValue|0) != 0)) { $452 = _testSetjmp(HEAP32[$451>>2]|0, _setjmpTable)|0; if (($452|0) == 0) { _longjmp($451|0, threwValue|0); } tempRet0 = threwValue; } else { $452 = -1; };
     $453 = tempRet0;
     if ((($452|0) == 1)) {
      $$reg2mem675$0 = $453;$try_pushed_$2 = $try_pushed_$1;$try_pushed_4$1 = $try_pushed_4$0;
      label = 330;
      continue L361;
     } else if ((($452|0) == 2)) {
      $try_pushed_4$0$phi = $try_pushed_4$0;$$reg2mem687$0 = $453;$try_pushed_$0 = $try_pushed_$1;$try_pushed_4$0 = $try_pushed_4$0$phi;
      label = 167;
      continue L361;
     } else {
      label = 201;
      break L361;
     }
    }
   } while(0);
   $472 = HEAP32[((80 + 128|0))>>2]|0;
   $473 = ($472|0)!=(0|0);
   if ($473) {
    $474 = HEAP32[((80 + 128|0))>>2]|0;
    __THREW__ = 0;
    invoke_vi(19,($474|0));
    $475 = __THREW__; __THREW__ = 0;
    if ((($475|0) != 0) & ((threwValue|0) != 0)) { $476 = _testSetjmp(HEAP32[$475>>2]|0, _setjmpTable)|0; if (($476|0) == 0) { _longjmp($475|0, threwValue|0); } tempRet0 = threwValue; } else { $476 = -1; };
    $477 = tempRet0;
    if ((($476|0) == 1)) {
     $$reg2mem675$0 = $477;$try_pushed_$2 = $try_pushed_$1;$try_pushed_4$1 = $try_pushed_4$0;
     label = 330;
     continue;
    } else if ((($476|0) == 2)) {
     $try_pushed_4$0$phi = $try_pushed_4$0;$$reg2mem687$0 = $477;$try_pushed_$0 = $try_pushed_$1;$try_pushed_4$0 = $try_pushed_4$0$phi;
     label = 167;
     continue;
    }
    HEAP32[((80 + 128|0))>>2] = 0;
   }
   $478 = HEAP32[((80 + 4|0))>>2]|0;
   $479 = ($478|0)!=(0);
   if (!($479)) {
    label = 218;
    break;
   }
   $480 = HEAP32[((80 + 4|0))>>2]|0;
   __THREW__ = 0;
   (invoke_ii(35,($480|0))|0);
   $481 = __THREW__; __THREW__ = 0;
   if ((($481|0) != 0) & ((threwValue|0) != 0)) { $482 = _testSetjmp(HEAP32[$481>>2]|0, _setjmpTable)|0; if (($482|0) == 0) { _longjmp($481|0, threwValue|0); } tempRet0 = threwValue; } else { $482 = -1; };
   $483 = tempRet0;
   if ((($482|0) == 1)) {
    $$reg2mem675$0 = $483;$try_pushed_$2 = $try_pushed_$1;$try_pushed_4$1 = $try_pushed_4$0;
    label = 330;
    continue;
   } else if ((($482|0) == 2)) {
    $try_pushed_4$0$phi = $try_pushed_4$0;$$reg2mem687$0 = $483;$try_pushed_$0 = $try_pushed_$1;$try_pushed_4$0 = $try_pushed_4$0$phi;
    label = 167;
    continue;
   } else {
    label = 217;
    break;
   }
  }
  else if ((label|0) == 330) {
   label = 0;
   $723 = ($$reg2mem675$0|0)<(2);
   if ($723) {
    $724 = $method;
    $725 = ($724|0)==(8);
    if ($725) {
     __THREW__ = 0;
     invoke_v(36);
     $726 = __THREW__; __THREW__ = 0;
     if ((($726|0) != 0) & ((threwValue|0) != 0)) { $727 = _testSetjmp(HEAP32[$726>>2]|0, _setjmpTable)|0; if (($727|0) == 0) { _longjmp($726|0, threwValue|0); } tempRet0 = threwValue; } else { $727 = -1; };
     $728 = tempRet0;
     if ((($727|0) == 1)) {
      $try_pushed_4$1$phi = $try_pushed_4$1;$try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $728;$try_pushed_4$1 = $try_pushed_4$1$phi;$try_pushed_$2 = $try_pushed_$2$phi;
      label = 330;
      continue;
     } else if ((($727|0) == 2)) {
      $$reg2mem687$0 = $728;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$1;
      label = 167;
      continue;
     }
    } else {
     $729 = $method;
     $730 = ($729|0)==(257);
     if ($730) {
      __THREW__ = 0;
      invoke_v(37);
      $731 = __THREW__; __THREW__ = 0;
      if ((($731|0) != 0) & ((threwValue|0) != 0)) { $732 = _testSetjmp(HEAP32[$731>>2]|0, _setjmpTable)|0; if (($732|0) == 0) { _longjmp($731|0, threwValue|0); } tempRet0 = threwValue; } else { $732 = -1; };
      $733 = tempRet0;
      if ((($732|0) == 1)) {
       $try_pushed_4$1$phi = $try_pushed_4$1;$try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $733;$try_pushed_4$1 = $try_pushed_4$1$phi;$try_pushed_$2 = $try_pushed_$2$phi;
       label = 330;
       continue;
      } else if ((($732|0) == 2)) {
       $$reg2mem687$0 = $733;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$1;
       label = 167;
       continue;
      }
     } else {
      __THREW__ = 0;
      invoke_v(47);
      $734 = __THREW__; __THREW__ = 0;
      if ((($734|0) != 0) & ((threwValue|0) != 0)) { $735 = _testSetjmp(HEAP32[$734>>2]|0, _setjmpTable)|0; if (($735|0) == 0) { _longjmp($734|0, threwValue|0); } tempRet0 = threwValue; } else { $735 = -1; };
      $736 = tempRet0;
      if ((($735|0) == 1)) {
       $try_pushed_4$1$phi = $try_pushed_4$1;$try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $736;$try_pushed_4$1 = $try_pushed_4$1$phi;$try_pushed_$2 = $try_pushed_$2$phi;
       label = 330;
       continue;
      } else if ((($735|0) == 2)) {
       $$reg2mem687$0 = $736;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$1;
       label = 167;
       continue;
      }
     }
    }
   }
   $737 = ($try_pushed_4$1|0)!=(0);
   if ($737) {
    $738 = HEAP32[_try_key_>>2]|0;
    $739 = (($try_this_3) + 168|0);
    $740 = HEAP32[$739>>2]|0;
    __THREW__ = 0;
    $741 = (invoke_iii(3,($738|0),($740|0))|0);
    $742 = __THREW__; __THREW__ = 0;
    if ((($742|0) != 0) & ((threwValue|0) != 0)) { $743 = _testSetjmp(HEAP32[$742>>2]|0, _setjmpTable)|0; if (($743|0) == 0) { _longjmp($742|0, threwValue|0); } tempRet0 = threwValue; } else { $743 = -1; };
    $744 = tempRet0;
    if ((($743|0) == 1)) {
     $try_pushed_4$1$phi = $try_pushed_4$1;$try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $744;$try_pushed_4$1 = $try_pushed_4$1$phi;$try_pushed_$2 = $try_pushed_$2$phi;
     label = 330;
     continue;
    } else if ((($743|0) == 2)) {
     $$reg2mem687$0 = $744;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$1;
     label = 167;
     continue;
    }
    $745 = ($741|0)==(0);
    if (!($745)) {
     __THREW__ = 0;
     invoke_viiii(4,(8|0),(64|0),3696,(67096|0));
     $746 = __THREW__; __THREW__ = 0;
     if ((($746|0) != 0) & ((threwValue|0) != 0)) { $747 = _testSetjmp(HEAP32[$746>>2]|0, _setjmpTable)|0; if (($747|0) == 0) { _longjmp($746|0, threwValue|0); } tempRet0 = threwValue; } else { $747 = -1; };
     $748 = tempRet0;
     if ((($747|0) == 1)) {
      $try_pushed_4$1$phi = $try_pushed_4$1;$try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $748;$try_pushed_4$1 = $try_pushed_4$1$phi;$try_pushed_$2 = $try_pushed_$2$phi;
      label = 330;
      continue;
     } else if ((($747|0) == 2)) {
      $$reg2mem687$0 = $748;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$1;
      label = 167;
      continue;
     } else {
      label = 349;
      break;
     }
    }
    $try_pushed_4$2 = 0;
   } else {
    $try_pushed_4$2 = $try_pushed_4$1;
   }
   $749 = (($try_this_3) + 156|0);
   ;HEAP32[$err+0>>2]=HEAP32[$749+0>>2]|0;HEAP32[$err+4>>2]=HEAP32[$749+4>>2]|0;HEAP32[$err+8>>2]=HEAP32[$749+8>>2]|0;
   $750 = HEAP32[$err>>2]|0;
   $751 = ($750|0)!=(0);
   if ($751) {
    $752 = HEAP32[$err>>2]|0;
    $753 = ($752|0)!=(33);
    if ($753) {
     __THREW__ = 0;
     invoke_v(1);
     $754 = __THREW__; __THREW__ = 0;
     if ((($754|0) != 0) & ((threwValue|0) != 0)) { $755 = _testSetjmp(HEAP32[$754>>2]|0, _setjmpTable)|0; if (($755|0) == 0) { _longjmp($754|0, threwValue|0); } tempRet0 = threwValue; } else { $755 = -1; };
     $756 = tempRet0;
     if ((($755|0) == 1)) {
      $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $756;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
      label = 330;
      continue;
     } else if ((($755|0) == 2)) {
      $$reg2mem687$0 = $756;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
      label = 167;
      continue;
     }
     $757 = HEAP32[_try_key_>>2]|0;
     __THREW__ = 0;
     $758 = (invoke_ii(2,($757|0))|0);
     $759 = __THREW__; __THREW__ = 0;
     if ((($759|0) != 0) & ((threwValue|0) != 0)) { $760 = _testSetjmp(HEAP32[$759>>2]|0, _setjmpTable)|0; if (($760|0) == 0) { _longjmp($759|0, threwValue|0); } tempRet0 = threwValue; } else { $760 = -1; };
     $761 = tempRet0;
     if ((($760|0) == 1)) {
      $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $761;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
      label = 330;
      continue;
     } else if ((($760|0) == 2)) {
      $$reg2mem687$0 = $761;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
      label = 167;
      continue;
     }
     $762 = ($758|0)!=(0|0);
     if (!($762)) {
      __THREW__ = 0;
      invoke_viiii(4,(67104|0),(64|0),3698,(67096|0));
      $763 = __THREW__; __THREW__ = 0;
      if ((($763|0) != 0) & ((threwValue|0) != 0)) { $764 = _testSetjmp(HEAP32[$763>>2]|0, _setjmpTable)|0; if (($764|0) == 0) { _longjmp($763|0, threwValue|0); } tempRet0 = threwValue; } else { $764 = -1; };
      $765 = tempRet0;
      if ((($764|0) == 1)) {
       $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $765;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
       label = 330;
       continue;
      } else if ((($764|0) == 2)) {
       $$reg2mem687$0 = $765;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
       label = 167;
       continue;
      } else {
       label = 361;
       break;
      }
     }
     $766 = HEAP32[_try_key_>>2]|0;
     __THREW__ = 0;
     $767 = (invoke_ii(2,($766|0))|0);
     $768 = __THREW__; __THREW__ = 0;
     if ((($768|0) != 0) & ((threwValue|0) != 0)) { $769 = _testSetjmp(HEAP32[$768>>2]|0, _setjmpTable)|0; if (($769|0) == 0) { _longjmp($768|0, threwValue|0); } tempRet0 = threwValue; } else { $769 = -1; };
     $770 = tempRet0;
     if ((($769|0) == 1)) {
      $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $770;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
      label = 330;
      continue;
     } else if ((($769|0) == 2)) {
      $$reg2mem687$0 = $770;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
      label = 167;
      continue;
     }
     $771 = (($767) + 156|0);
     ;HEAP32[$771+0>>2]=HEAP32[$err+0>>2]|0;HEAP32[$771+4>>2]=HEAP32[$err+4>>2]|0;HEAP32[$771+8>>2]=HEAP32[$err+8>>2]|0;
     $772 = HEAP32[_try_key_>>2]|0;
     __THREW__ = 0;
     $773 = (invoke_ii(2,($772|0))|0);
     $774 = __THREW__; __THREW__ = 0;
     if ((($774|0) != 0) & ((threwValue|0) != 0)) { $775 = _testSetjmp(HEAP32[$774>>2]|0, _setjmpTable)|0; if (($775|0) == 0) { _longjmp($774|0, threwValue|0); } tempRet0 = threwValue; } else { $775 = -1; };
     $776 = tempRet0;
     if ((($775|0) == 1)) {
      $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $776;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
      label = 330;
      continue;
     } else if ((($775|0) == 2)) {
      $$reg2mem687$0 = $776;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
      label = 167;
      continue;
     }
     __THREW__ = 0;
     invoke_vii(39,($773|0),2);
     $777 = __THREW__; __THREW__ = 0;
     if ((($777|0) != 0) & ((threwValue|0) != 0)) { $778 = _testSetjmp(HEAP32[$777>>2]|0, _setjmpTable)|0; if (($778|0) == 0) { _longjmp($777|0, threwValue|0); } tempRet0 = threwValue; } else { $778 = -1; };
     $779 = tempRet0;
     if ((($778|0) == 1)) {
      $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $779;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
      label = 330;
      continue;
     } else if ((($778|0) == 2)) {
      $$reg2mem687$0 = $779;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
      label = 167;
      continue;
     } else {
      label = 365;
      break;
     }
    }
    $780 = (($err) + 8|0);
    $781 = HEAP32[$780>>2]|0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer763>>2] = $781;
    (invoke_iii(17,(67144|0),($vararg_buffer763|0))|0);
    $782 = __THREW__; __THREW__ = 0;
    if ((($782|0) != 0) & ((threwValue|0) != 0)) { $783 = _testSetjmp(HEAP32[$782>>2]|0, _setjmpTable)|0; if (($783|0) == 0) { _longjmp($782|0, threwValue|0); } tempRet0 = threwValue; } else { $783 = -1; };
    $784 = tempRet0;
    if ((($783|0) == 1)) {
     $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $784;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
     label = 330;
     continue;
    } else if ((($783|0) == 2)) {
     $$reg2mem687$0 = $784;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
     label = 167;
     continue;
    }
    $785 = (($err) + 4|0);
    $786 = HEAP32[$785>>2]|0;
    $787 = ($786|0)!=(0);
    if ($787) {
     $788 = (($err) + 8|0);
     $789 = HEAP32[$788>>2]|0;
     __THREW__ = 0;
     invoke_vi(19,($789|0));
     $790 = __THREW__; __THREW__ = 0;
     if ((($790|0) != 0) & ((threwValue|0) != 0)) { $791 = _testSetjmp(HEAP32[$790>>2]|0, _setjmpTable)|0; if (($791|0) == 0) { _longjmp($790|0, threwValue|0); } tempRet0 = threwValue; } else { $791 = -1; };
     $792 = tempRet0;
     if ((($791|0) == 1)) {
      $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $792;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
      label = 330;
      continue;
     } else if ((($791|0) == 2)) {
      $$reg2mem687$0 = $792;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
      label = 167;
      continue;
     }
     $793 = (($err) + 4|0);
     HEAP32[$793>>2] = 0;
     $794 = (($err) + 8|0);
     HEAP32[$794>>2] = 0;
    }
    $795 = HEAP32[((80 + 20|0))>>2]|0;
    __THREW__ = 0;
    (invoke_iiii(40,($795|0),(0|0),0)|0);
    $796 = __THREW__; __THREW__ = 0;
    if ((($796|0) != 0) & ((threwValue|0) != 0)) { $797 = _testSetjmp(HEAP32[$796>>2]|0, _setjmpTable)|0; if (($797|0) == 0) { _longjmp($796|0, threwValue|0); } tempRet0 = threwValue; } else { $797 = -1; };
    $798 = tempRet0;
    if ((($797|0) == 1)) {
     $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $798;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
     label = 330;
     continue;
    } else if ((($797|0) == 2)) {
     $$reg2mem687$0 = $798;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
     label = 167;
     continue;
    }
    $799 = HEAP32[((80 + 8|0))>>2]|0;
    $800 = ($799|0)!=(-1);
    if ($800) {
     $801 = HEAP32[((80 + 8|0))>>2]|0;
     $802 = ($801|0)!=(1);
     if ($802) {
      $803 = HEAP32[((80 + 8|0))>>2]|0;
      __THREW__ = 0;
      (invoke_ii(35,($803|0))|0);
      $804 = __THREW__; __THREW__ = 0;
      if ((($804|0) != 0) & ((threwValue|0) != 0)) { $805 = _testSetjmp(HEAP32[$804>>2]|0, _setjmpTable)|0; if (($805|0) == 0) { _longjmp($804|0, threwValue|0); } tempRet0 = threwValue; } else { $805 = -1; };
      $806 = tempRet0;
      if ((($805|0) == 1)) {
       $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $806;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
       label = 330;
       continue;
      } else if ((($805|0) == 2)) {
       $$reg2mem687$0 = $806;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
       label = 167;
       continue;
      }
      HEAP32[((80 + 8|0))>>2] = -1;
      $807 = HEAP32[((80 + 20|0))>>2]|0;
      __THREW__ = 0;
      (invoke_ii(48,($807|0))|0);
      $808 = __THREW__; __THREW__ = 0;
      if ((($808|0) != 0) & ((threwValue|0) != 0)) { $809 = _testSetjmp(HEAP32[$808>>2]|0, _setjmpTable)|0; if (($809|0) == 0) { _longjmp($808|0, threwValue|0); } tempRet0 = threwValue; } else { $809 = -1; };
      $810 = tempRet0;
      if ((($809|0) == 1)) {
       $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $810;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
       label = 330;
       continue;
      } else if ((($809|0) == 2)) {
       $$reg2mem687$0 = $810;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
       label = 167;
       continue;
      }
      $811 = HEAP32[((80 + 20|0))>>2]|0;
      $812 = ($811|0)!=(0|0);
      if ($812) {
       $813 = HEAP32[((80 + 20|0))>>2]|0;
       __THREW__ = 0;
       invoke_vi(19,($813|0));
       $814 = __THREW__; __THREW__ = 0;
       if ((($814|0) != 0) & ((threwValue|0) != 0)) { $815 = _testSetjmp(HEAP32[$814>>2]|0, _setjmpTable)|0; if (($815|0) == 0) { _longjmp($814|0, threwValue|0); } tempRet0 = threwValue; } else { $815 = -1; };
       $816 = tempRet0;
       if ((($815|0) == 1)) {
        $try_pushed_$2$phi = $try_pushed_$2;$$reg2mem675$0 = $816;$try_pushed_4$1 = $try_pushed_4$2;$try_pushed_$2 = $try_pushed_$2$phi;
        label = 330;
        continue;
       } else if ((($815|0) == 2)) {
        $$reg2mem687$0 = $816;$try_pushed_$0 = $try_pushed_$2;$try_pushed_4$0 = $try_pushed_4$2;
        label = 167;
        continue;
       }
       HEAP32[((80 + 20|0))>>2] = 0;
      }
     }
    }
   }
   $try_pushed_$3 = $try_pushed_$2;$try_pushed_4$3 = $try_pushed_4$2;
   label = 391;
   continue;
  }
  else if ((label|0) == 391) {
   label = 0;
   $825 = HEAP32[((80 + 24|0))>>2]|0;
   $826 = ($825|0)>(1);
   if ($826) {
    $827 = HEAP32[_stderr>>2]|0;
    __THREW__ = 0;
    (invoke_iii(51,10,($827|0))|0);
    $828 = __THREW__; __THREW__ = 0;
    if ((($828|0) != 0) & ((threwValue|0) != 0)) { $829 = _testSetjmp(HEAP32[$828>>2]|0, _setjmpTable)|0; if (($829|0) == 0) { _longjmp($828|0, threwValue|0); } tempRet0 = threwValue; } else { $829 = -1; };
    $830 = tempRet0;
    if ((($829|0) == 1)) {
     $$reg2mem675$0 = $830;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
     label = 330;
     continue;
    } else if ((($829|0) == 2)) {
     $$reg2mem687$0 = $830;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
     label = 167;
     continue;
    }
    $831 = HEAP32[_stderr>>2]|0;
    __THREW__ = 0;
    (invoke_ii(45,($831|0))|0);
    $832 = __THREW__; __THREW__ = 0;
    if ((($832|0) != 0) & ((threwValue|0) != 0)) { $833 = _testSetjmp(HEAP32[$832>>2]|0, _setjmpTable)|0; if (($833|0) == 0) { _longjmp($832|0, threwValue|0); } tempRet0 = threwValue; } else { $833 = -1; };
    $834 = tempRet0;
    if ((($833|0) == 1)) {
     $$reg2mem675$0 = $834;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
     label = 330;
     continue;
    } else if ((($833|0) == 2)) {
     $$reg2mem687$0 = $834;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
     label = 167;
     continue;
    }
   }
   $835 = HEAP32[((80 + 4|0))>>2]|0;
   $836 = ($835|0)!=(0);
   if ($836) {
    $837 = HEAP32[((80 + 4|0))>>2]|0;
    __THREW__ = 0;
    (invoke_ii(35,($837|0))|0);
    $838 = __THREW__; __THREW__ = 0;
    if ((($838|0) != 0) & ((threwValue|0) != 0)) { $839 = _testSetjmp(HEAP32[$838>>2]|0, _setjmpTable)|0; if (($839|0) == 0) { _longjmp($838|0, threwValue|0); } tempRet0 = threwValue; } else { $839 = -1; };
    $840 = tempRet0;
    if ((($839|0) == 1)) {
     $$reg2mem675$0 = $840;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
     label = 330;
     continue;
    } else if ((($839|0) == 2)) {
     $$reg2mem687$0 = $840;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
     label = 167;
     continue;
    }
   }
   $841 = HEAP32[((80 + 8|0))>>2]|0;
   $842 = ($841|0)!=(-1);
   if ($842) {
    $843 = HEAP32[((80 + 8|0))>>2]|0;
    $844 = ($843|0)!=(1);
    if ($844) {
     $845 = HEAP32[((80 + 8|0))>>2]|0;
     __THREW__ = 0;
     $846 = (invoke_ii(35,($845|0))|0);
     $847 = __THREW__; __THREW__ = 0;
     if ((($847|0) != 0) & ((threwValue|0) != 0)) { $848 = _testSetjmp(HEAP32[$847>>2]|0, _setjmpTable)|0; if (($848|0) == 0) { _longjmp($847|0, threwValue|0); } tempRet0 = threwValue; } else { $848 = -1; };
     $849 = tempRet0;
     if ((($848|0) == 1)) {
      $$reg2mem675$0 = $849;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
      label = 330;
      continue;
     } else if ((($848|0) == 2)) {
      $$reg2mem687$0 = $849;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
      label = 167;
      continue;
     }
     $850 = ($846|0)!=(0);
     if ($850) {
      __THREW__ = 0;
      $851 = (invoke_i(25)|0);
      $852 = __THREW__; __THREW__ = 0;
      if ((($852|0) != 0) & ((threwValue|0) != 0)) { $853 = _testSetjmp(HEAP32[$852>>2]|0, _setjmpTable)|0; if (($853|0) == 0) { _longjmp($852|0, threwValue|0); } tempRet0 = threwValue; } else { $853 = -1; };
      $854 = tempRet0;
      if ((($853|0) == 1)) {
       $$reg2mem675$0 = $854;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
       label = 330;
       continue;
      } else if ((($853|0) == 2)) {
       $$reg2mem687$0 = $854;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
       label = 167;
       continue;
      }
      $855 = HEAP32[$851>>2]|0;
      $856 = HEAP32[((80 + 20|0))>>2]|0;
      __THREW__ = 0;
      $857 = (invoke_i(25)|0);
      $858 = __THREW__; __THREW__ = 0;
      if ((($858|0) != 0) & ((threwValue|0) != 0)) { $859 = _testSetjmp(HEAP32[$858>>2]|0, _setjmpTable)|0; if (($859|0) == 0) { _longjmp($858|0, threwValue|0); } tempRet0 = threwValue; } else { $859 = -1; };
      $860 = tempRet0;
      if ((($859|0) == 1)) {
       $$reg2mem675$0 = $860;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
       label = 330;
       continue;
      } else if ((($859|0) == 2)) {
       $$reg2mem687$0 = $860;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
       label = 167;
       continue;
      }
      $861 = HEAP32[$857>>2]|0;
      __THREW__ = 0;
      $862 = (invoke_ii(31,($861|0))|0);
      $863 = __THREW__; __THREW__ = 0;
      if ((($863|0) != 0) & ((threwValue|0) != 0)) { $864 = _testSetjmp(HEAP32[$863>>2]|0, _setjmpTable)|0; if (($864|0) == 0) { _longjmp($863|0, threwValue|0); } tempRet0 = threwValue; } else { $864 = -1; };
      $865 = tempRet0;
      if ((($864|0) == 1)) {
       $$reg2mem675$0 = $865;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
       label = 330;
       continue;
      } else if ((($864|0) == 2)) {
       $$reg2mem687$0 = $865;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
       label = 167;
       continue;
      }
      __THREW__ = 0;
      HEAP32[$vararg_buffer766>>2] = $856;
      $vararg_ptr769 = (($vararg_buffer766) + 4|0);
      HEAP32[$vararg_ptr769>>2] = $862;
      $vararg_ptr770 = (($vararg_buffer766) + 8|0);
      HEAP32[$vararg_ptr770>>2] = 0;
      invoke_viii(12,($855|0),(66480|0),($vararg_buffer766|0));
      $866 = __THREW__; __THREW__ = 0;
      if ((($866|0) != 0) & ((threwValue|0) != 0)) { $867 = _testSetjmp(HEAP32[$866>>2]|0, _setjmpTable)|0; if (($867|0) == 0) { _longjmp($866|0, threwValue|0); } tempRet0 = threwValue; } else { $867 = -1; };
      $868 = tempRet0;
      if ((($867|0) == 1)) {
       $$reg2mem675$0 = $868;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
       label = 330;
       continue;
      } else if ((($867|0) == 2)) {
       $$reg2mem687$0 = $868;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
       label = 167;
       continue;
      }
     }
     HEAP32[((80 + 8|0))>>2] = -1;
     $869 = HEAP32[((80 + 4|0))>>2]|0;
     $870 = ($869|0)!=(0);
     if ($870) {
      $871 = HEAP32[((80 + 12|0))>>2]|0;
      $872 = HEAP32[((80 + 20|0))>>2]|0;
      __THREW__ = 0;
      invoke_vii(52,($871|0),($872|0));
      $873 = __THREW__; __THREW__ = 0;
      if ((($873|0) != 0) & ((threwValue|0) != 0)) { $874 = _testSetjmp(HEAP32[$873>>2]|0, _setjmpTable)|0; if (($874|0) == 0) { _longjmp($873|0, threwValue|0); } tempRet0 = threwValue; } else { $874 = -1; };
      $875 = tempRet0;
      if ((($874|0) == 1)) {
       $$reg2mem675$0 = $875;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
       label = 330;
       continue;
      } else if ((($874|0) == 2)) {
       $$reg2mem687$0 = $875;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
       label = 167;
       continue;
      }
      $876 = HEAP32[((80 + 36|0))>>2]|0;
      $877 = ($876|0)!=(0);
      if (!($877)) {
       $878 = HEAP32[((80 + 12|0))>>2]|0;
       __THREW__ = 0;
       (invoke_ii(48,($878|0))|0);
       $879 = __THREW__; __THREW__ = 0;
       if ((($879|0) != 0) & ((threwValue|0) != 0)) { $880 = _testSetjmp(HEAP32[$879>>2]|0, _setjmpTable)|0; if (($880|0) == 0) { _longjmp($879|0, threwValue|0); } tempRet0 = threwValue; } else { $880 = -1; };
       $881 = tempRet0;
       if ((($880|0) == 1)) {
        $$reg2mem675$0 = $881;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
        label = 330;
        continue;
       } else if ((($880|0) == 2)) {
        $$reg2mem687$0 = $881;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
        label = 167;
        continue;
       }
      }
     }
     $882 = HEAP32[((80 + 76|0))>>2]|0;
     $883 = ($882|0)!=(0);
     if ($883) {
      $884 = HEAP32[((80 + 28|0))>>2]|0;
      $885 = $884 & 2;
      $886 = ($885|0)!=(0);
      if ($886) {
       $887 = HEAP32[((80 + 124|0))>>2]|0;
       $888 = ($887|0)!=(0);
       if ($888) {
        $889 = HEAP32[((80 + 20|0))>>2]|0;
        $890 = HEAP32[((80 + 124|0))>>2]|0;
        __THREW__ = 0;
        invoke_vii(53,($889|0),($890|0));
        $891 = __THREW__; __THREW__ = 0;
        if ((($891|0) != 0) & ((threwValue|0) != 0)) { $892 = _testSetjmp(HEAP32[$891>>2]|0, _setjmpTable)|0; if (($892|0) == 0) { _longjmp($891|0, threwValue|0); } tempRet0 = threwValue; } else { $892 = -1; };
        $893 = tempRet0;
        if ((($892|0) == 1)) {
         $$reg2mem675$0 = $893;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
         label = 330;
         continue;
        } else if ((($892|0) == 2)) {
         $$reg2mem687$0 = $893;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
         label = 167;
         continue;
        }
       }
      }
     }
    }
   }
   $894 = HEAP32[((80 + 20|0))>>2]|0;
   $895 = ($894|0)!=(0|0);
   if (!($895)) {
    label = 423;
    break;
   }
   $896 = HEAP32[((80 + 20|0))>>2]|0;
   __THREW__ = 0;
   invoke_vi(19,($896|0));
   $897 = __THREW__; __THREW__ = 0;
   if ((($897|0) != 0) & ((threwValue|0) != 0)) { $898 = _testSetjmp(HEAP32[$897>>2]|0, _setjmpTable)|0; if (($898|0) == 0) { _longjmp($897|0, threwValue|0); } tempRet0 = threwValue; } else { $898 = -1; };
   $899 = tempRet0;
   if ((($898|0) == 1)) {
    $$reg2mem675$0 = $899;$try_pushed_$2 = $try_pushed_$3;$try_pushed_4$1 = $try_pushed_4$3;
    label = 330;
    continue;
   } else if ((($898|0) == 2)) {
    $$reg2mem687$0 = $899;$try_pushed_$0 = $try_pushed_$3;$try_pushed_4$0 = $try_pushed_4$3;
    label = 167;
    continue;
   } else {
    label = 422;
    break;
   }
  }
 }
 if ((label|0) == 185) {
  // unreachable;
 }
 else if ((label|0) == 197) {
  // unreachable;
 }
 else if ((label|0) == 201) {
  // unreachable;
 }
 else if ((label|0) == 217) {
  label = 218;
 }
 else if ((label|0) == 349) {
  // unreachable;
 }
 else if ((label|0) == 361) {
  // unreachable;
 }
 else if ((label|0) == 365) {
  // unreachable;
 }
 else if ((label|0) == 422) {
  HEAP32[((80 + 20|0))>>2] = 0;
  label = 423;
 }
 if ((label|0) == 218) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 423) {
  STACKTOP = sp;return;
 }
}
function _new_opts() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _single_compress(1);
 _finish_jobs();
 STACKTOP = sp;return;
}
function _single_compress($reset) {
 $reset = $reset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bits = 0, $bits1 = 0, $check = 0, $clen = 0, $fresh = 0, $got = 0, $hash = 0, $have = 0, $head = 0, $hist = 0, $left = 0, $more = 0, $off = 0, $out = 0, $outsize = 0, $ret = 0, $scan = 0, $start = 0;
 var $ulen = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $bits = sp + 28|0;
 $bits1 = sp + 88|0;
 $out = sp + 32|0;
 $outsize = sp + 36|0;
 $0 = $reset;
 $1 = $0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = HEAP32[66336>>2]|0;
  $4 = ($3|0)!=(0|0);
  if ($4) {
   $5 = HEAP32[66336>>2]|0;
   (_deflateEnd(($5|0))|0);
   $6 = HEAP32[66336>>2]|0;
   _free($6);
   $7 = HEAP32[66328>>2]|0;
   _free($7);
   $8 = HEAP32[66320>>2]|0;
   _free($8);
   $9 = HEAP32[66312>>2]|0;
   _free($9);
   HEAP32[66336>>2] = 0;
  }
  STACKTOP = sp;return;
 }
 $10 = HEAP32[66336>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = HEAP32[((80 + 120|0))>>2]|0;
  $13 = ($12>>>0)>(2147483648);
  if ($13) {
   $15 = -2147483648;
  } else {
   $14 = HEAP32[((80 + 120|0))>>2]|0;
   $15 = $14;
  }
  HEAP32[66304>>2] = $15;
  $16 = HEAP32[((80 + 120|0))>>2]|0;
  $17 = (($16) + 32768)|0;
  $18 = (_alloc(0,$17)|0);
  HEAP32[66312>>2] = $18;
  $19 = HEAP32[((80 + 120|0))>>2]|0;
  $20 = (($19) + 32768)|0;
  $21 = (_alloc(0,$20)|0);
  HEAP32[66320>>2] = $21;
  $22 = HEAP32[66304>>2]|0;
  $23 = (_alloc(0,$22)|0);
  HEAP32[66328>>2] = $23;
  $24 = (_alloc(0,56)|0);
  HEAP32[66336>>2] = $24;
  $25 = HEAP32[66336>>2]|0;
  $26 = (($25) + 36|0);
  HEAP32[$26>>2] = 0;
  $27 = HEAP32[66336>>2]|0;
  $28 = (($27) + 32|0);
  HEAP32[$28>>2] = 0;
  $29 = HEAP32[66336>>2]|0;
  $30 = (($29) + 40|0);
  HEAP32[$30>>2] = 0;
  $31 = HEAP32[66336>>2]|0;
  $32 = (_deflateInit2_(($31|0),6,8,-15,8,0,(66344|0),56)|0);
  $ret = $32;
  $33 = $ret;
  $34 = ($33|0)==(-4);
  if ($34) {
   HEAP32[$vararg_buffer>>2] = 0;
   _try_throw_(12,(66352|0),($vararg_buffer|0));
  }
  $35 = $ret;
  $36 = ($35|0)!=(0);
  if ($36) {
   HEAP32[$vararg_buffer1>>2] = 0;
   _try_throw_(22,(66376|0),($vararg_buffer1|0));
  }
 }
 $37 = (_put_header()|0);
 $head = $37;
 $38 = HEAP32[((80 + 80|0))>>2]|0;
 $39 = ($38|0)<=(9);
 if ($39) {
  $40 = HEAP32[66336>>2]|0;
  (_deflateReset(($40|0))|0);
  $41 = HEAP32[66336>>2]|0;
  $42 = HEAP32[((80 + 80|0))>>2]|0;
  (_deflateParams(($41|0),($42|0),0)|0);
 }
 $got = 0;
 $43 = HEAP32[((80 + 4|0))>>2]|0;
 $44 = HEAP32[66320>>2]|0;
 $45 = HEAP32[((80 + 120|0))>>2]|0;
 $46 = (_readn($43,$44,$45)|0);
 $more = $46;
 $47 = $more;
 $ulen = $47;
 $start = 0;
 $hist = 0;
 $clen = 0;
 $have = 0;
 $48 = HEAP32[((80 + 44|0))>>2]|0;
 $49 = ($48|0)==(1);
 if ($49) {
  $50 = (_adler32(0,(0|0),0)|0);
  $52 = $50;
 } else {
  $51 = (_crc32(0,(0|0),0)|0);
  $52 = $51;
 }
 $check = $52;
 $hash = 2047;
 L28: while(1) {
  $53 = $got;
  $54 = ($53|0)==(0);
  if ($54) {
   $55 = HEAP32[66312>>2]|0;
   $scan = $55;
   $56 = HEAP32[66320>>2]|0;
   HEAP32[66312>>2] = $56;
   $57 = $scan;
   HEAP32[66320>>2] = $57;
   $58 = HEAP32[66312>>2]|0;
   $59 = $start;
   $60 = (($58) + ($59)|0);
   $61 = HEAP32[66336>>2]|0;
   HEAP32[$61>>2] = $60;
   $62 = $more;
   $got = $62;
   $63 = HEAP32[((80 + 80|0))>>2]|0;
   $64 = ($63|0)>(9);
   if ($64) {
    $65 = $start;
    $66 = $more;
    $67 = (($65) + ($66))|0;
    $68 = $hist;
    $69 = (($67) - ($68))|0;
    $left = $69;
    $70 = $left;
    $71 = ($70>>>0)>(32768);
    if ($71) {
     $left = 32768;
    }
    $72 = HEAP32[66320>>2]|0;
    $73 = HEAP32[66312>>2]|0;
    $74 = $start;
    $75 = $more;
    $76 = (($74) + ($75))|0;
    $77 = $left;
    $78 = (($76) - ($77))|0;
    $79 = (($73) + ($78)|0);
    $80 = $left;
    _memcpy(($72|0),($79|0),($80|0))|0;
    $81 = $left;
    $start = $81;
    $hist = 0;
   } else {
    $start = 0;
   }
   $82 = HEAP32[((80 + 4|0))>>2]|0;
   $83 = HEAP32[66320>>2]|0;
   $84 = $start;
   $85 = (($83) + ($84)|0);
   $86 = HEAP32[((80 + 120|0))>>2]|0;
   $87 = (_readn($82,$85,$86)|0);
   $more = $87;
   $88 = $more;
   $89 = $ulen;
   $90 = (($89) + ($88))|0;
   $ulen = $90;
  }
  $left = 0;
  $91 = HEAP32[((80 + 108|0))>>2]|0;
  $92 = ($91|0)!=(0);
  if ($92) {
   $93 = $got;
   $94 = ($93|0)!=(0);
   if ($94) {
    $95 = HEAP32[66336>>2]|0;
    $96 = HEAP32[$95>>2]|0;
    $scan = $96;
    $97 = $got;
    $left = $97;
    while(1) {
     $98 = $left;
     $99 = ($98|0)==(0);
     if ($99) {
      $100 = $more;
      $101 = ($100|0)==(0);
      if ($101) {
       label = 33;
       break;
      }
      $102 = $got;
      $103 = HEAP32[((80 + 120|0))>>2]|0;
      $104 = ($102|0)==($103|0);
      if ($104) {
       label = 33;
       break;
      }
      $105 = HEAP32[((80 + 80|0))>>2]|0;
      $106 = ($105|0)>(9);
      if ($106) {
       $107 = HEAP32[66336>>2]|0;
       $108 = HEAP32[$107>>2]|0;
       $109 = HEAP32[66312>>2]|0;
       $110 = $108;
       $111 = $109;
       $112 = (($110) - ($111))|0;
       $113 = $hist;
       $114 = (($112) - ($113))|0;
       $left = $114;
       $115 = $left;
       $116 = ($115>>>0)>(32768);
       if ($116) {
        $left = 32768;
       }
      }
      $117 = HEAP32[66312>>2]|0;
      $118 = HEAP32[66336>>2]|0;
      $119 = HEAP32[$118>>2]|0;
      $120 = $left;
      $121 = (0 - ($120))|0;
      $122 = (($119) + ($121)|0);
      $123 = $left;
      $124 = $got;
      $125 = (($123) + ($124))|0;
      _memmove(($117|0),($122|0),($125|0))|0;
      $hist = 0;
      $126 = HEAP32[66312>>2]|0;
      $127 = $left;
      $128 = (($126) + ($127)|0);
      $129 = HEAP32[66336>>2]|0;
      HEAP32[$129>>2] = $128;
      $130 = HEAP32[66312>>2]|0;
      $131 = $left;
      $132 = (($130) + ($131)|0);
      $133 = $got;
      $134 = (($132) + ($133)|0);
      $scan = $134;
      $135 = $more;
      $136 = HEAP32[((80 + 120|0))>>2]|0;
      $137 = $got;
      $138 = (($136) - ($137))|0;
      $139 = ($135>>>0)>($138>>>0);
      if ($139) {
       $140 = HEAP32[((80 + 120|0))>>2]|0;
       $141 = $got;
       $142 = (($140) - ($141))|0;
       $144 = $142;
      } else {
       $143 = $more;
       $144 = $143;
      }
      $left = $144;
      $145 = $scan;
      $146 = HEAP32[66320>>2]|0;
      $147 = $start;
      $148 = (($146) + ($147)|0);
      $149 = $left;
      _memcpy(($145|0),($148|0),($149|0))|0;
      $150 = $left;
      $151 = $got;
      $152 = (($151) + ($150))|0;
      $got = $152;
      $153 = $left;
      $154 = $more;
      $155 = (($154) - ($153))|0;
      $more = $155;
      $156 = $left;
      $157 = $start;
      $158 = (($157) + ($156))|0;
      $start = $158;
      $159 = $more;
      $160 = ($159|0)==(0);
      if ($160) {
       $161 = HEAP32[((80 + 4|0))>>2]|0;
       $162 = HEAP32[66320>>2]|0;
       $163 = HEAP32[((80 + 120|0))>>2]|0;
       $164 = (_readn($161,$162,$163)|0);
       $more = $164;
       $165 = $more;
       $166 = $ulen;
       $167 = (($166) + ($165))|0;
       $ulen = $167;
       $start = 0;
      }
     }
     $168 = $left;
     $169 = (($168) + -1)|0;
     $left = $169;
     $170 = $hash;
     $171 = $170 << 1;
     $172 = $scan;
     $173 = (($172) + 1|0);
     $scan = $173;
     $174 = HEAP8[$172>>0]|0;
     $175 = $174&255;
     $176 = $171 ^ $175;
     $177 = $176 & 4095;
     $hash = $177;
     $178 = $hash;
     $179 = ($178|0)!=(2047);
     if (!($179)) {
      break;
     }
    }
    if ((label|0) == 33) {
     label = 0;
    }
    $180 = $left;
    $181 = $got;
    $182 = (($181) - ($180))|0;
    $got = $182;
   }
  }
  $fresh = 0;
  $183 = HEAP32[((80 + 116|0))>>2]|0;
  $184 = ($183|0)!=(0);
  if (!($184)) {
   $185 = $got;
   $186 = $have;
   $187 = (($186) + ($185))|0;
   $have = $187;
   $188 = $have;
   $189 = HEAP32[((80 + 120|0))>>2]|0;
   $190 = ($188>>>0)>($189>>>0);
   if ($190) {
    $fresh = 1;
    $191 = $got;
    $have = $191;
   }
  }
  $192 = HEAP32[((80 + 80|0))>>2]|0;
  $193 = ($192|0)<=(9);
  if ($193) {
   $194 = $fresh;
   $195 = ($194|0)!=(0);
   if ($195) {
    $196 = HEAP32[66336>>2]|0;
    (_deflateReset(($196|0))|0);
   }
   while(1) {
    $197 = $got;
    $198 = ($197>>>0)>(2147483648);
    if (!($198)) {
     break;
    }
    $199 = HEAP32[66336>>2]|0;
    $200 = (($199) + 4|0);
    HEAP32[$200>>2] = -2147483648;
    $201 = HEAP32[((80 + 44|0))>>2]|0;
    $202 = ($201|0)==(1);
    if ($202) {
     $203 = $check;
     $204 = HEAP32[66336>>2]|0;
     $205 = HEAP32[$204>>2]|0;
     $206 = HEAP32[66336>>2]|0;
     $207 = (($206) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = (_adler32(($203|0),($205|0),($208|0))|0);
     $217 = $209;
    } else {
     $210 = $check;
     $211 = HEAP32[66336>>2]|0;
     $212 = HEAP32[$211>>2]|0;
     $213 = HEAP32[66336>>2]|0;
     $214 = (($213) + 4|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = (_crc32(($210|0),($212|0),($215|0))|0);
     $217 = $216;
    }
    $check = $217;
    while(1) {
     $218 = HEAP32[66304>>2]|0;
     $219 = HEAP32[66336>>2]|0;
     $220 = (($219) + 16|0);
     HEAP32[$220>>2] = $218;
     $221 = HEAP32[66328>>2]|0;
     $222 = HEAP32[66336>>2]|0;
     $223 = (($222) + 12|0);
     HEAP32[$223>>2] = $221;
     $224 = HEAP32[66336>>2]|0;
     (_deflate(($224|0),0)|0);
     $225 = HEAP32[((80 + 8|0))>>2]|0;
     $226 = HEAP32[66328>>2]|0;
     $227 = HEAP32[66304>>2]|0;
     $228 = HEAP32[66336>>2]|0;
     $229 = (($228) + 16|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (($227) - ($230))|0;
     _writen($225,$226,$231);
     $232 = HEAP32[66304>>2]|0;
     $233 = HEAP32[66336>>2]|0;
     $234 = (($233) + 16|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = (($232) - ($235))|0;
     $237 = $clen;
     $238 = (($237) + ($236))|0;
     $clen = $238;
     $239 = HEAP32[66336>>2]|0;
     $240 = (($239) + 16|0);
     $241 = HEAP32[$240>>2]|0;
     $242 = ($241|0)==(0);
     if (!($242)) {
      break;
     }
    }
    $243 = HEAP32[66336>>2]|0;
    $244 = (($243) + 4|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = ($245|0)==(0);
    if (!($246)) {
     label = 64;
     break L28;
    }
    $247 = $got;
    $248 = (($247) - -2147483648)|0;
    $got = $248;
   }
   $249 = $got;
   $250 = HEAP32[66336>>2]|0;
   $251 = (($250) + 4|0);
   HEAP32[$251>>2] = $249;
   $252 = $left;
   $got = $252;
   $253 = HEAP32[((80 + 44|0))>>2]|0;
   $254 = ($253|0)==(1);
   if ($254) {
    $255 = $check;
    $256 = HEAP32[66336>>2]|0;
    $257 = HEAP32[$256>>2]|0;
    $258 = HEAP32[66336>>2]|0;
    $259 = (($258) + 4|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = (_adler32(($255|0),($257|0),($260|0))|0);
    $269 = $261;
   } else {
    $262 = $check;
    $263 = HEAP32[66336>>2]|0;
    $264 = HEAP32[$263>>2]|0;
    $265 = HEAP32[66336>>2]|0;
    $266 = (($265) + 4|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_crc32(($262|0),($264|0),($267|0))|0);
    $269 = $268;
   }
   $check = $269;
   $270 = $more;
   $271 = ($270|0)!=(0);
   if ($271) {
    label = 72;
   } else {
    $272 = $got;
    $273 = ($272|0)!=(0);
    if ($273) {
     label = 72;
    } else {
     while(1) {
      $376 = HEAP32[66304>>2]|0;
      $377 = HEAP32[66336>>2]|0;
      $378 = (($377) + 16|0);
      HEAP32[$378>>2] = $376;
      $379 = HEAP32[66328>>2]|0;
      $380 = HEAP32[66336>>2]|0;
      $381 = (($380) + 12|0);
      HEAP32[$381>>2] = $379;
      $382 = HEAP32[66336>>2]|0;
      (_deflate(($382|0),4)|0);
      $383 = HEAP32[((80 + 8|0))>>2]|0;
      $384 = HEAP32[66328>>2]|0;
      $385 = HEAP32[66304>>2]|0;
      $386 = HEAP32[66336>>2]|0;
      $387 = (($386) + 16|0);
      $388 = HEAP32[$387>>2]|0;
      $389 = (($385) - ($388))|0;
      _writen($383,$384,$389);
      $390 = HEAP32[66304>>2]|0;
      $391 = HEAP32[66336>>2]|0;
      $392 = (($391) + 16|0);
      $393 = HEAP32[$392>>2]|0;
      $394 = (($390) - ($393))|0;
      $395 = $clen;
      $396 = (($395) + ($394))|0;
      $clen = $396;
      $397 = HEAP32[66336>>2]|0;
      $398 = (($397) + 16|0);
      $399 = HEAP32[$398>>2]|0;
      $400 = ($399|0)==(0);
      if (!($400)) {
       break;
      }
     }
     $401 = HEAP32[66336>>2]|0;
     $402 = (($401) + 4|0);
     $403 = HEAP32[$402>>2]|0;
     $404 = ($403|0)==(0);
     if (!($404)) {
      label = 109;
      break;
     }
    }
   }
   if ((label|0) == 72) {
    label = 0;
    while(1) {
     $274 = HEAP32[66304>>2]|0;
     $275 = HEAP32[66336>>2]|0;
     $276 = (($275) + 16|0);
     HEAP32[$276>>2] = $274;
     $277 = HEAP32[66328>>2]|0;
     $278 = HEAP32[66336>>2]|0;
     $279 = (($278) + 12|0);
     HEAP32[$279>>2] = $277;
     $280 = HEAP32[66336>>2]|0;
     (_deflate(($280|0),5)|0);
     $281 = HEAP32[((80 + 8|0))>>2]|0;
     $282 = HEAP32[66328>>2]|0;
     $283 = HEAP32[66304>>2]|0;
     $284 = HEAP32[66336>>2]|0;
     $285 = (($284) + 16|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = (($283) - ($286))|0;
     _writen($281,$282,$287);
     $288 = HEAP32[66304>>2]|0;
     $289 = HEAP32[66336>>2]|0;
     $290 = (($289) + 16|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = (($288) - ($291))|0;
     $293 = $clen;
     $294 = (($293) + ($292))|0;
     $clen = $294;
     $295 = HEAP32[66336>>2]|0;
     $296 = (($295) + 16|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = ($297|0)==(0);
     if (!($298)) {
      break;
     }
    }
    $299 = HEAP32[66336>>2]|0;
    $300 = (($299) + 4|0);
    $301 = HEAP32[$300>>2]|0;
    $302 = ($301|0)==(0);
    if (!($302)) {
     label = 77;
     break;
    }
    $303 = HEAP32[66336>>2]|0;
    (_deflatePending(($303|0),(0|0),($bits|0))|0);
    $304 = HEAP32[$bits>>2]|0;
    $305 = $304 & 1;
    $306 = ($305|0)!=(0);
    if ($306) {
     while(1) {
      $307 = HEAP32[66304>>2]|0;
      $308 = HEAP32[66336>>2]|0;
      $309 = (($308) + 16|0);
      HEAP32[$309>>2] = $307;
      $310 = HEAP32[66328>>2]|0;
      $311 = HEAP32[66336>>2]|0;
      $312 = (($311) + 12|0);
      HEAP32[$312>>2] = $310;
      $313 = HEAP32[66336>>2]|0;
      (_deflate(($313|0),2)|0);
      $314 = HEAP32[((80 + 8|0))>>2]|0;
      $315 = HEAP32[66328>>2]|0;
      $316 = HEAP32[66304>>2]|0;
      $317 = HEAP32[66336>>2]|0;
      $318 = (($317) + 16|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = (($316) - ($319))|0;
      _writen($314,$315,$320);
      $321 = HEAP32[66304>>2]|0;
      $322 = HEAP32[66336>>2]|0;
      $323 = (($322) + 16|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = (($321) - ($324))|0;
      $326 = $clen;
      $327 = (($326) + ($325))|0;
      $clen = $327;
      $328 = HEAP32[66336>>2]|0;
      $329 = (($328) + 16|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = ($330|0)==(0);
      if (!($331)) {
       break;
      }
     }
     $332 = HEAP32[66336>>2]|0;
     $333 = (($332) + 4|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = ($334|0)==(0);
     if (!($335)) {
      label = 85;
      break;
     }
    } else {
     $336 = HEAP32[$bits>>2]|0;
     $337 = $336 & 7;
     $338 = ($337|0)!=(0);
     if ($338) {
      while(1) {
       $339 = HEAP32[66336>>2]|0;
       $340 = (_deflatePrime(($339|0),10,2)|0);
       HEAP32[$bits>>2] = $340;
       $341 = HEAP32[$bits>>2]|0;
       $342 = ($341|0)==(0);
       if (!($342)) {
        label = 91;
        break L28;
       }
       $343 = HEAP32[66336>>2]|0;
       (_deflatePending(($343|0),(0|0),($bits|0))|0);
       $344 = HEAP32[$bits>>2]|0;
       $345 = $344 & 7;
       $346 = ($345|0)!=(0);
       if (!($346)) {
        break;
       }
      }
      while(1) {
       $347 = HEAP32[66304>>2]|0;
       $348 = HEAP32[66336>>2]|0;
       $349 = (($348) + 16|0);
       HEAP32[$349>>2] = $347;
       $350 = HEAP32[66328>>2]|0;
       $351 = HEAP32[66336>>2]|0;
       $352 = (($351) + 12|0);
       HEAP32[$352>>2] = $350;
       $353 = HEAP32[66336>>2]|0;
       (_deflate(($353|0),0)|0);
       $354 = HEAP32[((80 + 8|0))>>2]|0;
       $355 = HEAP32[66328>>2]|0;
       $356 = HEAP32[66304>>2]|0;
       $357 = HEAP32[66336>>2]|0;
       $358 = (($357) + 16|0);
       $359 = HEAP32[$358>>2]|0;
       $360 = (($356) - ($359))|0;
       _writen($354,$355,$360);
       $361 = HEAP32[66304>>2]|0;
       $362 = HEAP32[66336>>2]|0;
       $363 = (($362) + 16|0);
       $364 = HEAP32[$363>>2]|0;
       $365 = (($361) - ($364))|0;
       $366 = $clen;
       $367 = (($366) + ($365))|0;
       $clen = $367;
       $368 = HEAP32[66336>>2]|0;
       $369 = (($368) + 16|0);
       $370 = HEAP32[$369>>2]|0;
       $371 = ($370|0)==(0);
       if (!($371)) {
        break;
       }
      }
      $372 = HEAP32[66336>>2]|0;
      $373 = (($372) + 4|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = ($374|0)==(0);
      if (!($375)) {
       label = 99;
       break;
      }
     }
    }
   }
  } else {
   $405 = HEAP32[66336>>2]|0;
   $406 = HEAP32[$405>>2]|0;
   $407 = HEAP32[66312>>2]|0;
   $408 = $406;
   $409 = $407;
   $410 = (($408) - ($409))|0;
   $off = $410;
   $411 = $fresh;
   $412 = ($411|0)!=(0);
   if ($412) {
    $413 = $off;
    $hist = $413;
   }
   HEAP32[$out>>2] = 0;
   HEAP32[$outsize>>2] = 0;
   HEAP8[$bits1>>0] = 0;
   $414 = $more;
   $415 = ($414|0)!=(0);
   if ($415) {
    $419 = 1;
   } else {
    $416 = $left;
    $417 = ($416|0)!=(0);
    $419 = $417;
   }
   $418 = $419 ^ 1;
   $420 = $418&1;
   $421 = HEAP32[66312>>2]|0;
   $422 = $hist;
   $423 = (($421) + ($422)|0);
   $424 = $off;
   $425 = $hist;
   $426 = (($424) - ($425))|0;
   $427 = $off;
   $428 = $hist;
   $429 = (($427) - ($428))|0;
   $430 = $got;
   $431 = (($429) + ($430))|0;
   _ZopfliDeflatePart((((80 + 84|0))|0),2,($420|0),($423|0),($426|0),($431|0),($bits1|0),($out|0),($outsize|0));
   $432 = HEAP8[$bits1>>0]|0;
   $433 = $432&255;
   $434 = $433 & 7;
   $435 = $434&255;
   HEAP8[$bits1>>0] = $435;
   $436 = $more;
   $437 = ($436|0)!=(0);
   if ($437) {
    label = 119;
   } else {
    $438 = $left;
    $439 = ($438|0)!=(0);
    if ($439) {
     label = 119;
    } else {
     label = 131;
    }
   }
   if ((label|0) == 119) {
    label = 0;
    $440 = HEAP8[$bits1>>0]|0;
    $441 = $440&255;
    $442 = ($441|0)!=(0);
    if ($442) {
     $443 = HEAP8[$bits1>>0]|0;
     $444 = $443&255;
     $445 = $444 & 1;
     $446 = ($445|0)!=(0);
     if ($446) {
      $447 = HEAP32[((80 + 8|0))>>2]|0;
      $448 = HEAP32[$out>>2]|0;
      $449 = HEAP32[$outsize>>2]|0;
      _writen($447,$448,$449);
      $450 = HEAP8[$bits1>>0]|0;
      $451 = $450&255;
      $452 = ($451|0)==(7);
      if ($452) {
       $453 = HEAP32[((80 + 8|0))>>2]|0;
       _writen($453,66448,1);
      }
      $454 = HEAP32[((80 + 8|0))>>2]|0;
      _writen($454,66456,4);
     } else {
      $455 = HEAP32[$outsize>>2]|0;
      $456 = ($455>>>0)>(0);
      if (!($456)) {
       label = 125;
       break;
      }
      $457 = HEAP32[((80 + 8|0))>>2]|0;
      $458 = HEAP32[$out>>2]|0;
      $459 = HEAP32[$outsize>>2]|0;
      $460 = (($459) - 1)|0;
      _writen($457,$458,$460);
      while(1) {
       $461 = HEAP8[$bits1>>0]|0;
       $462 = $461&255;
       $463 = 2 << $462;
       $464 = HEAP32[$outsize>>2]|0;
       $465 = (($464) - 1)|0;
       $466 = HEAP32[$out>>2]|0;
       $467 = (($466) + ($465)|0);
       $468 = HEAP8[$467>>0]|0;
       $469 = $468&255;
       $470 = (($469) + ($463))|0;
       $471 = $470&255;
       HEAP8[$467>>0] = $471;
       $472 = HEAP32[((80 + 8|0))>>2]|0;
       $473 = HEAP32[$out>>2]|0;
       $474 = HEAP32[$outsize>>2]|0;
       $475 = (($473) + ($474)|0);
       $476 = (($475) + -1|0);
       _writen($472,$476,1);
       $477 = HEAP32[$outsize>>2]|0;
       $478 = (($477) - 1)|0;
       $479 = HEAP32[$out>>2]|0;
       $480 = (($479) + ($478)|0);
       HEAP8[$480>>0] = 0;
       $481 = HEAP8[$bits1>>0]|0;
       $482 = $481&255;
       $483 = (($482) + 2)|0;
       $484 = $483&255;
       HEAP8[$bits1>>0] = $484;
       $485 = HEAP8[$bits1>>0]|0;
       $486 = $485&255;
       $487 = ($486|0)<(8);
       if (!($487)) {
        break;
       }
      }
      $488 = HEAP32[((80 + 8|0))>>2]|0;
      $489 = HEAP32[$out>>2]|0;
      $490 = HEAP32[$outsize>>2]|0;
      $491 = (($489) + ($490)|0);
      $492 = (($491) + -1|0);
      _writen($488,$492,1);
     }
    } else {
     label = 131;
    }
   }
   if ((label|0) == 131) {
    label = 0;
    $493 = HEAP32[((80 + 8|0))>>2]|0;
    $494 = HEAP32[$out>>2]|0;
    $495 = HEAP32[$outsize>>2]|0;
    _writen($493,$494,$495);
   }
   $496 = HEAP32[$out>>2]|0;
   _free($496);
   while(1) {
    $497 = $got;
    $498 = ($497>>>0)>(2147483648);
    if (!($498)) {
     break;
    }
    $499 = HEAP32[((80 + 44|0))>>2]|0;
    $500 = ($499|0)==(1);
    if ($500) {
     $501 = $check;
     $502 = HEAP32[66336>>2]|0;
     $503 = HEAP32[$502>>2]|0;
     $504 = (_adler32(($501|0),($503|0),-2147483648)|0);
     $509 = $504;
    } else {
     $505 = $check;
     $506 = HEAP32[66336>>2]|0;
     $507 = HEAP32[$506>>2]|0;
     $508 = (_crc32(($505|0),($507|0),-2147483648)|0);
     $509 = $508;
    }
    $check = $509;
    $510 = HEAP32[66336>>2]|0;
    $511 = HEAP32[$510>>2]|0;
    $512 = (($511) + -2147483648|0);
    HEAP32[$510>>2] = $512;
    $513 = $got;
    $514 = (($513) - -2147483648)|0;
    $got = $514;
   }
   $515 = HEAP32[((80 + 44|0))>>2]|0;
   $516 = ($515|0)==(1);
   if ($516) {
    $517 = $check;
    $518 = HEAP32[66336>>2]|0;
    $519 = HEAP32[$518>>2]|0;
    $520 = $got;
    $521 = (_adler32(($517|0),($519|0),($520|0))|0);
    $527 = $521;
   } else {
    $522 = $check;
    $523 = HEAP32[66336>>2]|0;
    $524 = HEAP32[$523>>2]|0;
    $525 = $got;
    $526 = (_crc32(($522|0),($524|0),($525|0))|0);
    $527 = $526;
   }
   $check = $527;
   $528 = $got;
   $529 = HEAP32[66336>>2]|0;
   $530 = HEAP32[$529>>2]|0;
   $531 = (($530) + ($528)|0);
   HEAP32[$529>>2] = $531;
   $532 = $left;
   $got = $532;
  }
  $533 = $more;
  $534 = ($533|0)!=(0);
  if ($534) {
   $541 = 1;
  } else {
   $535 = $got;
   $536 = ($535|0)!=(0);
   $541 = $536;
  }
  if (!($541)) {
   label = 146;
   break;
  }
 }
 if ((label|0) == 64) {
  ___assert_fail((66392|0),(64|0),2173,(66416|0));
  // unreachable;
 }
 else if ((label|0) == 77) {
  ___assert_fail((66392|0),(64|0),2185,(66416|0));
  // unreachable;
 }
 else if ((label|0) == 85) {
  ___assert_fail((66392|0),(64|0),2188,(66416|0));
  // unreachable;
 }
 else if ((label|0) == 91) {
  ___assert_fail((66432|0),(64|0),2192,(66416|0));
  // unreachable;
 }
 else if ((label|0) == 99) {
  ___assert_fail((66392|0),(64|0),2195,(66416|0));
  // unreachable;
 }
 else if ((label|0) == 109) {
  ___assert_fail((66392|0),(64|0),2202,(66416|0));
  // unreachable;
 }
 else if ((label|0) == 125) {
  ___assert_fail((66464|0),(64|0),2229,(66416|0));
  // unreachable;
 }
 else if ((label|0) == 146) {
  $537 = $ulen;
  $538 = $clen;
  $539 = $check;
  $540 = $head;
  _put_trailer($537,$538,$539,$540);
  STACKTOP = sp;return;
 }
}
function _finish_jobs() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $caught = 0, $job = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $job = sp + 8|0;
 $0 = HEAP32[66088>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[66088>>2]|0;
 _possess(($2|0));
 HEAP32[$job>>2] = -1;
 $3 = (($job) + 28|0);
 HEAP32[$3>>2] = 0;
 HEAP32[66096>>2] = $job;
 $4 = (($job) + 28|0);
 HEAP32[66104>>2] = $4;
 $5 = HEAP32[66088>>2]|0;
 _twist(($5|0),1,1);
 $6 = (_join_all()|0);
 $caught = $6;
 $7 = $caught;
 $8 = HEAP32[66112>>2]|0;
 $9 = ($7|0)==($8|0);
 if (!($9)) {
  ___assert_fail((66120|0),(64|0),1438,(66144|0));
  // unreachable;
 }
 HEAP32[66112>>2] = 0;
 $10 = (_free_pool(66160)|0);
 $caught = $10;
 $11 = (_free_pool(66184)|0);
 $caught = $11;
 $12 = (_free_pool(66208)|0);
 $caught = $12;
 $13 = (_free_pool(66232)|0);
 $caught = $13;
 $14 = HEAP32[66256>>2]|0;
 _free_lock(($14|0));
 $15 = HEAP32[66088>>2]|0;
 _free_lock(($15|0));
 HEAP32[66088>>2] = 0;
 STACKTOP = sp;return;
}
function _free_pool($pool) {
 $pool = $pool|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $space = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pool;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _possess(($2|0));
 $count = 0;
 while(1) {
  $3 = $0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $space = $5;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = $space;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = (($10) + 4|0);
  HEAP32[$11>>2] = $9;
  $12 = $space;
  $13 = (($12) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  _free($14);
  $15 = $space;
  $16 = HEAP32[$15>>2]|0;
  _free_lock(($16|0));
  $17 = $space;
  _free($17);
  $18 = $count;
  $19 = (($18) + 1)|0;
  $count = $19;
 }
 $20 = $count;
 $21 = $0;
 $22 = (($21) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)==($23|0);
 if ($24) {
  $25 = $0;
  $26 = HEAP32[$25>>2]|0;
  _release(($26|0));
  $27 = $0;
  $28 = HEAP32[$27>>2]|0;
  _free_lock(($28|0));
  $29 = $count;
  STACKTOP = sp;return ($29|0);
 } else {
  ___assert_fail((66264|0),(64|0),1351,(66288|0));
  // unreachable;
 }
 return (0)|0;
}
function _alloc($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $ptr;
 $1 = $size;
 $2 = $0;
 $3 = $1;
 $4 = (_realloc($2,$3)|0);
 $0 = $4;
 $5 = $0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 HEAP32[$vararg_buffer>>2] = 0;
 _try_throw_(12,(66352|0),($vararg_buffer|0));
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _put_header() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $head = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $head = sp + 4|0;
 $0 = HEAP32[((80 + 44|0))>>2]|0;
 $1 = ($0|0)>(1);
 if ($1) {
  HEAP8[$head>>0] = 80;
  $2 = (($head) + 1|0);
  HEAP8[$2>>0] = 75;
  $3 = (($head) + 2|0);
  HEAP8[$3>>0] = 3;
  $4 = (($head) + 2|0);
  $5 = (($4) + 1|0);
  HEAP8[$5>>0] = 4;
  $6 = (($head) + 4|0);
  HEAP8[$6>>0] = 20;
  $7 = (($head) + 4|0);
  $8 = (($7) + 1|0);
  HEAP8[$8>>0] = 0;
  $9 = (($head) + 6|0);
  HEAP8[$9>>0] = 8;
  $10 = (($head) + 6|0);
  $11 = (($10) + 1|0);
  HEAP8[$11>>0] = 0;
  $12 = (($head) + 8|0);
  HEAP8[$12>>0] = 8;
  $13 = (($head) + 8|0);
  $14 = (($13) + 1|0);
  HEAP8[$14>>0] = 0;
  $15 = HEAP32[((80 + 64|0))>>2]|0;
  $16 = (_time2dos($15)|0);
  $17 = $16 & 65535;
  $18 = $17 & 255;
  $19 = $18&255;
  $20 = (($head) + 10|0);
  HEAP8[$20>>0] = $19;
  $21 = HEAP32[((80 + 64|0))>>2]|0;
  $22 = (_time2dos($21)|0);
  $23 = $22 & 65535;
  $24 = $23 >>> 8;
  $25 = $24&255;
  $26 = (($head) + 10|0);
  $27 = (($26) + 1|0);
  HEAP8[$27>>0] = $25;
  $28 = HEAP32[((80 + 64|0))>>2]|0;
  $29 = (_time2dos($28)|0);
  $30 = $29 >>> 16;
  $31 = $30 & 255;
  $32 = $31&255;
  $33 = (($head) + 10|0);
  $34 = (($33) + 2|0);
  HEAP8[$34>>0] = $32;
  $35 = HEAP32[((80 + 64|0))>>2]|0;
  $36 = (_time2dos($35)|0);
  $37 = $36 >>> 16;
  $38 = $37 >>> 8;
  $39 = $38&255;
  $40 = (($head) + 10|0);
  $41 = (($40) + 2|0);
  $42 = (($41) + 1|0);
  HEAP8[$42>>0] = $39;
  $43 = (($head) + 14|0);
  HEAP8[$43>>0] = 0;
  $44 = (($head) + 14|0);
  $45 = (($44) + 1|0);
  HEAP8[$45>>0] = 0;
  $46 = (($head) + 14|0);
  $47 = (($46) + 2|0);
  HEAP8[$47>>0] = 0;
  $48 = (($head) + 14|0);
  $49 = (($48) + 2|0);
  $50 = (($49) + 1|0);
  HEAP8[$50>>0] = 0;
  $51 = (($head) + 18|0);
  HEAP8[$51>>0] = 0;
  $52 = (($head) + 18|0);
  $53 = (($52) + 1|0);
  HEAP8[$53>>0] = 0;
  $54 = (($head) + 18|0);
  $55 = (($54) + 2|0);
  HEAP8[$55>>0] = 0;
  $56 = (($head) + 18|0);
  $57 = (($56) + 2|0);
  $58 = (($57) + 1|0);
  HEAP8[$58>>0] = 0;
  $59 = (($head) + 22|0);
  HEAP8[$59>>0] = 0;
  $60 = (($head) + 22|0);
  $61 = (($60) + 1|0);
  HEAP8[$61>>0] = 0;
  $62 = (($head) + 22|0);
  $63 = (($62) + 2|0);
  HEAP8[$63>>0] = 0;
  $64 = (($head) + 22|0);
  $65 = (($64) + 2|0);
  $66 = (($65) + 1|0);
  HEAP8[$66>>0] = 0;
  $67 = HEAP32[((80 + 60|0))>>2]|0;
  $68 = ($67|0)==(0|0);
  if ($68) {
   $72 = 1;
  } else {
   $69 = HEAP32[((80 + 60|0))>>2]|0;
   $70 = (_strlen(($69|0))|0);
   $72 = $70;
  }
  $71 = $72 & 255;
  $73 = $71&255;
  $74 = (($head) + 26|0);
  HEAP8[$74>>0] = $73;
  $75 = HEAP32[((80 + 60|0))>>2]|0;
  $76 = ($75|0)==(0|0);
  if ($76) {
   $80 = 1;
  } else {
   $77 = HEAP32[((80 + 60|0))>>2]|0;
   $78 = (_strlen(($77|0))|0);
   $80 = $78;
  }
  $79 = $80 >>> 8;
  $81 = $79&255;
  $82 = (($head) + 26|0);
  $83 = (($82) + 1|0);
  HEAP8[$83>>0] = $81;
  $84 = (($head) + 28|0);
  HEAP8[$84>>0] = 9;
  $85 = (($head) + 28|0);
  $86 = (($85) + 1|0);
  HEAP8[$86>>0] = 0;
  $87 = HEAP32[((80 + 8|0))>>2]|0;
  _writen($87,$head,30);
  $len = 30;
  $88 = HEAP32[((80 + 60|0))>>2]|0;
  $89 = ($88|0)==(0|0);
  if ($89) {
   $90 = HEAP32[((80 + 8|0))>>2]|0;
   _writen($90,66064,1);
  } else {
   $91 = HEAP32[((80 + 8|0))>>2]|0;
   $92 = HEAP32[((80 + 60|0))>>2]|0;
   $93 = HEAP32[((80 + 60|0))>>2]|0;
   $94 = (_strlen(($93|0))|0);
   _writen($91,$92,$94);
  }
  $95 = HEAP32[((80 + 60|0))>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $101 = 1;
  } else {
   $97 = HEAP32[((80 + 60|0))>>2]|0;
   $98 = (_strlen(($97|0))|0);
   $101 = $98;
  }
  $99 = $len;
  $100 = (($99) + ($101))|0;
  $len = $100;
  HEAP8[$head>>0] = 85;
  $102 = (($head) + 1|0);
  HEAP8[$102>>0] = 84;
  $103 = (($head) + 2|0);
  HEAP8[$103>>0] = 5;
  $104 = (($head) + 2|0);
  $105 = (($104) + 1|0);
  HEAP8[$105>>0] = 0;
  $106 = (($head) + 4|0);
  HEAP8[$106>>0] = 1;
  $107 = HEAP32[((80 + 64|0))>>2]|0;
  $108 = $107 & 65535;
  $109 = $108 & 255;
  $110 = $109&255;
  $111 = (($head) + 5|0);
  HEAP8[$111>>0] = $110;
  $112 = HEAP32[((80 + 64|0))>>2]|0;
  $113 = $112 & 65535;
  $114 = $113 >> 8;
  $115 = $114&255;
  $116 = (($head) + 5|0);
  $117 = (($116) + 1|0);
  HEAP8[$117>>0] = $115;
  $118 = HEAP32[((80 + 64|0))>>2]|0;
  $119 = $118 >> 16;
  $120 = $119 & 255;
  $121 = $120&255;
  $122 = (($head) + 5|0);
  $123 = (($122) + 2|0);
  HEAP8[$123>>0] = $121;
  $124 = HEAP32[((80 + 64|0))>>2]|0;
  $125 = $124 >> 16;
  $126 = $125 >> 8;
  $127 = $126&255;
  $128 = (($head) + 5|0);
  $129 = (($128) + 2|0);
  $130 = (($129) + 1|0);
  HEAP8[$130>>0] = $127;
  $131 = HEAP32[((80 + 8|0))>>2]|0;
  _writen($131,$head,9);
  $132 = $len;
  $133 = (($132) + 9)|0;
  $len = $133;
  $220 = $len;
  STACKTOP = sp;return ($220|0);
 }
 $134 = HEAP32[((80 + 44|0))>>2]|0;
 $135 = ($134|0)!=(0);
 if ($135) {
  HEAP8[$head>>0] = 120;
  $136 = HEAP32[((80 + 80|0))>>2]|0;
  $137 = ($136|0)>=(9);
  if ($137) {
   $147 = 3;
  } else {
   $138 = HEAP32[((80 + 80|0))>>2]|0;
   $139 = ($138|0)==(1);
   if ($139) {
    $221 = 0;
   } else {
    $140 = HEAP32[((80 + 80|0))>>2]|0;
    $141 = ($140|0)>=(6);
    if ($141) {
     $144 = 1;
    } else {
     $142 = HEAP32[((80 + 80|0))>>2]|0;
     $143 = ($142|0)==(-1);
     $144 = $143;
    }
    $145 = $144 ? 1 : 2;
    $221 = $145;
   }
   $147 = $221;
  }
  $146 = $147 << 6;
  $148 = $146&255;
  $149 = (($head) + 1|0);
  HEAP8[$149>>0] = $148;
  $150 = HEAP8[$head>>0]|0;
  $151 = $150&255;
  $152 = $151 << 8;
  $153 = (($head) + 1|0);
  $154 = HEAP8[$153>>0]|0;
  $155 = $154&255;
  $156 = (($152) + ($155))|0;
  $157 = (($156|0) % 31)&-1;
  $158 = (31 - ($157))|0;
  $159 = (($head) + 1|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = (($161) + ($158))|0;
  $163 = $162&255;
  HEAP8[$159>>0] = $163;
  $164 = HEAP32[((80 + 8|0))>>2]|0;
  _writen($164,$head,2);
  $len = 2;
 } else {
  HEAP8[$head>>0] = 31;
  $165 = (($head) + 1|0);
  HEAP8[$165>>0] = -117;
  $166 = (($head) + 2|0);
  HEAP8[$166>>0] = 8;
  $167 = HEAP32[((80 + 60|0))>>2]|0;
  $168 = ($167|0)!=(0|0);
  $169 = $168 ? 8 : 0;
  $170 = $169&255;
  $171 = (($head) + 3|0);
  HEAP8[$171>>0] = $170;
  $172 = HEAP32[((80 + 64|0))>>2]|0;
  $173 = $172 & 65535;
  $174 = $173 & 255;
  $175 = $174&255;
  $176 = (($head) + 4|0);
  HEAP8[$176>>0] = $175;
  $177 = HEAP32[((80 + 64|0))>>2]|0;
  $178 = $177 & 65535;
  $179 = $178 >> 8;
  $180 = $179&255;
  $181 = (($head) + 4|0);
  $182 = (($181) + 1|0);
  HEAP8[$182>>0] = $180;
  $183 = HEAP32[((80 + 64|0))>>2]|0;
  $184 = $183 >> 16;
  $185 = $184 & 255;
  $186 = $185&255;
  $187 = (($head) + 4|0);
  $188 = (($187) + 2|0);
  HEAP8[$188>>0] = $186;
  $189 = HEAP32[((80 + 64|0))>>2]|0;
  $190 = $189 >> 16;
  $191 = $190 >> 8;
  $192 = $191&255;
  $193 = (($head) + 4|0);
  $194 = (($193) + 2|0);
  $195 = (($194) + 1|0);
  HEAP8[$195>>0] = $192;
  $196 = HEAP32[((80 + 80|0))>>2]|0;
  $197 = ($196|0)>=(9);
  if ($197) {
   $202 = 2;
  } else {
   $198 = HEAP32[((80 + 80|0))>>2]|0;
   $199 = ($198|0)==(1);
   $200 = $199 ? 4 : 0;
   $202 = $200;
  }
  $201 = $202&255;
  $203 = (($head) + 8|0);
  HEAP8[$203>>0] = $201;
  $204 = (($head) + 9|0);
  HEAP8[$204>>0] = 3;
  $205 = HEAP32[((80 + 8|0))>>2]|0;
  _writen($205,$head,10);
  $len = 10;
  $206 = HEAP32[((80 + 60|0))>>2]|0;
  $207 = ($206|0)!=(0|0);
  if ($207) {
   $208 = HEAP32[((80 + 8|0))>>2]|0;
   $209 = HEAP32[((80 + 60|0))>>2]|0;
   $210 = HEAP32[((80 + 60|0))>>2]|0;
   $211 = (_strlen(($210|0))|0);
   $212 = (($211) + 1)|0;
   _writen($208,$209,$212);
  }
  $213 = HEAP32[((80 + 60|0))>>2]|0;
  $214 = ($213|0)!=(0|0);
  if ($214) {
   $215 = HEAP32[((80 + 60|0))>>2]|0;
   $216 = (_strlen(($215|0))|0);
   $217 = (($216) + 1)|0;
   $218 = $len;
   $219 = (($218) + ($217))|0;
   $len = $219;
  }
 }
 $220 = $len;
 STACKTOP = sp;return ($220|0);
}
function _readn($desc,$buf,$len) {
 $desc = $desc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $got = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $desc;
 $1 = $buf;
 $2 = $len;
 $got = 0;
 while(1) {
  $3 = $2;
  $4 = ($3|0)!=(0);
  if (!($4)) {
   label = 8;
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  $8 = (_read(($5|0),($6|0),($7|0))|0);
  $ret = $8;
  $9 = $ret;
  $10 = ($9|0)<(0);
  if ($10) {
   $11 = (___errno_location()|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[((80 + 12|0))>>2]|0;
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_strerror(($15|0))|0);
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $16;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 0;
   _try_throw_(($12|0),(66504|0),($vararg_buffer|0));
  }
  $17 = $ret;
  $18 = ($17|0)==(0);
  if ($18) {
   break;
  }
  $19 = $ret;
  $20 = $1;
  $21 = (($20) + ($19)|0);
  $1 = $21;
  $22 = $ret;
  $23 = $2;
  $24 = (($23) - ($22))|0;
  $2 = $24;
  $25 = $ret;
  $26 = $got;
  $27 = (($26) + ($25))|0;
  $got = $27;
 }
 if ((label|0) == 8) {
  $28 = $got;
  STACKTOP = sp;return ($28|0);
 }
 $28 = $got;
 STACKTOP = sp;return ($28|0);
}
function _writen($desc,$buf,$len) {
 $desc = $desc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $desc;
 $1 = $buf;
 $2 = $len;
 while(1) {
  $3 = $2;
  $4 = ($3|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $1;
  $7 = $2;
  $8 = (_write(($5|0),($6|0),($7|0))|0);
  $ret = $8;
  $9 = $ret;
  $10 = ($9|0)<(1);
  if ($10) {
   $11 = (___errno_location()|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[((80 + 20|0))>>2]|0;
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_strerror(($15|0))|0);
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $16;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 0;
   _try_throw_(($12|0),(66480|0),($vararg_buffer|0));
  }
  $17 = $ret;
  $18 = $1;
  $19 = (($18) + ($17)|0);
  $1 = $19;
  $20 = $ret;
  $21 = $2;
  $22 = (($21) - ($20))|0;
  $2 = $22;
 }
 STACKTOP = sp;return;
}
function _put_trailer($ulen,$clen,$check,$head) {
 $ulen = $ulen|0;
 $clen = $clen|0;
 $check = $check|0;
 $head = $head|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cent = 0, $tail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tail = sp + 20|0;
 $0 = $ulen;
 $1 = $clen;
 $2 = $check;
 $3 = $head;
 $4 = HEAP32[((80 + 44|0))>>2]|0;
 $5 = ($4|0)>(1);
 if (!($5)) {
  $370 = HEAP32[((80 + 44|0))>>2]|0;
  $371 = ($370|0)!=(0);
  if ($371) {
   $372 = $2;
   $373 = $372 >>> 24;
   $374 = $373&255;
   HEAP8[$tail>>0] = $374;
   $375 = $2;
   $376 = $375 >>> 16;
   $377 = $376&255;
   $378 = (($tail) + 1|0);
   HEAP8[$378>>0] = $377;
   $379 = $2;
   $380 = $379 >>> 8;
   $381 = $380&255;
   $382 = (($tail) + 2|0);
   HEAP8[$382>>0] = $381;
   $383 = $2;
   $384 = $383&255;
   $385 = (($tail) + 3|0);
   HEAP8[$385>>0] = $384;
   $386 = HEAP32[((80 + 8|0))>>2]|0;
   _writen($386,$tail,4);
  } else {
   $387 = $2;
   $388 = $387 & 65535;
   $389 = $388 & 255;
   $390 = $389&255;
   HEAP8[$tail>>0] = $390;
   $391 = $2;
   $392 = $391 & 65535;
   $393 = $392 >>> 8;
   $394 = $393&255;
   $395 = (($tail) + 1|0);
   HEAP8[$395>>0] = $394;
   $396 = $2;
   $397 = $396 >>> 16;
   $398 = $397 & 255;
   $399 = $398&255;
   $400 = (($tail) + 2|0);
   HEAP8[$400>>0] = $399;
   $401 = $2;
   $402 = $401 >>> 16;
   $403 = $402 >>> 8;
   $404 = $403&255;
   $405 = (($tail) + 2|0);
   $406 = (($405) + 1|0);
   HEAP8[$406>>0] = $404;
   $407 = $0;
   $408 = $407 & 65535;
   $409 = $408 & 255;
   $410 = $409&255;
   $411 = (($tail) + 4|0);
   HEAP8[$411>>0] = $410;
   $412 = $0;
   $413 = $412 & 65535;
   $414 = $413 >>> 8;
   $415 = $414&255;
   $416 = (($tail) + 4|0);
   $417 = (($416) + 1|0);
   HEAP8[$417>>0] = $415;
   $418 = $0;
   $419 = $418 >>> 16;
   $420 = $419 & 255;
   $421 = $420&255;
   $422 = (($tail) + 4|0);
   $423 = (($422) + 2|0);
   HEAP8[$423>>0] = $421;
   $424 = $0;
   $425 = $424 >>> 16;
   $426 = $425 >>> 8;
   $427 = $426&255;
   $428 = (($tail) + 4|0);
   $429 = (($428) + 2|0);
   $430 = (($429) + 1|0);
   HEAP8[$430>>0] = $427;
   $431 = HEAP32[((80 + 8|0))>>2]|0;
   _writen($431,$tail,8);
  }
  STACKTOP = sp;return;
 }
 HEAP8[$tail>>0] = 80;
 $6 = (($tail) + 1|0);
 HEAP8[$6>>0] = 75;
 $7 = (($tail) + 2|0);
 HEAP8[$7>>0] = 7;
 $8 = (($tail) + 2|0);
 $9 = (($8) + 1|0);
 HEAP8[$9>>0] = 8;
 $10 = $2;
 $11 = $10 & 65535;
 $12 = $11 & 255;
 $13 = $12&255;
 $14 = (($tail) + 4|0);
 HEAP8[$14>>0] = $13;
 $15 = $2;
 $16 = $15 & 65535;
 $17 = $16 >>> 8;
 $18 = $17&255;
 $19 = (($tail) + 4|0);
 $20 = (($19) + 1|0);
 HEAP8[$20>>0] = $18;
 $21 = $2;
 $22 = $21 >>> 16;
 $23 = $22 & 255;
 $24 = $23&255;
 $25 = (($tail) + 4|0);
 $26 = (($25) + 2|0);
 HEAP8[$26>>0] = $24;
 $27 = $2;
 $28 = $27 >>> 16;
 $29 = $28 >>> 8;
 $30 = $29&255;
 $31 = (($tail) + 4|0);
 $32 = (($31) + 2|0);
 $33 = (($32) + 1|0);
 HEAP8[$33>>0] = $30;
 $34 = $1;
 $35 = $34 & 65535;
 $36 = $35 & 255;
 $37 = $36&255;
 $38 = (($tail) + 8|0);
 HEAP8[$38>>0] = $37;
 $39 = $1;
 $40 = $39 & 65535;
 $41 = $40 >>> 8;
 $42 = $41&255;
 $43 = (($tail) + 8|0);
 $44 = (($43) + 1|0);
 HEAP8[$44>>0] = $42;
 $45 = $1;
 $46 = $45 >>> 16;
 $47 = $46 & 255;
 $48 = $47&255;
 $49 = (($tail) + 8|0);
 $50 = (($49) + 2|0);
 HEAP8[$50>>0] = $48;
 $51 = $1;
 $52 = $51 >>> 16;
 $53 = $52 >>> 8;
 $54 = $53&255;
 $55 = (($tail) + 8|0);
 $56 = (($55) + 2|0);
 $57 = (($56) + 1|0);
 HEAP8[$57>>0] = $54;
 $58 = $0;
 $59 = $58 & 65535;
 $60 = $59 & 255;
 $61 = $60&255;
 $62 = (($tail) + 12|0);
 HEAP8[$62>>0] = $61;
 $63 = $0;
 $64 = $63 & 65535;
 $65 = $64 >>> 8;
 $66 = $65&255;
 $67 = (($tail) + 12|0);
 $68 = (($67) + 1|0);
 HEAP8[$68>>0] = $66;
 $69 = $0;
 $70 = $69 >>> 16;
 $71 = $70 & 255;
 $72 = $71&255;
 $73 = (($tail) + 12|0);
 $74 = (($73) + 2|0);
 HEAP8[$74>>0] = $72;
 $75 = $0;
 $76 = $75 >>> 16;
 $77 = $76 >>> 8;
 $78 = $77&255;
 $79 = (($tail) + 12|0);
 $80 = (($79) + 2|0);
 $81 = (($80) + 1|0);
 HEAP8[$81>>0] = $78;
 $82 = HEAP32[((80 + 8|0))>>2]|0;
 _writen($82,$tail,16);
 HEAP8[$tail>>0] = 80;
 $83 = (($tail) + 1|0);
 HEAP8[$83>>0] = 75;
 $84 = (($tail) + 2|0);
 HEAP8[$84>>0] = 1;
 $85 = (($tail) + 2|0);
 $86 = (($85) + 1|0);
 HEAP8[$86>>0] = 2;
 $87 = (($tail) + 4|0);
 HEAP8[$87>>0] = 63;
 $88 = (($tail) + 5|0);
 HEAP8[$88>>0] = -1;
 $89 = (($tail) + 6|0);
 HEAP8[$89>>0] = 20;
 $90 = (($tail) + 6|0);
 $91 = (($90) + 1|0);
 HEAP8[$91>>0] = 0;
 $92 = (($tail) + 8|0);
 HEAP8[$92>>0] = 8;
 $93 = (($tail) + 8|0);
 $94 = (($93) + 1|0);
 HEAP8[$94>>0] = 0;
 $95 = (($tail) + 10|0);
 HEAP8[$95>>0] = 8;
 $96 = (($tail) + 10|0);
 $97 = (($96) + 1|0);
 HEAP8[$97>>0] = 0;
 $98 = HEAP32[((80 + 64|0))>>2]|0;
 $99 = (_time2dos($98)|0);
 $100 = $99 & 65535;
 $101 = $100 & 255;
 $102 = $101&255;
 $103 = (($tail) + 12|0);
 HEAP8[$103>>0] = $102;
 $104 = HEAP32[((80 + 64|0))>>2]|0;
 $105 = (_time2dos($104)|0);
 $106 = $105 & 65535;
 $107 = $106 >>> 8;
 $108 = $107&255;
 $109 = (($tail) + 12|0);
 $110 = (($109) + 1|0);
 HEAP8[$110>>0] = $108;
 $111 = HEAP32[((80 + 64|0))>>2]|0;
 $112 = (_time2dos($111)|0);
 $113 = $112 >>> 16;
 $114 = $113 & 255;
 $115 = $114&255;
 $116 = (($tail) + 12|0);
 $117 = (($116) + 2|0);
 HEAP8[$117>>0] = $115;
 $118 = HEAP32[((80 + 64|0))>>2]|0;
 $119 = (_time2dos($118)|0);
 $120 = $119 >>> 16;
 $121 = $120 >>> 8;
 $122 = $121&255;
 $123 = (($tail) + 12|0);
 $124 = (($123) + 2|0);
 $125 = (($124) + 1|0);
 HEAP8[$125>>0] = $122;
 $126 = $2;
 $127 = $126 & 65535;
 $128 = $127 & 255;
 $129 = $128&255;
 $130 = (($tail) + 16|0);
 HEAP8[$130>>0] = $129;
 $131 = $2;
 $132 = $131 & 65535;
 $133 = $132 >>> 8;
 $134 = $133&255;
 $135 = (($tail) + 16|0);
 $136 = (($135) + 1|0);
 HEAP8[$136>>0] = $134;
 $137 = $2;
 $138 = $137 >>> 16;
 $139 = $138 & 255;
 $140 = $139&255;
 $141 = (($tail) + 16|0);
 $142 = (($141) + 2|0);
 HEAP8[$142>>0] = $140;
 $143 = $2;
 $144 = $143 >>> 16;
 $145 = $144 >>> 8;
 $146 = $145&255;
 $147 = (($tail) + 16|0);
 $148 = (($147) + 2|0);
 $149 = (($148) + 1|0);
 HEAP8[$149>>0] = $146;
 $150 = $1;
 $151 = $150 & 65535;
 $152 = $151 & 255;
 $153 = $152&255;
 $154 = (($tail) + 20|0);
 HEAP8[$154>>0] = $153;
 $155 = $1;
 $156 = $155 & 65535;
 $157 = $156 >>> 8;
 $158 = $157&255;
 $159 = (($tail) + 20|0);
 $160 = (($159) + 1|0);
 HEAP8[$160>>0] = $158;
 $161 = $1;
 $162 = $161 >>> 16;
 $163 = $162 & 255;
 $164 = $163&255;
 $165 = (($tail) + 20|0);
 $166 = (($165) + 2|0);
 HEAP8[$166>>0] = $164;
 $167 = $1;
 $168 = $167 >>> 16;
 $169 = $168 >>> 8;
 $170 = $169&255;
 $171 = (($tail) + 20|0);
 $172 = (($171) + 2|0);
 $173 = (($172) + 1|0);
 HEAP8[$173>>0] = $170;
 $174 = $0;
 $175 = $174 & 65535;
 $176 = $175 & 255;
 $177 = $176&255;
 $178 = (($tail) + 24|0);
 HEAP8[$178>>0] = $177;
 $179 = $0;
 $180 = $179 & 65535;
 $181 = $180 >>> 8;
 $182 = $181&255;
 $183 = (($tail) + 24|0);
 $184 = (($183) + 1|0);
 HEAP8[$184>>0] = $182;
 $185 = $0;
 $186 = $185 >>> 16;
 $187 = $186 & 255;
 $188 = $187&255;
 $189 = (($tail) + 24|0);
 $190 = (($189) + 2|0);
 HEAP8[$190>>0] = $188;
 $191 = $0;
 $192 = $191 >>> 16;
 $193 = $192 >>> 8;
 $194 = $193&255;
 $195 = (($tail) + 24|0);
 $196 = (($195) + 2|0);
 $197 = (($196) + 1|0);
 HEAP8[$197>>0] = $194;
 $198 = HEAP32[((80 + 60|0))>>2]|0;
 $199 = ($198|0)==(0|0);
 if ($199) {
  $203 = 1;
 } else {
  $200 = HEAP32[((80 + 60|0))>>2]|0;
  $201 = (_strlen(($200|0))|0);
  $203 = $201;
 }
 $202 = $203 & 255;
 $204 = $202&255;
 $205 = (($tail) + 28|0);
 HEAP8[$205>>0] = $204;
 $206 = HEAP32[((80 + 60|0))>>2]|0;
 $207 = ($206|0)==(0|0);
 if ($207) {
  $211 = 1;
 } else {
  $208 = HEAP32[((80 + 60|0))>>2]|0;
  $209 = (_strlen(($208|0))|0);
  $211 = $209;
 }
 $210 = $211 >>> 8;
 $212 = $210&255;
 $213 = (($tail) + 28|0);
 $214 = (($213) + 1|0);
 HEAP8[$214>>0] = $212;
 $215 = (($tail) + 30|0);
 HEAP8[$215>>0] = 9;
 $216 = (($tail) + 30|0);
 $217 = (($216) + 1|0);
 HEAP8[$217>>0] = 0;
 $218 = (($tail) + 32|0);
 HEAP8[$218>>0] = 0;
 $219 = (($tail) + 32|0);
 $220 = (($219) + 1|0);
 HEAP8[$220>>0] = 0;
 $221 = (($tail) + 34|0);
 HEAP8[$221>>0] = 0;
 $222 = (($tail) + 34|0);
 $223 = (($222) + 1|0);
 HEAP8[$223>>0] = 0;
 $224 = (($tail) + 36|0);
 HEAP8[$224>>0] = 0;
 $225 = (($tail) + 36|0);
 $226 = (($225) + 1|0);
 HEAP8[$226>>0] = 0;
 $227 = (($tail) + 38|0);
 HEAP8[$227>>0] = 0;
 $228 = (($tail) + 38|0);
 $229 = (($228) + 1|0);
 HEAP8[$229>>0] = 0;
 $230 = (($tail) + 38|0);
 $231 = (($230) + 2|0);
 HEAP8[$231>>0] = 0;
 $232 = (($tail) + 38|0);
 $233 = (($232) + 2|0);
 $234 = (($233) + 1|0);
 HEAP8[$234>>0] = 0;
 $235 = (($tail) + 42|0);
 HEAP8[$235>>0] = 0;
 $236 = (($tail) + 42|0);
 $237 = (($236) + 1|0);
 HEAP8[$237>>0] = 0;
 $238 = (($tail) + 42|0);
 $239 = (($238) + 2|0);
 HEAP8[$239>>0] = 0;
 $240 = (($tail) + 42|0);
 $241 = (($240) + 2|0);
 $242 = (($241) + 1|0);
 HEAP8[$242>>0] = 0;
 $243 = HEAP32[((80 + 8|0))>>2]|0;
 _writen($243,$tail,46);
 $cent = 46;
 $244 = HEAP32[((80 + 60|0))>>2]|0;
 $245 = ($244|0)==(0|0);
 if ($245) {
  $246 = HEAP32[((80 + 8|0))>>2]|0;
  _writen($246,66064,1);
 } else {
  $247 = HEAP32[((80 + 8|0))>>2]|0;
  $248 = HEAP32[((80 + 60|0))>>2]|0;
  $249 = HEAP32[((80 + 60|0))>>2]|0;
  $250 = (_strlen(($249|0))|0);
  _writen($247,$248,$250);
 }
 $251 = HEAP32[((80 + 60|0))>>2]|0;
 $252 = ($251|0)==(0|0);
 if ($252) {
  $257 = 1;
 } else {
  $253 = HEAP32[((80 + 60|0))>>2]|0;
  $254 = (_strlen(($253|0))|0);
  $257 = $254;
 }
 $255 = $cent;
 $256 = (($255) + ($257))|0;
 $cent = $256;
 HEAP8[$tail>>0] = 85;
 $258 = (($tail) + 1|0);
 HEAP8[$258>>0] = 84;
 $259 = (($tail) + 2|0);
 HEAP8[$259>>0] = 5;
 $260 = (($tail) + 2|0);
 $261 = (($260) + 1|0);
 HEAP8[$261>>0] = 0;
 $262 = (($tail) + 4|0);
 HEAP8[$262>>0] = 1;
 $263 = HEAP32[((80 + 64|0))>>2]|0;
 $264 = $263 & 65535;
 $265 = $264 & 255;
 $266 = $265&255;
 $267 = (($tail) + 5|0);
 HEAP8[$267>>0] = $266;
 $268 = HEAP32[((80 + 64|0))>>2]|0;
 $269 = $268 & 65535;
 $270 = $269 >> 8;
 $271 = $270&255;
 $272 = (($tail) + 5|0);
 $273 = (($272) + 1|0);
 HEAP8[$273>>0] = $271;
 $274 = HEAP32[((80 + 64|0))>>2]|0;
 $275 = $274 >> 16;
 $276 = $275 & 255;
 $277 = $276&255;
 $278 = (($tail) + 5|0);
 $279 = (($278) + 2|0);
 HEAP8[$279>>0] = $277;
 $280 = HEAP32[((80 + 64|0))>>2]|0;
 $281 = $280 >> 16;
 $282 = $281 >> 8;
 $283 = $282&255;
 $284 = (($tail) + 5|0);
 $285 = (($284) + 2|0);
 $286 = (($285) + 1|0);
 HEAP8[$286>>0] = $283;
 $287 = HEAP32[((80 + 8|0))>>2]|0;
 _writen($287,$tail,9);
 $288 = $cent;
 $289 = (($288) + 9)|0;
 $cent = $289;
 HEAP8[$tail>>0] = 80;
 $290 = (($tail) + 1|0);
 HEAP8[$290>>0] = 75;
 $291 = (($tail) + 2|0);
 HEAP8[$291>>0] = 5;
 $292 = (($tail) + 2|0);
 $293 = (($292) + 1|0);
 HEAP8[$293>>0] = 6;
 $294 = (($tail) + 4|0);
 HEAP8[$294>>0] = 0;
 $295 = (($tail) + 4|0);
 $296 = (($295) + 1|0);
 HEAP8[$296>>0] = 0;
 $297 = (($tail) + 6|0);
 HEAP8[$297>>0] = 0;
 $298 = (($tail) + 6|0);
 $299 = (($298) + 1|0);
 HEAP8[$299>>0] = 0;
 $300 = (($tail) + 8|0);
 HEAP8[$300>>0] = 1;
 $301 = (($tail) + 8|0);
 $302 = (($301) + 1|0);
 HEAP8[$302>>0] = 0;
 $303 = (($tail) + 10|0);
 HEAP8[$303>>0] = 1;
 $304 = (($tail) + 10|0);
 $305 = (($304) + 1|0);
 HEAP8[$305>>0] = 0;
 $306 = $cent;
 $307 = $306 & 65535;
 $308 = $307 & 255;
 $309 = $308&255;
 $310 = (($tail) + 12|0);
 HEAP8[$310>>0] = $309;
 $311 = $cent;
 $312 = $311 & 65535;
 $313 = $312 >>> 8;
 $314 = $313&255;
 $315 = (($tail) + 12|0);
 $316 = (($315) + 1|0);
 HEAP8[$316>>0] = $314;
 $317 = $cent;
 $318 = $317 >>> 16;
 $319 = $318 & 255;
 $320 = $319&255;
 $321 = (($tail) + 12|0);
 $322 = (($321) + 2|0);
 HEAP8[$322>>0] = $320;
 $323 = $cent;
 $324 = $323 >>> 16;
 $325 = $324 >>> 8;
 $326 = $325&255;
 $327 = (($tail) + 12|0);
 $328 = (($327) + 2|0);
 $329 = (($328) + 1|0);
 HEAP8[$329>>0] = $326;
 $330 = $3;
 $331 = $1;
 $332 = (($330) + ($331))|0;
 $333 = (($332) + 16)|0;
 $334 = $333 & 65535;
 $335 = $334 & 255;
 $336 = $335&255;
 $337 = (($tail) + 16|0);
 HEAP8[$337>>0] = $336;
 $338 = $3;
 $339 = $1;
 $340 = (($338) + ($339))|0;
 $341 = (($340) + 16)|0;
 $342 = $341 & 65535;
 $343 = $342 >>> 8;
 $344 = $343&255;
 $345 = (($tail) + 16|0);
 $346 = (($345) + 1|0);
 HEAP8[$346>>0] = $344;
 $347 = $3;
 $348 = $1;
 $349 = (($347) + ($348))|0;
 $350 = (($349) + 16)|0;
 $351 = $350 >>> 16;
 $352 = $351 & 255;
 $353 = $352&255;
 $354 = (($tail) + 16|0);
 $355 = (($354) + 2|0);
 HEAP8[$355>>0] = $353;
 $356 = $3;
 $357 = $1;
 $358 = (($356) + ($357))|0;
 $359 = (($358) + 16)|0;
 $360 = $359 >>> 16;
 $361 = $360 >>> 8;
 $362 = $361&255;
 $363 = (($tail) + 16|0);
 $364 = (($363) + 2|0);
 $365 = (($364) + 1|0);
 HEAP8[$365>>0] = $362;
 $366 = (($tail) + 20|0);
 HEAP8[$366>>0] = 0;
 $367 = (($tail) + 20|0);
 $368 = (($367) + 1|0);
 HEAP8[$368>>0] = 0;
 $369 = HEAP32[((80 + 8|0))>>2]|0;
 _writen($369,$tail,22);
 STACKTOP = sp;return;
}
function _time2dos($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dos = 0, $tm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 HEAP32[$1>>2] = $t;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_time((0|0))|0);
  HEAP32[$1>>2] = $4;
 }
 $5 = (_localtime(($1|0))|0);
 $tm = $5;
 $6 = $tm;
 $7 = (($6) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(80);
 if (!($9)) {
  $10 = $tm;
  $11 = (($10) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(207);
  if (!($13)) {
   $14 = $tm;
   $15 = (($14) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) - 80)|0;
   $18 = $17 << 25;
   $dos = $18;
   $19 = $tm;
   $20 = (($19) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   $23 = $22 << 21;
   $24 = $dos;
   $25 = (($24) + ($23))|0;
   $dos = $25;
   $26 = $tm;
   $27 = (($26) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 << 16;
   $30 = $dos;
   $31 = (($30) + ($29))|0;
   $dos = $31;
   $32 = $tm;
   $33 = (($32) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 << 11;
   $36 = $dos;
   $37 = (($36) + ($35))|0;
   $dos = $37;
   $38 = $tm;
   $39 = (($38) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 << 5;
   $42 = $dos;
   $43 = (($42) + ($41))|0;
   $dos = $43;
   $44 = $tm;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 1)|0;
   $47 = $46 >> 1;
   $48 = $dos;
   $49 = (($48) + ($47))|0;
   $dos = $49;
   $50 = $dos;
   $0 = $50;
   $51 = $0;
   STACKTOP = sp;return ($51|0);
  }
 }
 $0 = 0;
 $51 = $0;
 STACKTOP = sp;return ($51|0);
}
function _vstrcpy($str,$size,$off,$cpy) {
 $str = $str|0;
 $size = $size|0;
 $off = $off|0;
 $cpy = $cpy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $size;
 $2 = $off;
 $3 = $cpy;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $3;
 $9 = (_strlen(($8|0))|0);
 $10 = (($9) + 1)|0;
 $11 = (_vmemcpy($4,$5,$6,$7,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function _compressed_suffix($nm) {
 $nm = $nm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nm;
 $2 = $1;
 $3 = (_strlen(($2|0))|0);
 $len = $3;
 $4 = $len;
 $5 = ($4>>>0)>(4);
 do {
  if ($5) {
   $6 = $len;
   $7 = (($6) - 4)|0;
   $8 = $1;
   $9 = (($8) + ($7)|0);
   $1 = $9;
   $len = 4;
   $10 = $1;
   $11 = (_strcmp($10,66640)|0);
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = $1;
    $14 = (_strcmp($13,66648)|0);
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = $1;
     $17 = (_strcmp($16,66656)|0);
     $18 = ($17|0)==(0);
     if (!($18)) {
      break;
     }
    }
   }
   $0 = 4;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  }
 } while(0);
 $19 = $len;
 $20 = ($19>>>0)>(3);
 do {
  if ($20) {
   $21 = $len;
   $22 = (($21) - 3)|0;
   $23 = $1;
   $24 = (($23) + ($22)|0);
   $1 = $24;
   $len = 3;
   $25 = $1;
   $26 = (_strcmp($25,66608)|0);
   $27 = ($26|0)==(0);
   if (!($27)) {
    $28 = $1;
    $29 = (_strcmp($28,66616)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = $1;
     $32 = (_strcmp($31,66624)|0);
     $33 = ($32|0)==(0);
     if (!($33)) {
      $34 = $1;
      $35 = (_strcmp($34,66632)|0);
      $36 = ($35|0)==(0);
      if (!($36)) {
       break;
      }
     }
    }
   }
   $0 = 3;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  }
 } while(0);
 $37 = $len;
 $38 = ($37>>>0)>(2);
 do {
  if ($38) {
   $39 = $len;
   $40 = (($39) - 2)|0;
   $41 = $1;
   $42 = (($41) + ($40)|0);
   $1 = $42;
   $43 = $1;
   $44 = (_strcmp($43,66576)|0);
   $45 = ($44|0)==(0);
   if (!($45)) {
    $46 = $1;
    $47 = (_strcmp($46,66584)|0);
    $48 = ($47|0)==(0);
    if (!($48)) {
     $49 = $1;
     $50 = (_strcmp($49,66592)|0);
     $51 = ($50|0)==(0);
     if (!($51)) {
      $52 = $1;
      $53 = (_strcmp($52,66600)|0);
      $54 = ($53|0)==(0);
      if (!($54)) {
       break;
      }
     }
    }
   }
   $0 = 2;
   $55 = $0;
   STACKTOP = sp;return ($55|0);
  }
 } while(0);
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _justname($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $0;
 $2 = (_strrchr($1,47)|0);
 $p = $2;
 $3 = $p;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = $0;
  $8 = $5;
  STACKTOP = sp;return ($8|0);
 } else {
  $6 = $p;
  $7 = (($6) + 1|0);
  $8 = $7;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _in_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[((80 + 32916|0))>>2] = 0;
 HEAP32[((80 + 32920|0))>>2] = 0;
 HEAP32[((80 + 32924|0))>>2] = 0;
 HEAP32[((80 + 32928|0))>>2] = 0;
 HEAP32[((80 + 65712|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _get_header($save) {
 $save = $save|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $copy = 0, $crc = 0, $end = 0, $extra = 0, $flags = 0, $fname = 0, $have = 0, $magic = 0, $method = 0, $next = 0, $size = 0, $tmp2 = 0, $tmp4 = 0, $togo = 0, $togo1 = 0, $togo2 = 0, $togo3 = 0;
 var $togo4 = 0, $togo5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $size = sp + 36|0;
 $1 = $save;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  HEAP32[((80 + 124|0))>>2] = 0;
  $4 = HEAP32[((80 + 128|0))>>2]|0;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = HEAP32[((80 + 128|0))>>2]|0;
   _free($6);
   HEAP32[((80 + 128|0))>>2] = 0;
  }
 }
 HEAP32[((80 + 44|0))>>2] = -1;
 $7 = HEAP32[((80 + 32916|0))>>2]|0;
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   $9 = HEAP32[((80 + 32920|0))>>2]|0;
   $10 = ($9|0)!=(0);
   if (!($10)) {
    $11 = (_load()|0);
    $12 = ($11|0)==(0);
    if (!($12)) {
     label = 11;
     break;
    }
   }
   $20 = 0;
  } else {
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $13 = HEAP32[((80 + 32916|0))>>2]|0;
  $14 = (($13) + -1)|0;
  HEAP32[((80 + 32916|0))>>2] = $14;
  $15 = HEAP32[((80 + 32912|0))>>2]|0;
  $16 = (($15) + 1|0);
  HEAP32[((80 + 32912|0))>>2] = $16;
  $17 = HEAP8[$15>>0]|0;
  $18 = $17&255;
  $20 = $18;
 }
 $19 = $20&255;
 HEAP8[((80 + 48|0))>>0] = $19;
 $21 = HEAP32[((80 + 32920|0))>>2]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $0 = -1;
  $882 = $0;
  STACKTOP = sp;return ($882|0);
 }
 $23 = HEAP8[((80 + 48|0))>>0]|0;
 $24 = $23&255;
 $25 = $24 << 8;
 $magic = $25;
 $26 = HEAP32[((80 + 32916|0))>>2]|0;
 $27 = ($26|0)==(0);
 do {
  if ($27) {
   $28 = HEAP32[((80 + 32920|0))>>2]|0;
   $29 = ($28|0)!=(0);
   if (!($29)) {
    $30 = (_load()|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     label = 18;
     break;
    }
   }
   $40 = 0;
  } else {
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $32 = HEAP32[((80 + 32916|0))>>2]|0;
  $33 = (($32) + -1)|0;
  HEAP32[((80 + 32916|0))>>2] = $33;
  $34 = HEAP32[((80 + 32912|0))>>2]|0;
  $35 = (($34) + 1|0);
  HEAP32[((80 + 32912|0))>>2] = $35;
  $36 = HEAP8[$34>>0]|0;
  $37 = $36&255;
  $40 = $37;
 }
 $38 = $magic;
 $39 = (($38) + ($40))|0;
 $magic = $39;
 $41 = HEAP32[((80 + 32920|0))>>2]|0;
 $42 = ($41|0)!=(0);
 if ($42) {
  $0 = -2;
  $882 = $0;
  STACKTOP = sp;return ($882|0);
 }
 $43 = $magic;
 $44 = (($43>>>0) % 31)&-1;
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = $magic;
  $47 = $46 & 36640;
  $48 = ($47|0)==(2048);
  if ($48) {
   HEAP32[((80 + 44|0))>>2] = 1;
   $0 = 8;
   $882 = $0;
   STACKTOP = sp;return ($882|0);
  }
 }
 $49 = $magic;
 $50 = ($49|0)==(8093);
 if ($50) {
  $0 = 257;
  $882 = $0;
  STACKTOP = sp;return ($882|0);
 }
 $51 = $magic;
 $52 = ($51|0)==(20555);
 if (!($52)) {
  $544 = $magic;
  $545 = ($544|0)!=(8075);
  if ($545) {
   $546 = HEAP32[((80 + 32916|0))>>2]|0;
   $547 = (($546) + 1)|0;
   HEAP32[((80 + 32916|0))>>2] = $547;
   $548 = HEAP32[((80 + 32912|0))>>2]|0;
   $549 = (($548) + -1|0);
   HEAP32[((80 + 32912|0))>>2] = $549;
   $0 = -2;
   $882 = $0;
   STACKTOP = sp;return ($882|0);
  }
  $crc = -152484151;
  $550 = HEAP32[((80 + 32916|0))>>2]|0;
  $551 = ($550|0)==(0);
  do {
   if ($551) {
    $552 = HEAP32[((80 + 32920|0))>>2]|0;
    $553 = ($552|0)!=(0);
    if (!($553)) {
     $554 = (_load()|0);
     $555 = ($554|0)==(0);
     if (!($555)) {
      label = 213;
      break;
     }
    }
    $565 = 0;
   } else {
    label = 213;
   }
  } while(0);
  if ((label|0) == 213) {
   $556 = HEAP32[((80 + 32916|0))>>2]|0;
   $557 = (($556) + -1)|0;
   HEAP32[((80 + 32916|0))>>2] = $557;
   $558 = $crc;
   $559 = HEAP32[((80 + 32912|0))>>2]|0;
   $560 = (_crc32(($558|0),($559|0),1)|0);
   $crc = $560;
   $561 = HEAP32[((80 + 32912|0))>>2]|0;
   $562 = (($561) + 1|0);
   HEAP32[((80 + 32912|0))>>2] = $562;
   $563 = HEAP8[$561>>0]|0;
   $564 = $563&255;
   $565 = $564;
  }
  $method = $565;
  $566 = HEAP32[((80 + 32916|0))>>2]|0;
  $567 = ($566|0)==(0);
  do {
   if ($567) {
    $568 = HEAP32[((80 + 32920|0))>>2]|0;
    $569 = ($568|0)!=(0);
    if (!($569)) {
     $570 = (_load()|0);
     $571 = ($570|0)==(0);
     if (!($571)) {
      label = 218;
      break;
     }
    }
    $581 = 0;
   } else {
    label = 218;
   }
  } while(0);
  if ((label|0) == 218) {
   $572 = HEAP32[((80 + 32916|0))>>2]|0;
   $573 = (($572) + -1)|0;
   HEAP32[((80 + 32916|0))>>2] = $573;
   $574 = $crc;
   $575 = HEAP32[((80 + 32912|0))>>2]|0;
   $576 = (_crc32(($574|0),($575|0),1)|0);
   $crc = $576;
   $577 = HEAP32[((80 + 32912|0))>>2]|0;
   $578 = (($577) + 1|0);
   HEAP32[((80 + 32912|0))>>2] = $578;
   $579 = HEAP8[$577>>0]|0;
   $580 = $579&255;
   $581 = $580;
  }
  $flags = $581;
  $582 = $flags;
  $583 = $582 & 224;
  $584 = ($583|0)!=(0);
  if ($584) {
   $0 = -4;
   $882 = $0;
   STACKTOP = sp;return ($882|0);
  }
  $585 = $1;
  $586 = ($585|0)!=(0);
  do {
   if ($586) {
    $587 = HEAP32[((80 + 32916|0))>>2]|0;
    $588 = ($587|0)==(0);
    do {
     if ($588) {
      $589 = HEAP32[((80 + 32920|0))>>2]|0;
      $590 = ($589|0)!=(0);
      if (!($590)) {
       $591 = (_load()|0);
       $592 = ($591|0)==(0);
       if (!($592)) {
        label = 226;
        break;
       }
      }
      $602 = 0;
     } else {
      label = 226;
     }
    } while(0);
    if ((label|0) == 226) {
     $593 = HEAP32[((80 + 32916|0))>>2]|0;
     $594 = (($593) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $594;
     $595 = $crc;
     $596 = HEAP32[((80 + 32912|0))>>2]|0;
     $597 = (_crc32(($595|0),($596|0),1)|0);
     $crc = $597;
     $598 = HEAP32[((80 + 32912|0))>>2]|0;
     $599 = (($598) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $599;
     $600 = HEAP8[$598>>0]|0;
     $601 = $600&255;
     $602 = $601;
    }
    $tmp2 = $602;
    $603 = $tmp2;
    $604 = HEAP32[((80 + 32916|0))>>2]|0;
    $605 = ($604|0)==(0);
    do {
     if ($605) {
      $606 = HEAP32[((80 + 32920|0))>>2]|0;
      $607 = ($606|0)!=(0);
      if (!($607)) {
       $608 = (_load()|0);
       $609 = ($608|0)==(0);
       if (!($609)) {
        label = 231;
        break;
       }
      }
      $620 = 0;
     } else {
      label = 231;
     }
    } while(0);
    if ((label|0) == 231) {
     $610 = HEAP32[((80 + 32916|0))>>2]|0;
     $611 = (($610) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $611;
     $612 = $crc;
     $613 = HEAP32[((80 + 32912|0))>>2]|0;
     $614 = (_crc32(($612|0),($613|0),1)|0);
     $crc = $614;
     $615 = HEAP32[((80 + 32912|0))>>2]|0;
     $616 = (($615) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $616;
     $617 = HEAP8[$615>>0]|0;
     $618 = $617&255;
     $620 = $618;
    }
    $619 = $620 << 8;
    $621 = (($603) + ($619))|0;
    $tmp4 = $621;
    $622 = $tmp4;
    $623 = HEAP32[((80 + 32916|0))>>2]|0;
    $624 = ($623|0)==(0);
    do {
     if ($624) {
      $625 = HEAP32[((80 + 32920|0))>>2]|0;
      $626 = ($625|0)!=(0);
      if (!($626)) {
       $627 = (_load()|0);
       $628 = ($627|0)==(0);
       if (!($628)) {
        label = 236;
        break;
       }
      }
      $638 = 0;
     } else {
      label = 236;
     }
    } while(0);
    if ((label|0) == 236) {
     $629 = HEAP32[((80 + 32916|0))>>2]|0;
     $630 = (($629) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $630;
     $631 = $crc;
     $632 = HEAP32[((80 + 32912|0))>>2]|0;
     $633 = (_crc32(($631|0),($632|0),1)|0);
     $crc = $633;
     $634 = HEAP32[((80 + 32912|0))>>2]|0;
     $635 = (($634) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $635;
     $636 = HEAP8[$634>>0]|0;
     $637 = $636&255;
     $638 = $637;
    }
    $tmp2 = $638;
    $639 = $tmp2;
    $640 = HEAP32[((80 + 32916|0))>>2]|0;
    $641 = ($640|0)==(0);
    do {
     if ($641) {
      $642 = HEAP32[((80 + 32920|0))>>2]|0;
      $643 = ($642|0)!=(0);
      if (!($643)) {
       $644 = (_load()|0);
       $645 = ($644|0)==(0);
       if (!($645)) {
        label = 241;
        break;
       }
      }
      $656 = 0;
     } else {
      label = 241;
     }
    } while(0);
    if ((label|0) == 241) {
     $646 = HEAP32[((80 + 32916|0))>>2]|0;
     $647 = (($646) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $647;
     $648 = $crc;
     $649 = HEAP32[((80 + 32912|0))>>2]|0;
     $650 = (_crc32(($648|0),($649|0),1)|0);
     $crc = $650;
     $651 = HEAP32[((80 + 32912|0))>>2]|0;
     $652 = (($651) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $652;
     $653 = HEAP8[$651>>0]|0;
     $654 = $653&255;
     $656 = $654;
    }
    $655 = $656 << 8;
    $657 = (($639) + ($655))|0;
    $658 = $657 << 16;
    $659 = (($622) + ($658))|0;
    $660 = (_tolong($659)|0);
    HEAP32[((80 + 124|0))>>2] = $660;
   } else {
    $togo3 = 4;
    while(1) {
     $661 = $togo3;
     $662 = HEAP32[((80 + 32916|0))>>2]|0;
     $663 = ($661>>>0)>($662>>>0);
     if (!($663)) {
      label = 249;
      break;
     }
     $664 = $crc;
     $665 = HEAP32[((80 + 32912|0))>>2]|0;
     $666 = HEAP32[((80 + 32916|0))>>2]|0;
     $667 = (_crc32(($664|0),($665|0),($666|0))|0);
     $crc = $667;
     $668 = HEAP32[((80 + 32916|0))>>2]|0;
     $669 = $togo3;
     $670 = (($669) - ($668))|0;
     $togo3 = $670;
     $671 = (_load()|0);
     $672 = ($671|0)==(0);
     if ($672) {
      label = 247;
      break;
     }
    }
    if ((label|0) == 247) {
     $0 = -3;
     $882 = $0;
     STACKTOP = sp;return ($882|0);
    }
    else if ((label|0) == 249) {
     $673 = $crc;
     $674 = HEAP32[((80 + 32912|0))>>2]|0;
     $675 = $togo3;
     $676 = (_crc32(($673|0),($674|0),($675|0))|0);
     $crc = $676;
     $677 = $togo3;
     $678 = HEAP32[((80 + 32916|0))>>2]|0;
     $679 = (($678) - ($677))|0;
     HEAP32[((80 + 32916|0))>>2] = $679;
     $680 = $togo3;
     $681 = HEAP32[((80 + 32912|0))>>2]|0;
     $682 = (($681) + ($680)|0);
     HEAP32[((80 + 32912|0))>>2] = $682;
     break;
    }
   }
  } while(0);
  $togo4 = 2;
  while(1) {
   $683 = $togo4;
   $684 = HEAP32[((80 + 32916|0))>>2]|0;
   $685 = ($683>>>0)>($684>>>0);
   if (!($685)) {
    break;
   }
   $686 = $crc;
   $687 = HEAP32[((80 + 32912|0))>>2]|0;
   $688 = HEAP32[((80 + 32916|0))>>2]|0;
   $689 = (_crc32(($686|0),($687|0),($688|0))|0);
   $crc = $689;
   $690 = HEAP32[((80 + 32916|0))>>2]|0;
   $691 = $togo4;
   $692 = (($691) - ($690))|0;
   $togo4 = $692;
   $693 = (_load()|0);
   $694 = ($693|0)==(0);
   if ($694) {
    label = 255;
    break;
   }
  }
  if ((label|0) == 255) {
   $0 = -3;
   $882 = $0;
   STACKTOP = sp;return ($882|0);
  }
  $695 = $crc;
  $696 = HEAP32[((80 + 32912|0))>>2]|0;
  $697 = $togo4;
  $698 = (_crc32(($695|0),($696|0),($697|0))|0);
  $crc = $698;
  $699 = $togo4;
  $700 = HEAP32[((80 + 32916|0))>>2]|0;
  $701 = (($700) - ($699))|0;
  HEAP32[((80 + 32916|0))>>2] = $701;
  $702 = $togo4;
  $703 = HEAP32[((80 + 32912|0))>>2]|0;
  $704 = (($703) + ($702)|0);
  HEAP32[((80 + 32912|0))>>2] = $704;
  $705 = $flags;
  $706 = $705 & 4;
  $707 = ($706|0)!=(0);
  do {
   if ($707) {
    $708 = HEAP32[((80 + 32916|0))>>2]|0;
    $709 = ($708|0)==(0);
    do {
     if ($709) {
      $710 = HEAP32[((80 + 32920|0))>>2]|0;
      $711 = ($710|0)!=(0);
      if (!($711)) {
       $712 = (_load()|0);
       $713 = ($712|0)==(0);
       if (!($713)) {
        label = 264;
        break;
       }
      }
      $723 = 0;
     } else {
      label = 264;
     }
    } while(0);
    if ((label|0) == 264) {
     $714 = HEAP32[((80 + 32916|0))>>2]|0;
     $715 = (($714) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $715;
     $716 = $crc;
     $717 = HEAP32[((80 + 32912|0))>>2]|0;
     $718 = (_crc32(($716|0),($717|0),1)|0);
     $crc = $718;
     $719 = HEAP32[((80 + 32912|0))>>2]|0;
     $720 = (($719) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $720;
     $721 = HEAP8[$719>>0]|0;
     $722 = $721&255;
     $723 = $722;
    }
    $tmp2 = $723;
    $724 = $tmp2;
    $725 = HEAP32[((80 + 32916|0))>>2]|0;
    $726 = ($725|0)==(0);
    do {
     if ($726) {
      $727 = HEAP32[((80 + 32920|0))>>2]|0;
      $728 = ($727|0)!=(0);
      if (!($728)) {
       $729 = (_load()|0);
       $730 = ($729|0)==(0);
       if (!($730)) {
        label = 269;
        break;
       }
      }
      $741 = 0;
     } else {
      label = 269;
     }
    } while(0);
    if ((label|0) == 269) {
     $731 = HEAP32[((80 + 32916|0))>>2]|0;
     $732 = (($731) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $732;
     $733 = $crc;
     $734 = HEAP32[((80 + 32912|0))>>2]|0;
     $735 = (_crc32(($733|0),($734|0),1)|0);
     $crc = $735;
     $736 = HEAP32[((80 + 32912|0))>>2]|0;
     $737 = (($736) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $737;
     $738 = HEAP8[$736>>0]|0;
     $739 = $738&255;
     $741 = $739;
    }
    $740 = $741 << 8;
    $742 = (($724) + ($740))|0;
    $togo5 = $742;
    while(1) {
     $743 = $togo5;
     $744 = HEAP32[((80 + 32916|0))>>2]|0;
     $745 = ($743>>>0)>($744>>>0);
     if (!($745)) {
      label = 275;
      break;
     }
     $746 = $crc;
     $747 = HEAP32[((80 + 32912|0))>>2]|0;
     $748 = HEAP32[((80 + 32916|0))>>2]|0;
     $749 = (_crc32(($746|0),($747|0),($748|0))|0);
     $crc = $749;
     $750 = HEAP32[((80 + 32916|0))>>2]|0;
     $751 = $togo5;
     $752 = (($751) - ($750))|0;
     $togo5 = $752;
     $753 = (_load()|0);
     $754 = ($753|0)==(0);
     if ($754) {
      label = 273;
      break;
     }
    }
    if ((label|0) == 273) {
     $0 = -3;
     $882 = $0;
     STACKTOP = sp;return ($882|0);
    }
    else if ((label|0) == 275) {
     $755 = $crc;
     $756 = HEAP32[((80 + 32912|0))>>2]|0;
     $757 = $togo5;
     $758 = (_crc32(($755|0),($756|0),($757|0))|0);
     $crc = $758;
     $759 = $togo5;
     $760 = HEAP32[((80 + 32916|0))>>2]|0;
     $761 = (($760) - ($759))|0;
     HEAP32[((80 + 32916|0))>>2] = $761;
     $762 = $togo5;
     $763 = HEAP32[((80 + 32912|0))>>2]|0;
     $764 = (($763) + ($762)|0);
     HEAP32[((80 + 32912|0))>>2] = $764;
     break;
    }
   }
  } while(0);
  $765 = $flags;
  $766 = $765 & 8;
  $767 = ($766|0)!=(0);
  do {
   if ($767) {
    $768 = $1;
    $769 = ($768|0)!=(0);
    if ($769) {
     HEAP32[$size>>2] = 0;
     $have = 0;
     while(1) {
      $770 = HEAP32[((80 + 32916|0))>>2]|0;
      $771 = ($770|0)==(0);
      if ($771) {
       $772 = (_load()|0);
       $773 = ($772|0)==(0);
       if ($773) {
        break;
       }
      }
      $774 = HEAP32[((80 + 32912|0))>>2]|0;
      $775 = HEAP32[((80 + 32916|0))>>2]|0;
      $776 = (_memchr($774,0,$775)|0);
      $end = $776;
      $777 = $end;
      $778 = ($777|0)==(0|0);
      if ($778) {
       $779 = HEAP32[((80 + 32916|0))>>2]|0;
       $786 = $779;
      } else {
       $780 = $end;
       $781 = HEAP32[((80 + 32912|0))>>2]|0;
       $782 = $780;
       $783 = $781;
       $784 = (($782) - ($783))|0;
       $785 = (($784) + 1)|0;
       $786 = $785;
      }
      $copy = $786;
      $787 = $have;
      $788 = HEAP32[((80 + 32912|0))>>2]|0;
      $789 = $copy;
      $790 = (_vmemcpy(((80 + 128|0)),$size,$787,$788,$789)|0);
      $have = $790;
      $791 = $copy;
      $792 = HEAP32[((80 + 32916|0))>>2]|0;
      $793 = (($792) - ($791))|0;
      HEAP32[((80 + 32916|0))>>2] = $793;
      $794 = $copy;
      $795 = HEAP32[((80 + 32912|0))>>2]|0;
      $796 = (($795) + ($794)|0);
      HEAP32[((80 + 32912|0))>>2] = $796;
      $797 = $end;
      $798 = ($797|0)==(0|0);
      if (!($798)) {
       label = 288;
       break;
      }
     }
     if ((label|0) == 288) {
      $799 = $crc;
      $800 = HEAP32[((80 + 128|0))>>2]|0;
      $801 = $have;
      $802 = (_crc32(($799|0),($800|0),($801|0))|0);
      $crc = $802;
      break;
     }
     $0 = -3;
     $882 = $0;
     STACKTOP = sp;return ($882|0);
    } else {
     label = 289;
    }
   } else {
    label = 289;
   }
  } while(0);
  if ((label|0) == 289) {
   $803 = $flags;
   $804 = $803 & 8;
   $805 = ($804|0)!=(0);
   if ($805) {
    while(1) {
     $806 = HEAP32[((80 + 32916|0))>>2]|0;
     $807 = ($806|0)==(0);
     do {
      if ($807) {
       $808 = HEAP32[((80 + 32920|0))>>2]|0;
       $809 = ($808|0)!=(0);
       if (!($809)) {
        $810 = (_load()|0);
        $811 = ($810|0)==(0);
        if (!($811)) {
         label = 295;
         break;
        }
       }
       $821 = 0;
      } else {
       label = 295;
      }
     } while(0);
     if ((label|0) == 295) {
      label = 0;
      $812 = HEAP32[((80 + 32916|0))>>2]|0;
      $813 = (($812) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $813;
      $814 = $crc;
      $815 = HEAP32[((80 + 32912|0))>>2]|0;
      $816 = (_crc32(($814|0),($815|0),1)|0);
      $crc = $816;
      $817 = HEAP32[((80 + 32912|0))>>2]|0;
      $818 = (($817) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $818;
      $819 = HEAP8[$817>>0]|0;
      $820 = $819&255;
      $821 = $820;
     }
     $822 = ($821|0)!=(0);
     if (!($822)) {
      break;
     }
    }
   }
  }
  $823 = $flags;
  $824 = $823 & 16;
  $825 = ($824|0)!=(0);
  if ($825) {
   while(1) {
    $826 = HEAP32[((80 + 32916|0))>>2]|0;
    $827 = ($826|0)==(0);
    do {
     if ($827) {
      $828 = HEAP32[((80 + 32920|0))>>2]|0;
      $829 = ($828|0)!=(0);
      if (!($829)) {
       $830 = (_load()|0);
       $831 = ($830|0)==(0);
       if (!($831)) {
        label = 306;
        break;
       }
      }
      $841 = 0;
     } else {
      label = 306;
     }
    } while(0);
    if ((label|0) == 306) {
     label = 0;
     $832 = HEAP32[((80 + 32916|0))>>2]|0;
     $833 = (($832) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $833;
     $834 = $crc;
     $835 = HEAP32[((80 + 32912|0))>>2]|0;
     $836 = (_crc32(($834|0),($835|0),1)|0);
     $crc = $836;
     $837 = HEAP32[((80 + 32912|0))>>2]|0;
     $838 = (($837) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $838;
     $839 = HEAP8[$837>>0]|0;
     $840 = $839&255;
     $841 = $840;
    }
    $842 = ($841|0)!=(0);
    if (!($842)) {
     break;
    }
   }
  }
  $843 = $flags;
  $844 = $843 & 2;
  $845 = ($844|0)!=(0);
  do {
   if ($845) {
    $846 = HEAP32[((80 + 32916|0))>>2]|0;
    $847 = ($846|0)==(0);
    do {
     if ($847) {
      $848 = HEAP32[((80 + 32920|0))>>2]|0;
      $849 = ($848|0)!=(0);
      if (!($849)) {
       $850 = (_load()|0);
       $851 = ($850|0)==(0);
       if (!($851)) {
        label = 315;
        break;
       }
      }
      $858 = 0;
     } else {
      label = 315;
     }
    } while(0);
    if ((label|0) == 315) {
     $852 = HEAP32[((80 + 32916|0))>>2]|0;
     $853 = (($852) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $853;
     $854 = HEAP32[((80 + 32912|0))>>2]|0;
     $855 = (($854) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $855;
     $856 = HEAP8[$854>>0]|0;
     $857 = $856&255;
     $858 = $857;
    }
    $tmp2 = $858;
    $859 = $tmp2;
    $860 = HEAP32[((80 + 32916|0))>>2]|0;
    $861 = ($860|0)==(0);
    do {
     if ($861) {
      $862 = HEAP32[((80 + 32920|0))>>2]|0;
      $863 = ($862|0)!=(0);
      if (!($863)) {
       $864 = (_load()|0);
       $865 = ($864|0)==(0);
       if (!($865)) {
        label = 320;
        break;
       }
      }
      $873 = 0;
     } else {
      label = 320;
     }
    } while(0);
    if ((label|0) == 320) {
     $866 = HEAP32[((80 + 32916|0))>>2]|0;
     $867 = (($866) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $867;
     $868 = HEAP32[((80 + 32912|0))>>2]|0;
     $869 = (($868) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $869;
     $870 = HEAP8[$868>>0]|0;
     $871 = $870&255;
     $873 = $871;
    }
    $872 = $873 << 8;
    $874 = (($859) + ($872))|0;
    $875 = $crc;
    $876 = $875 & 65535;
    $877 = ($874|0)!=($876|0);
    if (!($877)) {
     break;
    }
    $0 = -6;
    $882 = $0;
    STACKTOP = sp;return ($882|0);
   }
  } while(0);
  HEAP32[((80 + 44|0))>>2] = 0;
  $878 = HEAP32[((80 + 32920|0))>>2]|0;
  $879 = ($878|0)!=(0);
  if ($879) {
   $881 = -3;
  } else {
   $880 = $method;
   $881 = $880;
  }
  $0 = $881;
  $882 = $0;
  STACKTOP = sp;return ($882|0);
 }
 $53 = HEAP32[((80 + 32916|0))>>2]|0;
 $54 = ($53|0)==(0);
 do {
  if ($54) {
   $55 = HEAP32[((80 + 32920|0))>>2]|0;
   $56 = ($55|0)!=(0);
   if (!($56)) {
    $57 = (_load()|0);
    $58 = ($57|0)==(0);
    if (!($58)) {
     label = 31;
     break;
    }
   }
   $65 = 0;
  } else {
   label = 31;
  }
 } while(0);
 if ((label|0) == 31) {
  $59 = HEAP32[((80 + 32916|0))>>2]|0;
  $60 = (($59) + -1)|0;
  HEAP32[((80 + 32916|0))>>2] = $60;
  $61 = HEAP32[((80 + 32912|0))>>2]|0;
  $62 = (($61) + 1|0);
  HEAP32[((80 + 32912|0))>>2] = $62;
  $63 = HEAP8[$61>>0]|0;
  $64 = $63&255;
  $65 = $64;
 }
 $tmp2 = $65;
 $66 = $tmp2;
 $67 = HEAP32[((80 + 32916|0))>>2]|0;
 $68 = ($67|0)==(0);
 do {
  if ($68) {
   $69 = HEAP32[((80 + 32920|0))>>2]|0;
   $70 = ($69|0)!=(0);
   if (!($70)) {
    $71 = (_load()|0);
    $72 = ($71|0)==(0);
    if (!($72)) {
     label = 36;
     break;
    }
   }
   $80 = 0;
  } else {
   label = 36;
  }
 } while(0);
 if ((label|0) == 36) {
  $73 = HEAP32[((80 + 32916|0))>>2]|0;
  $74 = (($73) + -1)|0;
  HEAP32[((80 + 32916|0))>>2] = $74;
  $75 = HEAP32[((80 + 32912|0))>>2]|0;
  $76 = (($75) + 1|0);
  HEAP32[((80 + 32912|0))>>2] = $76;
  $77 = HEAP8[$75>>0]|0;
  $78 = $77&255;
  $80 = $78;
 }
 $79 = $80 << 8;
 $81 = (($66) + ($79))|0;
 $magic = $81;
 $82 = HEAP32[((80 + 32920|0))>>2]|0;
 $83 = ($82|0)!=(0);
 if ($83) {
  $0 = -3;
  $882 = $0;
  STACKTOP = sp;return ($882|0);
 }
 $84 = $magic;
 $85 = ($84|0)==(513);
 if (!($85)) {
  $86 = $magic;
  $87 = ($86|0)==(2054);
  if (!($87)) {
   $88 = $magic;
   $89 = ($88|0)!=(1027);
   if ($89) {
    $0 = -4;
    $882 = $0;
    STACKTOP = sp;return ($882|0);
   }
   $togo = 2;
   while(1) {
    $90 = $togo;
    $91 = HEAP32[((80 + 32916|0))>>2]|0;
    $92 = ($90>>>0)>($91>>>0);
    if (!($92)) {
     break;
    }
    $93 = HEAP32[((80 + 32916|0))>>2]|0;
    $94 = $togo;
    $95 = (($94) - ($93))|0;
    $togo = $95;
    $96 = (_load()|0);
    $97 = ($96|0)==(0);
    if ($97) {
     label = 48;
     break;
    }
   }
   if ((label|0) == 48) {
    $0 = -3;
    $882 = $0;
    STACKTOP = sp;return ($882|0);
   }
   $98 = $togo;
   $99 = HEAP32[((80 + 32916|0))>>2]|0;
   $100 = (($99) - ($98))|0;
   HEAP32[((80 + 32916|0))>>2] = $100;
   $101 = $togo;
   $102 = HEAP32[((80 + 32912|0))>>2]|0;
   $103 = (($102) + ($101)|0);
   HEAP32[((80 + 32912|0))>>2] = $103;
   $104 = HEAP32[((80 + 32916|0))>>2]|0;
   $105 = ($104|0)==(0);
   do {
    if ($105) {
     $106 = HEAP32[((80 + 32920|0))>>2]|0;
     $107 = ($106|0)!=(0);
     if (!($107)) {
      $108 = (_load()|0);
      $109 = ($108|0)==(0);
      if (!($109)) {
       label = 55;
       break;
      }
     }
     $116 = 0;
    } else {
     label = 55;
    }
   } while(0);
   if ((label|0) == 55) {
    $110 = HEAP32[((80 + 32916|0))>>2]|0;
    $111 = (($110) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $111;
    $112 = HEAP32[((80 + 32912|0))>>2]|0;
    $113 = (($112) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $113;
    $114 = HEAP8[$112>>0]|0;
    $115 = $114&255;
    $116 = $115;
   }
   $tmp2 = $116;
   $117 = $tmp2;
   $118 = HEAP32[((80 + 32916|0))>>2]|0;
   $119 = ($118|0)==(0);
   do {
    if ($119) {
     $120 = HEAP32[((80 + 32920|0))>>2]|0;
     $121 = ($120|0)!=(0);
     if (!($121)) {
      $122 = (_load()|0);
      $123 = ($122|0)==(0);
      if (!($123)) {
       label = 60;
       break;
      }
     }
     $131 = 0;
    } else {
     label = 60;
    }
   } while(0);
   if ((label|0) == 60) {
    $124 = HEAP32[((80 + 32916|0))>>2]|0;
    $125 = (($124) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $125;
    $126 = HEAP32[((80 + 32912|0))>>2]|0;
    $127 = (($126) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $127;
    $128 = HEAP8[$126>>0]|0;
    $129 = $128&255;
    $131 = $129;
   }
   $130 = $131 << 8;
   $132 = (($117) + ($130))|0;
   $flags = $132;
   $133 = $flags;
   $134 = $133 & 65520;
   $135 = ($134|0)!=(0);
   if ($135) {
    $0 = -4;
    $882 = $0;
    STACKTOP = sp;return ($882|0);
   }
   $136 = HEAP32[((80 + 32916|0))>>2]|0;
   $137 = ($136|0)==(0);
   do {
    if ($137) {
     $138 = HEAP32[((80 + 32920|0))>>2]|0;
     $139 = ($138|0)!=(0);
     if (!($139)) {
      $140 = (_load()|0);
      $141 = ($140|0)==(0);
      if (!($141)) {
       label = 67;
       break;
      }
     }
     $148 = 0;
    } else {
     label = 67;
    }
   } while(0);
   if ((label|0) == 67) {
    $142 = HEAP32[((80 + 32916|0))>>2]|0;
    $143 = (($142) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $143;
    $144 = HEAP32[((80 + 32912|0))>>2]|0;
    $145 = (($144) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $145;
    $146 = HEAP8[$144>>0]|0;
    $147 = $146&255;
    $148 = $147;
   }
   $method = $148;
   $149 = HEAP32[((80 + 32916|0))>>2]|0;
   $150 = ($149|0)==(0);
   do {
    if ($150) {
     $151 = HEAP32[((80 + 32920|0))>>2]|0;
     $152 = ($151|0)!=(0);
     if (!($152)) {
      $153 = (_load()|0);
      $154 = ($153|0)==(0);
      if (!($154)) {
       label = 72;
       break;
      }
     }
     $161 = 0;
    } else {
     label = 72;
    }
   } while(0);
   if ((label|0) == 72) {
    $155 = HEAP32[((80 + 32916|0))>>2]|0;
    $156 = (($155) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $156;
    $157 = HEAP32[((80 + 32912|0))>>2]|0;
    $158 = (($157) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $158;
    $159 = HEAP8[$157>>0]|0;
    $160 = $159&255;
    $161 = $160;
   }
   $162 = ($161|0)!=(0);
   if ($162) {
    label = 75;
   } else {
    $163 = $flags;
    $164 = $163 & 1;
    $165 = ($164|0)!=(0);
    if ($165) {
     label = 75;
    }
   }
   if ((label|0) == 75) {
    $method = 256;
   }
   $166 = $1;
   $167 = ($166|0)!=(0);
   do {
    if ($167) {
     $168 = HEAP32[((80 + 32916|0))>>2]|0;
     $169 = ($168|0)==(0);
     do {
      if ($169) {
       $170 = HEAP32[((80 + 32920|0))>>2]|0;
       $171 = ($170|0)!=(0);
       if (!($171)) {
        $172 = (_load()|0);
        $173 = ($172|0)==(0);
        if (!($173)) {
         label = 81;
         break;
        }
       }
       $180 = 0;
      } else {
       label = 81;
      }
     } while(0);
     if ((label|0) == 81) {
      $174 = HEAP32[((80 + 32916|0))>>2]|0;
      $175 = (($174) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $175;
      $176 = HEAP32[((80 + 32912|0))>>2]|0;
      $177 = (($176) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $177;
      $178 = HEAP8[$176>>0]|0;
      $179 = $178&255;
      $180 = $179;
     }
     $tmp2 = $180;
     $181 = $tmp2;
     $182 = HEAP32[((80 + 32916|0))>>2]|0;
     $183 = ($182|0)==(0);
     do {
      if ($183) {
       $184 = HEAP32[((80 + 32920|0))>>2]|0;
       $185 = ($184|0)!=(0);
       if (!($185)) {
        $186 = (_load()|0);
        $187 = ($186|0)==(0);
        if (!($187)) {
         label = 86;
         break;
        }
       }
       $195 = 0;
      } else {
       label = 86;
      }
     } while(0);
     if ((label|0) == 86) {
      $188 = HEAP32[((80 + 32916|0))>>2]|0;
      $189 = (($188) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $189;
      $190 = HEAP32[((80 + 32912|0))>>2]|0;
      $191 = (($190) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $191;
      $192 = HEAP8[$190>>0]|0;
      $193 = $192&255;
      $195 = $193;
     }
     $194 = $195 << 8;
     $196 = (($181) + ($194))|0;
     $tmp4 = $196;
     $197 = $tmp4;
     $198 = HEAP32[((80 + 32916|0))>>2]|0;
     $199 = ($198|0)==(0);
     do {
      if ($199) {
       $200 = HEAP32[((80 + 32920|0))>>2]|0;
       $201 = ($200|0)!=(0);
       if (!($201)) {
        $202 = (_load()|0);
        $203 = ($202|0)==(0);
        if (!($203)) {
         label = 91;
         break;
        }
       }
       $210 = 0;
      } else {
       label = 91;
      }
     } while(0);
     if ((label|0) == 91) {
      $204 = HEAP32[((80 + 32916|0))>>2]|0;
      $205 = (($204) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $205;
      $206 = HEAP32[((80 + 32912|0))>>2]|0;
      $207 = (($206) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $207;
      $208 = HEAP8[$206>>0]|0;
      $209 = $208&255;
      $210 = $209;
     }
     $tmp2 = $210;
     $211 = $tmp2;
     $212 = HEAP32[((80 + 32916|0))>>2]|0;
     $213 = ($212|0)==(0);
     do {
      if ($213) {
       $214 = HEAP32[((80 + 32920|0))>>2]|0;
       $215 = ($214|0)!=(0);
       if (!($215)) {
        $216 = (_load()|0);
        $217 = ($216|0)==(0);
        if (!($217)) {
         label = 96;
         break;
        }
       }
       $225 = 0;
      } else {
       label = 96;
      }
     } while(0);
     if ((label|0) == 96) {
      $218 = HEAP32[((80 + 32916|0))>>2]|0;
      $219 = (($218) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $219;
      $220 = HEAP32[((80 + 32912|0))>>2]|0;
      $221 = (($220) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $221;
      $222 = HEAP8[$220>>0]|0;
      $223 = $222&255;
      $225 = $223;
     }
     $224 = $225 << 8;
     $226 = (($211) + ($224))|0;
     $227 = $226 << 16;
     $228 = (($197) + ($227))|0;
     $229 = (_dos2time($228)|0);
     HEAP32[((80 + 124|0))>>2] = $229;
    } else {
     $togo1 = 4;
     while(1) {
      $230 = $togo1;
      $231 = HEAP32[((80 + 32916|0))>>2]|0;
      $232 = ($230>>>0)>($231>>>0);
      if (!($232)) {
       label = 104;
       break;
      }
      $233 = HEAP32[((80 + 32916|0))>>2]|0;
      $234 = $togo1;
      $235 = (($234) - ($233))|0;
      $togo1 = $235;
      $236 = (_load()|0);
      $237 = ($236|0)==(0);
      if ($237) {
       label = 102;
       break;
      }
     }
     if ((label|0) == 102) {
      $0 = -3;
      $882 = $0;
      STACKTOP = sp;return ($882|0);
     }
     else if ((label|0) == 104) {
      $238 = $togo1;
      $239 = HEAP32[((80 + 32916|0))>>2]|0;
      $240 = (($239) - ($238))|0;
      HEAP32[((80 + 32916|0))>>2] = $240;
      $241 = $togo1;
      $242 = HEAP32[((80 + 32912|0))>>2]|0;
      $243 = (($242) + ($241)|0);
      HEAP32[((80 + 32912|0))>>2] = $243;
      break;
     }
    }
   } while(0);
   $244 = HEAP32[((80 + 32916|0))>>2]|0;
   $245 = ($244|0)==(0);
   do {
    if ($245) {
     $246 = HEAP32[((80 + 32920|0))>>2]|0;
     $247 = ($246|0)!=(0);
     if (!($247)) {
      $248 = (_load()|0);
      $249 = ($248|0)==(0);
      if (!($249)) {
       label = 110;
       break;
      }
     }
     $256 = 0;
    } else {
     label = 110;
    }
   } while(0);
   if ((label|0) == 110) {
    $250 = HEAP32[((80 + 32916|0))>>2]|0;
    $251 = (($250) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $251;
    $252 = HEAP32[((80 + 32912|0))>>2]|0;
    $253 = (($252) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $253;
    $254 = HEAP8[$252>>0]|0;
    $255 = $254&255;
    $256 = $255;
   }
   $tmp2 = $256;
   $257 = $tmp2;
   $258 = HEAP32[((80 + 32916|0))>>2]|0;
   $259 = ($258|0)==(0);
   do {
    if ($259) {
     $260 = HEAP32[((80 + 32920|0))>>2]|0;
     $261 = ($260|0)!=(0);
     if (!($261)) {
      $262 = (_load()|0);
      $263 = ($262|0)==(0);
      if (!($263)) {
       label = 115;
       break;
      }
     }
     $271 = 0;
    } else {
     label = 115;
    }
   } while(0);
   if ((label|0) == 115) {
    $264 = HEAP32[((80 + 32916|0))>>2]|0;
    $265 = (($264) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $265;
    $266 = HEAP32[((80 + 32912|0))>>2]|0;
    $267 = (($266) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $267;
    $268 = HEAP8[$266>>0]|0;
    $269 = $268&255;
    $271 = $269;
   }
   $270 = $271 << 8;
   $272 = (($257) + ($270))|0;
   $tmp4 = $272;
   $273 = $tmp4;
   $274 = HEAP32[((80 + 32916|0))>>2]|0;
   $275 = ($274|0)==(0);
   do {
    if ($275) {
     $276 = HEAP32[((80 + 32920|0))>>2]|0;
     $277 = ($276|0)!=(0);
     if (!($277)) {
      $278 = (_load()|0);
      $279 = ($278|0)==(0);
      if (!($279)) {
       label = 120;
       break;
      }
     }
     $286 = 0;
    } else {
     label = 120;
    }
   } while(0);
   if ((label|0) == 120) {
    $280 = HEAP32[((80 + 32916|0))>>2]|0;
    $281 = (($280) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $281;
    $282 = HEAP32[((80 + 32912|0))>>2]|0;
    $283 = (($282) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $283;
    $284 = HEAP8[$282>>0]|0;
    $285 = $284&255;
    $286 = $285;
   }
   $tmp2 = $286;
   $287 = $tmp2;
   $288 = HEAP32[((80 + 32916|0))>>2]|0;
   $289 = ($288|0)==(0);
   do {
    if ($289) {
     $290 = HEAP32[((80 + 32920|0))>>2]|0;
     $291 = ($290|0)!=(0);
     if (!($291)) {
      $292 = (_load()|0);
      $293 = ($292|0)==(0);
      if (!($293)) {
       label = 125;
       break;
      }
     }
     $301 = 0;
    } else {
     label = 125;
    }
   } while(0);
   if ((label|0) == 125) {
    $294 = HEAP32[((80 + 32916|0))>>2]|0;
    $295 = (($294) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $295;
    $296 = HEAP32[((80 + 32912|0))>>2]|0;
    $297 = (($296) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $297;
    $298 = HEAP8[$296>>0]|0;
    $299 = $298&255;
    $301 = $299;
   }
   $300 = $301 << 8;
   $302 = (($287) + ($300))|0;
   $303 = $302 << 16;
   $304 = (($273) + ($303))|0;
   HEAP32[((80 + 132|0))>>2] = $304;
   $305 = HEAP32[((80 + 32916|0))>>2]|0;
   $306 = ($305|0)==(0);
   do {
    if ($306) {
     $307 = HEAP32[((80 + 32920|0))>>2]|0;
     $308 = ($307|0)!=(0);
     if (!($308)) {
      $309 = (_load()|0);
      $310 = ($309|0)==(0);
      if (!($310)) {
       label = 130;
       break;
      }
     }
     $317 = 0;
    } else {
     label = 130;
    }
   } while(0);
   if ((label|0) == 130) {
    $311 = HEAP32[((80 + 32916|0))>>2]|0;
    $312 = (($311) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $312;
    $313 = HEAP32[((80 + 32912|0))>>2]|0;
    $314 = (($313) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $314;
    $315 = HEAP8[$313>>0]|0;
    $316 = $315&255;
    $317 = $316;
   }
   $tmp2 = $317;
   $318 = $tmp2;
   $319 = HEAP32[((80 + 32916|0))>>2]|0;
   $320 = ($319|0)==(0);
   do {
    if ($320) {
     $321 = HEAP32[((80 + 32920|0))>>2]|0;
     $322 = ($321|0)!=(0);
     if (!($322)) {
      $323 = (_load()|0);
      $324 = ($323|0)==(0);
      if (!($324)) {
       label = 135;
       break;
      }
     }
     $332 = 0;
    } else {
     label = 135;
    }
   } while(0);
   if ((label|0) == 135) {
    $325 = HEAP32[((80 + 32916|0))>>2]|0;
    $326 = (($325) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $326;
    $327 = HEAP32[((80 + 32912|0))>>2]|0;
    $328 = (($327) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $328;
    $329 = HEAP8[$327>>0]|0;
    $330 = $329&255;
    $332 = $330;
   }
   $331 = $332 << 8;
   $333 = (($318) + ($331))|0;
   $tmp4 = $333;
   $334 = $tmp4;
   $335 = HEAP32[((80 + 32916|0))>>2]|0;
   $336 = ($335|0)==(0);
   do {
    if ($336) {
     $337 = HEAP32[((80 + 32920|0))>>2]|0;
     $338 = ($337|0)!=(0);
     if (!($338)) {
      $339 = (_load()|0);
      $340 = ($339|0)==(0);
      if (!($340)) {
       label = 140;
       break;
      }
     }
     $347 = 0;
    } else {
     label = 140;
    }
   } while(0);
   if ((label|0) == 140) {
    $341 = HEAP32[((80 + 32916|0))>>2]|0;
    $342 = (($341) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $342;
    $343 = HEAP32[((80 + 32912|0))>>2]|0;
    $344 = (($343) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $344;
    $345 = HEAP8[$343>>0]|0;
    $346 = $345&255;
    $347 = $346;
   }
   $tmp2 = $347;
   $348 = $tmp2;
   $349 = HEAP32[((80 + 32916|0))>>2]|0;
   $350 = ($349|0)==(0);
   do {
    if ($350) {
     $351 = HEAP32[((80 + 32920|0))>>2]|0;
     $352 = ($351|0)!=(0);
     if (!($352)) {
      $353 = (_load()|0);
      $354 = ($353|0)==(0);
      if (!($354)) {
       label = 145;
       break;
      }
     }
     $362 = 0;
    } else {
     label = 145;
    }
   } while(0);
   if ((label|0) == 145) {
    $355 = HEAP32[((80 + 32916|0))>>2]|0;
    $356 = (($355) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $356;
    $357 = HEAP32[((80 + 32912|0))>>2]|0;
    $358 = (($357) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $358;
    $359 = HEAP8[$357>>0]|0;
    $360 = $359&255;
    $362 = $360;
   }
   $361 = $362 << 8;
   $363 = (($348) + ($361))|0;
   $364 = $363 << 16;
   $365 = (($334) + ($364))|0;
   HEAP32[((80 + 136|0))>>2] = $365;
   $366 = HEAP32[((80 + 32916|0))>>2]|0;
   $367 = ($366|0)==(0);
   do {
    if ($367) {
     $368 = HEAP32[((80 + 32920|0))>>2]|0;
     $369 = ($368|0)!=(0);
     if (!($369)) {
      $370 = (_load()|0);
      $371 = ($370|0)==(0);
      if (!($371)) {
       label = 150;
       break;
      }
     }
     $378 = 0;
    } else {
     label = 150;
    }
   } while(0);
   if ((label|0) == 150) {
    $372 = HEAP32[((80 + 32916|0))>>2]|0;
    $373 = (($372) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $373;
    $374 = HEAP32[((80 + 32912|0))>>2]|0;
    $375 = (($374) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $375;
    $376 = HEAP8[$374>>0]|0;
    $377 = $376&255;
    $378 = $377;
   }
   $tmp2 = $378;
   $379 = $tmp2;
   $380 = HEAP32[((80 + 32916|0))>>2]|0;
   $381 = ($380|0)==(0);
   do {
    if ($381) {
     $382 = HEAP32[((80 + 32920|0))>>2]|0;
     $383 = ($382|0)!=(0);
     if (!($383)) {
      $384 = (_load()|0);
      $385 = ($384|0)==(0);
      if (!($385)) {
       label = 155;
       break;
      }
     }
     $393 = 0;
    } else {
     label = 155;
    }
   } while(0);
   if ((label|0) == 155) {
    $386 = HEAP32[((80 + 32916|0))>>2]|0;
    $387 = (($386) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $387;
    $388 = HEAP32[((80 + 32912|0))>>2]|0;
    $389 = (($388) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $389;
    $390 = HEAP8[$388>>0]|0;
    $391 = $390&255;
    $393 = $391;
   }
   $392 = $393 << 8;
   $394 = (($379) + ($392))|0;
   $tmp4 = $394;
   $395 = $tmp4;
   $396 = HEAP32[((80 + 32916|0))>>2]|0;
   $397 = ($396|0)==(0);
   do {
    if ($397) {
     $398 = HEAP32[((80 + 32920|0))>>2]|0;
     $399 = ($398|0)!=(0);
     if (!($399)) {
      $400 = (_load()|0);
      $401 = ($400|0)==(0);
      if (!($401)) {
       label = 160;
       break;
      }
     }
     $408 = 0;
    } else {
     label = 160;
    }
   } while(0);
   if ((label|0) == 160) {
    $402 = HEAP32[((80 + 32916|0))>>2]|0;
    $403 = (($402) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $403;
    $404 = HEAP32[((80 + 32912|0))>>2]|0;
    $405 = (($404) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $405;
    $406 = HEAP8[$404>>0]|0;
    $407 = $406&255;
    $408 = $407;
   }
   $tmp2 = $408;
   $409 = $tmp2;
   $410 = HEAP32[((80 + 32916|0))>>2]|0;
   $411 = ($410|0)==(0);
   do {
    if ($411) {
     $412 = HEAP32[((80 + 32920|0))>>2]|0;
     $413 = ($412|0)!=(0);
     if (!($413)) {
      $414 = (_load()|0);
      $415 = ($414|0)==(0);
      if (!($415)) {
       label = 165;
       break;
      }
     }
     $423 = 0;
    } else {
     label = 165;
    }
   } while(0);
   if ((label|0) == 165) {
    $416 = HEAP32[((80 + 32916|0))>>2]|0;
    $417 = (($416) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $417;
    $418 = HEAP32[((80 + 32912|0))>>2]|0;
    $419 = (($418) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $419;
    $420 = HEAP8[$418>>0]|0;
    $421 = $420&255;
    $423 = $421;
   }
   $422 = $423 << 8;
   $424 = (($409) + ($422))|0;
   $425 = $424 << 16;
   $426 = (($395) + ($425))|0;
   HEAP32[((80 + 140|0))>>2] = $426;
   $427 = HEAP32[((80 + 32916|0))>>2]|0;
   $428 = ($427|0)==(0);
   do {
    if ($428) {
     $429 = HEAP32[((80 + 32920|0))>>2]|0;
     $430 = ($429|0)!=(0);
     if (!($430)) {
      $431 = (_load()|0);
      $432 = ($431|0)==(0);
      if (!($432)) {
       label = 170;
       break;
      }
     }
     $439 = 0;
    } else {
     label = 170;
    }
   } while(0);
   if ((label|0) == 170) {
    $433 = HEAP32[((80 + 32916|0))>>2]|0;
    $434 = (($433) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $434;
    $435 = HEAP32[((80 + 32912|0))>>2]|0;
    $436 = (($435) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $436;
    $437 = HEAP8[$435>>0]|0;
    $438 = $437&255;
    $439 = $438;
   }
   $tmp2 = $439;
   $440 = $tmp2;
   $441 = HEAP32[((80 + 32916|0))>>2]|0;
   $442 = ($441|0)==(0);
   do {
    if ($442) {
     $443 = HEAP32[((80 + 32920|0))>>2]|0;
     $444 = ($443|0)!=(0);
     if (!($444)) {
      $445 = (_load()|0);
      $446 = ($445|0)==(0);
      if (!($446)) {
       label = 175;
       break;
      }
     }
     $454 = 0;
    } else {
     label = 175;
    }
   } while(0);
   if ((label|0) == 175) {
    $447 = HEAP32[((80 + 32916|0))>>2]|0;
    $448 = (($447) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $448;
    $449 = HEAP32[((80 + 32912|0))>>2]|0;
    $450 = (($449) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $450;
    $451 = HEAP8[$449>>0]|0;
    $452 = $451&255;
    $454 = $452;
   }
   $453 = $454 << 8;
   $455 = (($440) + ($453))|0;
   $fname = $455;
   $456 = HEAP32[((80 + 32916|0))>>2]|0;
   $457 = ($456|0)==(0);
   do {
    if ($457) {
     $458 = HEAP32[((80 + 32920|0))>>2]|0;
     $459 = ($458|0)!=(0);
     if (!($459)) {
      $460 = (_load()|0);
      $461 = ($460|0)==(0);
      if (!($461)) {
       label = 180;
       break;
      }
     }
     $468 = 0;
    } else {
     label = 180;
    }
   } while(0);
   if ((label|0) == 180) {
    $462 = HEAP32[((80 + 32916|0))>>2]|0;
    $463 = (($462) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $463;
    $464 = HEAP32[((80 + 32912|0))>>2]|0;
    $465 = (($464) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $465;
    $466 = HEAP8[$464>>0]|0;
    $467 = $466&255;
    $468 = $467;
   }
   $tmp2 = $468;
   $469 = $tmp2;
   $470 = HEAP32[((80 + 32916|0))>>2]|0;
   $471 = ($470|0)==(0);
   do {
    if ($471) {
     $472 = HEAP32[((80 + 32920|0))>>2]|0;
     $473 = ($472|0)!=(0);
     if (!($473)) {
      $474 = (_load()|0);
      $475 = ($474|0)==(0);
      if (!($475)) {
       label = 185;
       break;
      }
     }
     $483 = 0;
    } else {
     label = 185;
    }
   } while(0);
   if ((label|0) == 185) {
    $476 = HEAP32[((80 + 32916|0))>>2]|0;
    $477 = (($476) + -1)|0;
    HEAP32[((80 + 32916|0))>>2] = $477;
    $478 = HEAP32[((80 + 32912|0))>>2]|0;
    $479 = (($478) + 1|0);
    HEAP32[((80 + 32912|0))>>2] = $479;
    $480 = HEAP8[$478>>0]|0;
    $481 = $480&255;
    $483 = $481;
   }
   $482 = $483 << 8;
   $484 = (($469) + ($482))|0;
   $extra = $484;
   $485 = $1;
   $486 = ($485|0)!=(0);
   do {
    if ($486) {
     $487 = HEAP32[((80 + 32920|0))>>2]|0;
     $488 = ($487|0)!=(0);
     if ($488) {
      $0 = -3;
      $882 = $0;
      STACKTOP = sp;return ($882|0);
     }
     $489 = $fname;
     $490 = (($489) + 1)|0;
     $491 = (_alloc(0,$490)|0);
     HEAP32[((80 + 128|0))>>2] = $491;
     $next = $491;
     while(1) {
      $492 = $fname;
      $493 = HEAP32[((80 + 32916|0))>>2]|0;
      $494 = ($492>>>0)>($493>>>0);
      if (!($494)) {
       label = 194;
       break;
      }
      $495 = $next;
      $496 = HEAP32[((80 + 32912|0))>>2]|0;
      $497 = HEAP32[((80 + 32916|0))>>2]|0;
      _memcpy(($495|0),($496|0),($497|0))|0;
      $498 = HEAP32[((80 + 32916|0))>>2]|0;
      $499 = $fname;
      $500 = (($499) - ($498))|0;
      $fname = $500;
      $501 = HEAP32[((80 + 32916|0))>>2]|0;
      $502 = $next;
      $503 = (($502) + ($501)|0);
      $next = $503;
      $504 = (_load()|0);
      $505 = ($504|0)==(0);
      if ($505) {
       break;
      }
     }
     if ((label|0) == 194) {
      $506 = $next;
      $507 = HEAP32[((80 + 32912|0))>>2]|0;
      $508 = $fname;
      _memcpy(($506|0),($507|0),($508|0))|0;
      $509 = $fname;
      $510 = HEAP32[((80 + 32916|0))>>2]|0;
      $511 = (($510) - ($509))|0;
      HEAP32[((80 + 32916|0))>>2] = $511;
      $512 = $fname;
      $513 = HEAP32[((80 + 32912|0))>>2]|0;
      $514 = (($513) + ($512)|0);
      HEAP32[((80 + 32912|0))>>2] = $514;
      $515 = $fname;
      $516 = $next;
      $517 = (($516) + ($515)|0);
      $next = $517;
      $518 = $next;
      HEAP8[$518>>0] = 0;
      break;
     }
     $0 = -3;
     $882 = $0;
     STACKTOP = sp;return ($882|0);
    } else {
     $519 = $fname;
     $togo2 = $519;
     while(1) {
      $520 = $togo2;
      $521 = HEAP32[((80 + 32916|0))>>2]|0;
      $522 = ($520>>>0)>($521>>>0);
      if (!($522)) {
       label = 201;
       break;
      }
      $523 = HEAP32[((80 + 32916|0))>>2]|0;
      $524 = $togo2;
      $525 = (($524) - ($523))|0;
      $togo2 = $525;
      $526 = (_load()|0);
      $527 = ($526|0)==(0);
      if ($527) {
       label = 199;
       break;
      }
     }
     if ((label|0) == 199) {
      $0 = -3;
      $882 = $0;
      STACKTOP = sp;return ($882|0);
     }
     else if ((label|0) == 201) {
      $528 = $togo2;
      $529 = HEAP32[((80 + 32916|0))>>2]|0;
      $530 = (($529) - ($528))|0;
      HEAP32[((80 + 32916|0))>>2] = $530;
      $531 = $togo2;
      $532 = HEAP32[((80 + 32912|0))>>2]|0;
      $533 = (($532) + ($531)|0);
      HEAP32[((80 + 32912|0))>>2] = $533;
      break;
     }
    }
   } while(0);
   $534 = $extra;
   $535 = $1;
   (_read_extra($534,$535)|0);
   $536 = $flags;
   $537 = $536 & 8;
   $538 = $537 >> 3;
   $539 = (2 + ($538))|0;
   HEAP32[((80 + 44|0))>>2] = $539;
   $540 = HEAP32[((80 + 32920|0))>>2]|0;
   $541 = ($540|0)!=(0);
   if ($541) {
    $543 = -3;
   } else {
    $542 = $method;
    $543 = $542;
   }
   $0 = $543;
   $882 = $0;
   STACKTOP = sp;return ($882|0);
  }
 }
 $0 = -5;
 $882 = $0;
 STACKTOP = sp;return ($882|0);
}
function _infchk() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $check = 0, $clen = 0, $cont = 0, $len = 0, $ret = 0, $strm = 0, $tmp2 = 0, $tmp4 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer44 = 0, $vararg_buffer48 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0;
 var $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr43 = 0, $vararg_ptr47 = 0, $vararg_ptr51 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $was = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer55 = sp + 56|0;
 $vararg_buffer52 = sp + 128|0;
 $vararg_buffer48 = sp + 120|0;
 $vararg_buffer44 = sp + 112|0;
 $vararg_buffer40 = sp + 104|0;
 $vararg_buffer36 = sp + 48|0;
 $vararg_buffer32 = sp + 40|0;
 $vararg_buffer28 = sp + 24|0;
 $vararg_buffer24 = sp + 16|0;
 $vararg_buffer20 = sp + 8|0;
 $vararg_buffer16 = sp;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 96|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer1 = sp + 80|0;
 $vararg_buffer = sp + 88|0;
 $strm = sp + 144|0;
 $cont = 0;
 while(1) {
  $0 = HEAP32[((80 + 32916|0))>>2]|0;
  HEAP32[((80 + 32928|0))>>2] = $0;
  HEAP32[((80 + 32932|0))>>2] = 0;
  $1 = HEAP32[((80 + 44|0))>>2]|0;
  $2 = ($1|0)==(1);
  if ($2) {
   $3 = (_adler32(0,(0|0),0)|0);
   $5 = $3;
  } else {
   $4 = (_crc32(0,(0|0),0)|0);
   $5 = $4;
  }
  HEAP32[((80 + 32936|0))>>2] = $5;
  $6 = (($strm) + 32|0);
  HEAP32[$6>>2] = 0;
  $7 = (($strm) + 36|0);
  HEAP32[$7>>2] = 0;
  $8 = (($strm) + 40|0);
  HEAP32[$8>>2] = 0;
  $9 = (_inflateBackInit_(($strm|0),15,(100992|0),(66344|0),56)|0);
  $ret = $9;
  $10 = $ret;
  $11 = ($10|0)==(-4);
  if ($11) {
   HEAP32[$vararg_buffer>>2] = 0;
   _try_throw_(12,(66352|0),($vararg_buffer|0));
  }
  $12 = $ret;
  $13 = ($12|0)!=(0);
  if ($13) {
   HEAP32[$vararg_buffer1>>2] = 0;
   _try_throw_(22,(66376|0),($vararg_buffer1|0));
  }
  $14 = HEAP32[((80 + 32916|0))>>2]|0;
  $15 = (($strm) + 4|0);
  HEAP32[$15>>2] = $14;
  $16 = HEAP32[((80 + 32912|0))>>2]|0;
  HEAP32[$strm>>2] = $16;
  $17 = (_inflateBack(($strm|0),(54|0),(0|0),(40|0),(0|0))|0);
  $ret = $17;
  (_inflateBackEnd(($strm|0))|0);
  $18 = $ret;
  $19 = ($18|0)==(-3);
  if ($19) {
   $20 = HEAP32[((80 + 12|0))>>2]|0;
   $21 = (($strm) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $20;
   $vararg_ptr7 = (($vararg_buffer4) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $22;
   $vararg_ptr8 = (($vararg_buffer4) + 8|0);
   HEAP32[$vararg_ptr8>>2] = 0;
   _try_throw_(33,(133760|0),($vararg_buffer4|0));
  }
  $23 = $ret;
  $24 = ($23|0)==(-5);
  if ($24) {
   $25 = HEAP32[((80 + 12|0))>>2]|0;
   HEAP32[$vararg_buffer9>>2] = $25;
   $vararg_ptr12 = (($vararg_buffer9) + 4|0);
   HEAP32[$vararg_ptr12>>2] = 0;
   _try_throw_(33,(133808|0),($vararg_buffer9|0));
  }
  $26 = $ret;
  $27 = ($26|0)!=(1);
  if ($27) {
   HEAP32[$vararg_buffer13>>2] = 0;
   _try_throw_(22,(66376|0),($vararg_buffer13|0));
  }
  $28 = (($strm) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[((80 + 32916|0))>>2] = $29;
  $30 = HEAP32[$strm>>2]|0;
  HEAP32[((80 + 32912|0))>>2] = $30;
  (_outb(0,0,0)|0);
  $31 = HEAP32[((80 + 32928|0))>>2]|0;
  $32 = HEAP32[((80 + 32916|0))>>2]|0;
  $33 = (($31) - ($32))|0;
  $clen = $33;
  $34 = HEAP32[((80 + 44|0))>>2]|0;
  $35 = ($34|0)>(1);
  if ($35) {
   $36 = HEAP32[((80 + 44|0))>>2]|0;
   $37 = ($36|0)==(3);
   if ($37) {
    $38 = HEAP32[((80 + 32916|0))>>2]|0;
    $39 = ($38|0)==(0);
    do {
     if ($39) {
      $40 = HEAP32[((80 + 32920|0))>>2]|0;
      $41 = ($40|0)!=(0);
      if (!($41)) {
       $42 = (_load()|0);
       $43 = ($42|0)==(0);
       if (!($43)) {
        label = 21;
        break;
       }
      }
      $50 = 0;
     } else {
      label = 21;
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     $44 = HEAP32[((80 + 32916|0))>>2]|0;
     $45 = (($44) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $45;
     $46 = HEAP32[((80 + 32912|0))>>2]|0;
     $47 = (($46) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $47;
     $48 = HEAP8[$46>>0]|0;
     $49 = $48&255;
     $50 = $49;
    }
    $tmp2 = $50;
    $51 = $tmp2;
    $52 = HEAP32[((80 + 32916|0))>>2]|0;
    $53 = ($52|0)==(0);
    do {
     if ($53) {
      $54 = HEAP32[((80 + 32920|0))>>2]|0;
      $55 = ($54|0)!=(0);
      if (!($55)) {
       $56 = (_load()|0);
       $57 = ($56|0)==(0);
       if (!($57)) {
        label = 26;
        break;
       }
      }
      $65 = 0;
     } else {
      label = 26;
     }
    } while(0);
    if ((label|0) == 26) {
     label = 0;
     $58 = HEAP32[((80 + 32916|0))>>2]|0;
     $59 = (($58) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $59;
     $60 = HEAP32[((80 + 32912|0))>>2]|0;
     $61 = (($60) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $61;
     $62 = HEAP8[$60>>0]|0;
     $63 = $62&255;
     $65 = $63;
    }
    $64 = $65 << 8;
    $66 = (($51) + ($64))|0;
    $tmp4 = $66;
    $67 = $tmp4;
    $68 = HEAP32[((80 + 32916|0))>>2]|0;
    $69 = ($68|0)==(0);
    do {
     if ($69) {
      $70 = HEAP32[((80 + 32920|0))>>2]|0;
      $71 = ($70|0)!=(0);
      if (!($71)) {
       $72 = (_load()|0);
       $73 = ($72|0)==(0);
       if (!($73)) {
        label = 31;
        break;
       }
      }
      $80 = 0;
     } else {
      label = 31;
     }
    } while(0);
    if ((label|0) == 31) {
     label = 0;
     $74 = HEAP32[((80 + 32916|0))>>2]|0;
     $75 = (($74) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $75;
     $76 = HEAP32[((80 + 32912|0))>>2]|0;
     $77 = (($76) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $77;
     $78 = HEAP8[$76>>0]|0;
     $79 = $78&255;
     $80 = $79;
    }
    $tmp2 = $80;
    $81 = $tmp2;
    $82 = HEAP32[((80 + 32916|0))>>2]|0;
    $83 = ($82|0)==(0);
    do {
     if ($83) {
      $84 = HEAP32[((80 + 32920|0))>>2]|0;
      $85 = ($84|0)!=(0);
      if (!($85)) {
       $86 = (_load()|0);
       $87 = ($86|0)==(0);
       if (!($87)) {
        label = 36;
        break;
       }
      }
      $95 = 0;
     } else {
      label = 36;
     }
    } while(0);
    if ((label|0) == 36) {
     label = 0;
     $88 = HEAP32[((80 + 32916|0))>>2]|0;
     $89 = (($88) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $89;
     $90 = HEAP32[((80 + 32912|0))>>2]|0;
     $91 = (($90) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $91;
     $92 = HEAP8[$90>>0]|0;
     $93 = $92&255;
     $95 = $93;
    }
    $94 = $95 << 8;
    $96 = (($81) + ($94))|0;
    $97 = $96 << 16;
    $98 = (($67) + ($97))|0;
    HEAP32[((80 + 132|0))>>2] = $98;
    $99 = HEAP32[((80 + 32916|0))>>2]|0;
    $100 = ($99|0)==(0);
    do {
     if ($100) {
      $101 = HEAP32[((80 + 32920|0))>>2]|0;
      $102 = ($101|0)!=(0);
      if (!($102)) {
       $103 = (_load()|0);
       $104 = ($103|0)==(0);
       if (!($104)) {
        label = 41;
        break;
       }
      }
      $111 = 0;
     } else {
      label = 41;
     }
    } while(0);
    if ((label|0) == 41) {
     label = 0;
     $105 = HEAP32[((80 + 32916|0))>>2]|0;
     $106 = (($105) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $106;
     $107 = HEAP32[((80 + 32912|0))>>2]|0;
     $108 = (($107) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $108;
     $109 = HEAP8[$107>>0]|0;
     $110 = $109&255;
     $111 = $110;
    }
    $tmp2 = $111;
    $112 = $tmp2;
    $113 = HEAP32[((80 + 32916|0))>>2]|0;
    $114 = ($113|0)==(0);
    do {
     if ($114) {
      $115 = HEAP32[((80 + 32920|0))>>2]|0;
      $116 = ($115|0)!=(0);
      if (!($116)) {
       $117 = (_load()|0);
       $118 = ($117|0)==(0);
       if (!($118)) {
        label = 46;
        break;
       }
      }
      $126 = 0;
     } else {
      label = 46;
     }
    } while(0);
    if ((label|0) == 46) {
     label = 0;
     $119 = HEAP32[((80 + 32916|0))>>2]|0;
     $120 = (($119) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $120;
     $121 = HEAP32[((80 + 32912|0))>>2]|0;
     $122 = (($121) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $122;
     $123 = HEAP8[$121>>0]|0;
     $124 = $123&255;
     $126 = $124;
    }
    $125 = $126 << 8;
    $127 = (($112) + ($125))|0;
    $tmp4 = $127;
    $128 = $tmp4;
    $129 = HEAP32[((80 + 32916|0))>>2]|0;
    $130 = ($129|0)==(0);
    do {
     if ($130) {
      $131 = HEAP32[((80 + 32920|0))>>2]|0;
      $132 = ($131|0)!=(0);
      if (!($132)) {
       $133 = (_load()|0);
       $134 = ($133|0)==(0);
       if (!($134)) {
        label = 51;
        break;
       }
      }
      $141 = 0;
     } else {
      label = 51;
     }
    } while(0);
    if ((label|0) == 51) {
     label = 0;
     $135 = HEAP32[((80 + 32916|0))>>2]|0;
     $136 = (($135) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $136;
     $137 = HEAP32[((80 + 32912|0))>>2]|0;
     $138 = (($137) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $138;
     $139 = HEAP8[$137>>0]|0;
     $140 = $139&255;
     $141 = $140;
    }
    $tmp2 = $141;
    $142 = $tmp2;
    $143 = HEAP32[((80 + 32916|0))>>2]|0;
    $144 = ($143|0)==(0);
    do {
     if ($144) {
      $145 = HEAP32[((80 + 32920|0))>>2]|0;
      $146 = ($145|0)!=(0);
      if (!($146)) {
       $147 = (_load()|0);
       $148 = ($147|0)==(0);
       if (!($148)) {
        label = 56;
        break;
       }
      }
      $156 = 0;
     } else {
      label = 56;
     }
    } while(0);
    if ((label|0) == 56) {
     label = 0;
     $149 = HEAP32[((80 + 32916|0))>>2]|0;
     $150 = (($149) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $150;
     $151 = HEAP32[((80 + 32912|0))>>2]|0;
     $152 = (($151) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $152;
     $153 = HEAP8[$151>>0]|0;
     $154 = $153&255;
     $156 = $154;
    }
    $155 = $156 << 8;
    $157 = (($142) + ($155))|0;
    $158 = $157 << 16;
    $159 = (($128) + ($158))|0;
    HEAP32[((80 + 136|0))>>2] = $159;
    $160 = HEAP32[((80 + 32916|0))>>2]|0;
    $161 = ($160|0)==(0);
    do {
     if ($161) {
      $162 = HEAP32[((80 + 32920|0))>>2]|0;
      $163 = ($162|0)!=(0);
      if (!($163)) {
       $164 = (_load()|0);
       $165 = ($164|0)==(0);
       if (!($165)) {
        label = 61;
        break;
       }
      }
      $172 = 0;
     } else {
      label = 61;
     }
    } while(0);
    if ((label|0) == 61) {
     label = 0;
     $166 = HEAP32[((80 + 32916|0))>>2]|0;
     $167 = (($166) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $167;
     $168 = HEAP32[((80 + 32912|0))>>2]|0;
     $169 = (($168) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $169;
     $170 = HEAP8[$168>>0]|0;
     $171 = $170&255;
     $172 = $171;
    }
    $tmp2 = $172;
    $173 = $tmp2;
    $174 = HEAP32[((80 + 32916|0))>>2]|0;
    $175 = ($174|0)==(0);
    do {
     if ($175) {
      $176 = HEAP32[((80 + 32920|0))>>2]|0;
      $177 = ($176|0)!=(0);
      if (!($177)) {
       $178 = (_load()|0);
       $179 = ($178|0)==(0);
       if (!($179)) {
        label = 66;
        break;
       }
      }
      $187 = 0;
     } else {
      label = 66;
     }
    } while(0);
    if ((label|0) == 66) {
     label = 0;
     $180 = HEAP32[((80 + 32916|0))>>2]|0;
     $181 = (($180) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $181;
     $182 = HEAP32[((80 + 32912|0))>>2]|0;
     $183 = (($182) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $183;
     $184 = HEAP8[$182>>0]|0;
     $185 = $184&255;
     $187 = $185;
    }
    $186 = $187 << 8;
    $188 = (($173) + ($186))|0;
    $tmp4 = $188;
    $189 = $tmp4;
    $190 = HEAP32[((80 + 32916|0))>>2]|0;
    $191 = ($190|0)==(0);
    do {
     if ($191) {
      $192 = HEAP32[((80 + 32920|0))>>2]|0;
      $193 = ($192|0)!=(0);
      if (!($193)) {
       $194 = (_load()|0);
       $195 = ($194|0)==(0);
       if (!($195)) {
        label = 71;
        break;
       }
      }
      $202 = 0;
     } else {
      label = 71;
     }
    } while(0);
    if ((label|0) == 71) {
     label = 0;
     $196 = HEAP32[((80 + 32916|0))>>2]|0;
     $197 = (($196) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $197;
     $198 = HEAP32[((80 + 32912|0))>>2]|0;
     $199 = (($198) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $199;
     $200 = HEAP8[$198>>0]|0;
     $201 = $200&255;
     $202 = $201;
    }
    $tmp2 = $202;
    $203 = $tmp2;
    $204 = HEAP32[((80 + 32916|0))>>2]|0;
    $205 = ($204|0)==(0);
    do {
     if ($205) {
      $206 = HEAP32[((80 + 32920|0))>>2]|0;
      $207 = ($206|0)!=(0);
      if (!($207)) {
       $208 = (_load()|0);
       $209 = ($208|0)==(0);
       if (!($209)) {
        label = 76;
        break;
       }
      }
      $217 = 0;
     } else {
      label = 76;
     }
    } while(0);
    if ((label|0) == 76) {
     label = 0;
     $210 = HEAP32[((80 + 32916|0))>>2]|0;
     $211 = (($210) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $211;
     $212 = HEAP32[((80 + 32912|0))>>2]|0;
     $213 = (($212) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $213;
     $214 = HEAP8[$212>>0]|0;
     $215 = $214&255;
     $217 = $215;
    }
    $216 = $217 << 8;
    $218 = (($203) + ($216))|0;
    $219 = $218 << 16;
    $220 = (($189) + ($219))|0;
    HEAP32[((80 + 140|0))>>2] = $220;
    $221 = HEAP32[((80 + 32920|0))>>2]|0;
    $222 = ($221|0)!=(0);
    if ($222) {
     $223 = HEAP32[((80 + 12|0))>>2]|0;
     HEAP32[$vararg_buffer16>>2] = $223;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAP32[$vararg_ptr19>>2] = 0;
     _try_throw_(33,(133856|0),($vararg_buffer16|0));
    }
    $224 = HEAP32[((80 + 132|0))>>2]|0;
    $225 = HEAP32[((80 + 32936|0))>>2]|0;
    $226 = ($224|0)!=($225|0);
    if ($226) {
     $227 = HEAP32[((80 + 132|0))>>2]|0;
     $228 = ($227|0)!=(134695760);
     if ($228) {
      label = 82;
     } else {
      $229 = HEAP32[((80 + 136|0))>>2]|0;
      $230 = HEAP32[((80 + 32936|0))>>2]|0;
      $231 = ($229|0)!=($230|0);
      if ($231) {
       label = 82;
      }
     }
     if ((label|0) == 82) {
      label = 0;
      $232 = HEAP32[((80 + 12|0))>>2]|0;
      HEAP32[$vararg_buffer20>>2] = $232;
      $vararg_ptr23 = (($vararg_buffer20) + 4|0);
      HEAP32[$vararg_ptr23>>2] = 0;
      _try_throw_(33,(133896|0),($vararg_buffer20|0));
     }
     $233 = HEAP32[((80 + 136|0))>>2]|0;
     HEAP32[((80 + 132|0))>>2] = $233;
     $234 = HEAP32[((80 + 140|0))>>2]|0;
     HEAP32[((80 + 136|0))>>2] = $234;
     $235 = HEAP32[((80 + 32916|0))>>2]|0;
     $236 = ($235|0)==(0);
     do {
      if ($236) {
       $237 = HEAP32[((80 + 32920|0))>>2]|0;
       $238 = ($237|0)!=(0);
       if (!($238)) {
        $239 = (_load()|0);
        $240 = ($239|0)==(0);
        if (!($240)) {
         label = 87;
         break;
        }
       }
       $247 = 0;
      } else {
       label = 87;
      }
     } while(0);
     if ((label|0) == 87) {
      label = 0;
      $241 = HEAP32[((80 + 32916|0))>>2]|0;
      $242 = (($241) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $242;
      $243 = HEAP32[((80 + 32912|0))>>2]|0;
      $244 = (($243) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $244;
      $245 = HEAP8[$243>>0]|0;
      $246 = $245&255;
      $247 = $246;
     }
     $tmp2 = $247;
     $248 = $tmp2;
     $249 = HEAP32[((80 + 32916|0))>>2]|0;
     $250 = ($249|0)==(0);
     do {
      if ($250) {
       $251 = HEAP32[((80 + 32920|0))>>2]|0;
       $252 = ($251|0)!=(0);
       if (!($252)) {
        $253 = (_load()|0);
        $254 = ($253|0)==(0);
        if (!($254)) {
         label = 92;
         break;
        }
       }
       $262 = 0;
      } else {
       label = 92;
      }
     } while(0);
     if ((label|0) == 92) {
      label = 0;
      $255 = HEAP32[((80 + 32916|0))>>2]|0;
      $256 = (($255) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $256;
      $257 = HEAP32[((80 + 32912|0))>>2]|0;
      $258 = (($257) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $258;
      $259 = HEAP8[$257>>0]|0;
      $260 = $259&255;
      $262 = $260;
     }
     $261 = $262 << 8;
     $263 = (($248) + ($261))|0;
     $tmp4 = $263;
     $264 = $tmp4;
     $265 = HEAP32[((80 + 32916|0))>>2]|0;
     $266 = ($265|0)==(0);
     do {
      if ($266) {
       $267 = HEAP32[((80 + 32920|0))>>2]|0;
       $268 = ($267|0)!=(0);
       if (!($268)) {
        $269 = (_load()|0);
        $270 = ($269|0)==(0);
        if (!($270)) {
         label = 97;
         break;
        }
       }
       $277 = 0;
      } else {
       label = 97;
      }
     } while(0);
     if ((label|0) == 97) {
      label = 0;
      $271 = HEAP32[((80 + 32916|0))>>2]|0;
      $272 = (($271) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $272;
      $273 = HEAP32[((80 + 32912|0))>>2]|0;
      $274 = (($273) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $274;
      $275 = HEAP8[$273>>0]|0;
      $276 = $275&255;
      $277 = $276;
     }
     $tmp2 = $277;
     $278 = $tmp2;
     $279 = HEAP32[((80 + 32916|0))>>2]|0;
     $280 = ($279|0)==(0);
     do {
      if ($280) {
       $281 = HEAP32[((80 + 32920|0))>>2]|0;
       $282 = ($281|0)!=(0);
       if (!($282)) {
        $283 = (_load()|0);
        $284 = ($283|0)==(0);
        if (!($284)) {
         label = 102;
         break;
        }
       }
       $292 = 0;
      } else {
       label = 102;
      }
     } while(0);
     if ((label|0) == 102) {
      label = 0;
      $285 = HEAP32[((80 + 32916|0))>>2]|0;
      $286 = (($285) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $286;
      $287 = HEAP32[((80 + 32912|0))>>2]|0;
      $288 = (($287) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $288;
      $289 = HEAP8[$287>>0]|0;
      $290 = $289&255;
      $292 = $290;
     }
     $291 = $292 << 8;
     $293 = (($278) + ($291))|0;
     $294 = $293 << 16;
     $295 = (($264) + ($294))|0;
     HEAP32[((80 + 140|0))>>2] = $295;
    } else {
     $296 = HEAP32[((80 + 132|0))>>2]|0;
     $297 = ($296|0)==(134695760);
     do {
      if ($297) {
       $298 = HEAP32[((80 + 136|0))>>2]|0;
       $299 = HEAP32[((80 + 132|0))>>2]|0;
       $300 = ($298|0)==($299|0);
       if (!($300)) {
        break;
       }
       $301 = $clen;
       $302 = HEAP32[((80 + 132|0))>>2]|0;
       $303 = ($301|0)!=($302|0);
       if (!($303)) {
        $304 = HEAP32[((80 + 140|0))>>2]|0;
        $305 = HEAP32[((80 + 132|0))>>2]|0;
        $306 = ($304|0)==($305|0);
        if (!($306)) {
         break;
        }
       }
       $307 = HEAP32[((80 + 136|0))>>2]|0;
       HEAP32[((80 + 132|0))>>2] = $307;
       $308 = HEAP32[((80 + 140|0))>>2]|0;
       HEAP32[((80 + 136|0))>>2] = $308;
       $309 = HEAP32[((80 + 32916|0))>>2]|0;
       $310 = ($309|0)==(0);
       do {
        if ($310) {
         $311 = HEAP32[((80 + 32920|0))>>2]|0;
         $312 = ($311|0)!=(0);
         if (!($312)) {
          $313 = (_load()|0);
          $314 = ($313|0)==(0);
          if (!($314)) {
           label = 112;
           break;
          }
         }
         $321 = 0;
        } else {
         label = 112;
        }
       } while(0);
       if ((label|0) == 112) {
        label = 0;
        $315 = HEAP32[((80 + 32916|0))>>2]|0;
        $316 = (($315) + -1)|0;
        HEAP32[((80 + 32916|0))>>2] = $316;
        $317 = HEAP32[((80 + 32912|0))>>2]|0;
        $318 = (($317) + 1|0);
        HEAP32[((80 + 32912|0))>>2] = $318;
        $319 = HEAP8[$317>>0]|0;
        $320 = $319&255;
        $321 = $320;
       }
       $tmp2 = $321;
       $322 = $tmp2;
       $323 = HEAP32[((80 + 32916|0))>>2]|0;
       $324 = ($323|0)==(0);
       do {
        if ($324) {
         $325 = HEAP32[((80 + 32920|0))>>2]|0;
         $326 = ($325|0)!=(0);
         if (!($326)) {
          $327 = (_load()|0);
          $328 = ($327|0)==(0);
          if (!($328)) {
           label = 117;
           break;
          }
         }
         $336 = 0;
        } else {
         label = 117;
        }
       } while(0);
       if ((label|0) == 117) {
        label = 0;
        $329 = HEAP32[((80 + 32916|0))>>2]|0;
        $330 = (($329) + -1)|0;
        HEAP32[((80 + 32916|0))>>2] = $330;
        $331 = HEAP32[((80 + 32912|0))>>2]|0;
        $332 = (($331) + 1|0);
        HEAP32[((80 + 32912|0))>>2] = $332;
        $333 = HEAP8[$331>>0]|0;
        $334 = $333&255;
        $336 = $334;
       }
       $335 = $336 << 8;
       $337 = (($322) + ($335))|0;
       $tmp4 = $337;
       $338 = $tmp4;
       $339 = HEAP32[((80 + 32916|0))>>2]|0;
       $340 = ($339|0)==(0);
       do {
        if ($340) {
         $341 = HEAP32[((80 + 32920|0))>>2]|0;
         $342 = ($341|0)!=(0);
         if (!($342)) {
          $343 = (_load()|0);
          $344 = ($343|0)==(0);
          if (!($344)) {
           label = 122;
           break;
          }
         }
         $351 = 0;
        } else {
         label = 122;
        }
       } while(0);
       if ((label|0) == 122) {
        label = 0;
        $345 = HEAP32[((80 + 32916|0))>>2]|0;
        $346 = (($345) + -1)|0;
        HEAP32[((80 + 32916|0))>>2] = $346;
        $347 = HEAP32[((80 + 32912|0))>>2]|0;
        $348 = (($347) + 1|0);
        HEAP32[((80 + 32912|0))>>2] = $348;
        $349 = HEAP8[$347>>0]|0;
        $350 = $349&255;
        $351 = $350;
       }
       $tmp2 = $351;
       $352 = $tmp2;
       $353 = HEAP32[((80 + 32916|0))>>2]|0;
       $354 = ($353|0)==(0);
       do {
        if ($354) {
         $355 = HEAP32[((80 + 32920|0))>>2]|0;
         $356 = ($355|0)!=(0);
         if (!($356)) {
          $357 = (_load()|0);
          $358 = ($357|0)==(0);
          if (!($358)) {
           label = 127;
           break;
          }
         }
         $366 = 0;
        } else {
         label = 127;
        }
       } while(0);
       if ((label|0) == 127) {
        label = 0;
        $359 = HEAP32[((80 + 32916|0))>>2]|0;
        $360 = (($359) + -1)|0;
        HEAP32[((80 + 32916|0))>>2] = $360;
        $361 = HEAP32[((80 + 32912|0))>>2]|0;
        $362 = (($361) + 1|0);
        HEAP32[((80 + 32912|0))>>2] = $362;
        $363 = HEAP8[$361>>0]|0;
        $364 = $363&255;
        $366 = $364;
       }
       $365 = $366 << 8;
       $367 = (($352) + ($365))|0;
       $368 = $367 << 16;
       $369 = (($338) + ($368))|0;
       HEAP32[((80 + 140|0))>>2] = $369;
      }
     } while(0);
    }
    $370 = HEAP32[((80 + 140|0))>>2]|0;
    $371 = HEAP32[((80 + 32932|0))>>2]|0;
    $372 = ($370|0)!=($371|0);
    if ($372) {
     $373 = HEAP32[((80 + 32916|0))>>2]|0;
     $374 = ($373|0)==(0);
     do {
      if ($374) {
       $375 = HEAP32[((80 + 32920|0))>>2]|0;
       $376 = ($375|0)!=(0);
       if (!($376)) {
        $377 = (_load()|0);
        $378 = ($377|0)==(0);
        if (!($378)) {
         label = 135;
         break;
        }
       }
       $385 = 0;
      } else {
       label = 135;
      }
     } while(0);
     if ((label|0) == 135) {
      label = 0;
      $379 = HEAP32[((80 + 32916|0))>>2]|0;
      $380 = (($379) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $380;
      $381 = HEAP32[((80 + 32912|0))>>2]|0;
      $382 = (($381) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $382;
      $383 = HEAP8[$381>>0]|0;
      $384 = $383&255;
      $385 = $384;
     }
     $tmp2 = $385;
     $386 = $tmp2;
     $387 = HEAP32[((80 + 32916|0))>>2]|0;
     $388 = ($387|0)==(0);
     do {
      if ($388) {
       $389 = HEAP32[((80 + 32920|0))>>2]|0;
       $390 = ($389|0)!=(0);
       if (!($390)) {
        $391 = (_load()|0);
        $392 = ($391|0)==(0);
        if (!($392)) {
         label = 140;
         break;
        }
       }
       $400 = 0;
      } else {
       label = 140;
      }
     } while(0);
     if ((label|0) == 140) {
      label = 0;
      $393 = HEAP32[((80 + 32916|0))>>2]|0;
      $394 = (($393) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $394;
      $395 = HEAP32[((80 + 32912|0))>>2]|0;
      $396 = (($395) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $396;
      $397 = HEAP8[$395>>0]|0;
      $398 = $397&255;
      $400 = $398;
     }
     $399 = $400 << 8;
     $401 = (($386) + ($399))|0;
     $tmp4 = $401;
     $402 = $tmp4;
     $403 = HEAP32[((80 + 32916|0))>>2]|0;
     $404 = ($403|0)==(0);
     do {
      if ($404) {
       $405 = HEAP32[((80 + 32920|0))>>2]|0;
       $406 = ($405|0)!=(0);
       if (!($406)) {
        $407 = (_load()|0);
        $408 = ($407|0)==(0);
        if (!($408)) {
         label = 145;
         break;
        }
       }
       $415 = 0;
      } else {
       label = 145;
      }
     } while(0);
     if ((label|0) == 145) {
      label = 0;
      $409 = HEAP32[((80 + 32916|0))>>2]|0;
      $410 = (($409) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $410;
      $411 = HEAP32[((80 + 32912|0))>>2]|0;
      $412 = (($411) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $412;
      $413 = HEAP8[$411>>0]|0;
      $414 = $413&255;
      $415 = $414;
     }
     $tmp2 = $415;
     $416 = $tmp2;
     $417 = HEAP32[((80 + 32916|0))>>2]|0;
     $418 = ($417|0)==(0);
     do {
      if ($418) {
       $419 = HEAP32[((80 + 32920|0))>>2]|0;
       $420 = ($419|0)!=(0);
       if (!($420)) {
        $421 = (_load()|0);
        $422 = ($421|0)==(0);
        if (!($422)) {
         label = 150;
         break;
        }
       }
       $430 = 0;
      } else {
       label = 150;
      }
     } while(0);
     if ((label|0) == 150) {
      label = 0;
      $423 = HEAP32[((80 + 32916|0))>>2]|0;
      $424 = (($423) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $424;
      $425 = HEAP32[((80 + 32912|0))>>2]|0;
      $426 = (($425) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $426;
      $427 = HEAP8[$425>>0]|0;
      $428 = $427&255;
      $430 = $428;
     }
     $429 = $430 << 8;
     $431 = (($416) + ($429))|0;
     $432 = $431 << 16;
     $433 = (($402) + ($432))|0;
     HEAP32[((80 + 140|0))>>2] = $433;
     $434 = HEAP32[((80 + 32916|0))>>2]|0;
     $435 = ($434|0)==(0);
     do {
      if ($435) {
       $436 = HEAP32[((80 + 32920|0))>>2]|0;
       $437 = ($436|0)!=(0);
       if (!($437)) {
        $438 = (_load()|0);
        $439 = ($438|0)==(0);
        if (!($439)) {
         label = 155;
         break;
        }
       }
       $446 = 0;
      } else {
       label = 155;
      }
     } while(0);
     if ((label|0) == 155) {
      label = 0;
      $440 = HEAP32[((80 + 32916|0))>>2]|0;
      $441 = (($440) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $441;
      $442 = HEAP32[((80 + 32912|0))>>2]|0;
      $443 = (($442) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $443;
      $444 = HEAP8[$442>>0]|0;
      $445 = $444&255;
      $446 = $445;
     }
     $tmp2 = $446;
     $447 = $tmp2;
     $448 = HEAP32[((80 + 32916|0))>>2]|0;
     $449 = ($448|0)==(0);
     do {
      if ($449) {
       $450 = HEAP32[((80 + 32920|0))>>2]|0;
       $451 = ($450|0)!=(0);
       if (!($451)) {
        $452 = (_load()|0);
        $453 = ($452|0)==(0);
        if (!($453)) {
         label = 160;
         break;
        }
       }
       $461 = 0;
      } else {
       label = 160;
      }
     } while(0);
     if ((label|0) == 160) {
      label = 0;
      $454 = HEAP32[((80 + 32916|0))>>2]|0;
      $455 = (($454) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $455;
      $456 = HEAP32[((80 + 32912|0))>>2]|0;
      $457 = (($456) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $457;
      $458 = HEAP8[$456>>0]|0;
      $459 = $458&255;
      $461 = $459;
     }
     $460 = $461 << 8;
     $462 = (($447) + ($460))|0;
     $tmp4 = $462;
     $463 = HEAP32[((80 + 32916|0))>>2]|0;
     $464 = ($463|0)==(0);
     do {
      if ($464) {
       $465 = HEAP32[((80 + 32920|0))>>2]|0;
       $466 = ($465|0)!=(0);
       if (!($466)) {
        $467 = (_load()|0);
        $468 = ($467|0)==(0);
        if (!($468)) {
         label = 165;
         break;
        }
       }
       $475 = 0;
      } else {
       label = 165;
      }
     } while(0);
     if ((label|0) == 165) {
      label = 0;
      $469 = HEAP32[((80 + 32916|0))>>2]|0;
      $470 = (($469) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $470;
      $471 = HEAP32[((80 + 32912|0))>>2]|0;
      $472 = (($471) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $472;
      $473 = HEAP8[$471>>0]|0;
      $474 = $473&255;
      $475 = $474;
     }
     $tmp2 = $475;
     $476 = HEAP32[((80 + 32916|0))>>2]|0;
     $477 = ($476|0)==(0);
     do {
      if ($477) {
       $478 = HEAP32[((80 + 32920|0))>>2]|0;
       $479 = ($478|0)!=(0);
       if (!($479)) {
        $480 = (_load()|0);
        $481 = ($480|0)==(0);
        if (!($481)) {
         label = 170;
         break;
        }
       }
      } else {
       label = 170;
      }
     } while(0);
     if ((label|0) == 170) {
      label = 0;
      $482 = HEAP32[((80 + 32916|0))>>2]|0;
      $483 = (($482) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $483;
      $484 = HEAP32[((80 + 32912|0))>>2]|0;
      $485 = (($484) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $485;
     }
    }
    $486 = HEAP32[((80 + 32920|0))>>2]|0;
    $487 = ($486|0)!=(0);
    if ($487) {
     $488 = HEAP32[((80 + 12|0))>>2]|0;
     HEAP32[$vararg_buffer24>>2] = $488;
     $vararg_ptr27 = (($vararg_buffer24) + 4|0);
     HEAP32[$vararg_ptr27>>2] = 0;
     _try_throw_(33,(133856|0),($vararg_buffer24|0));
    }
   }
   $489 = HEAP32[((80 + 136|0))>>2]|0;
   $490 = $clen;
   $491 = ($489|0)!=($490|0);
   if ($491) {
    label = 177;
   } else {
    $492 = HEAP32[((80 + 140|0))>>2]|0;
    $493 = HEAP32[((80 + 32932|0))>>2]|0;
    $494 = ($492|0)!=($493|0);
    if ($494) {
     label = 177;
    }
   }
   if ((label|0) == 177) {
    label = 0;
    $495 = HEAP32[((80 + 12|0))>>2]|0;
    HEAP32[$vararg_buffer28>>2] = $495;
    $vararg_ptr31 = (($vararg_buffer28) + 4|0);
    HEAP32[$vararg_ptr31>>2] = 0;
    _try_throw_(33,(133936|0),($vararg_buffer28|0));
   }
   $496 = HEAP32[((80 + 132|0))>>2]|0;
   $check = $496;
  } else {
   $497 = HEAP32[((80 + 44|0))>>2]|0;
   $498 = ($497|0)==(1);
   if ($498) {
    $499 = HEAP32[((80 + 32916|0))>>2]|0;
    $500 = ($499|0)==(0);
    do {
     if ($500) {
      $501 = HEAP32[((80 + 32920|0))>>2]|0;
      $502 = ($501|0)!=(0);
      if (!($502)) {
       $503 = (_load()|0);
       $504 = ($503|0)==(0);
       if (!($504)) {
        label = 184;
        break;
       }
      }
      $512 = 0;
     } else {
      label = 184;
     }
    } while(0);
    if ((label|0) == 184) {
     label = 0;
     $505 = HEAP32[((80 + 32916|0))>>2]|0;
     $506 = (($505) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $506;
     $507 = HEAP32[((80 + 32912|0))>>2]|0;
     $508 = (($507) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $508;
     $509 = HEAP8[$507>>0]|0;
     $510 = $509&255;
     $512 = $510;
    }
    $511 = $512 << 24;
    $check = $511;
    $513 = HEAP32[((80 + 32916|0))>>2]|0;
    $514 = ($513|0)==(0);
    do {
     if ($514) {
      $515 = HEAP32[((80 + 32920|0))>>2]|0;
      $516 = ($515|0)!=(0);
      if (!($516)) {
       $517 = (_load()|0);
       $518 = ($517|0)==(0);
       if (!($518)) {
        label = 189;
        break;
       }
      }
      $526 = 0;
     } else {
      label = 189;
     }
    } while(0);
    if ((label|0) == 189) {
     label = 0;
     $519 = HEAP32[((80 + 32916|0))>>2]|0;
     $520 = (($519) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $520;
     $521 = HEAP32[((80 + 32912|0))>>2]|0;
     $522 = (($521) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $522;
     $523 = HEAP8[$521>>0]|0;
     $524 = $523&255;
     $526 = $524;
    }
    $525 = $526 << 16;
    $527 = $check;
    $528 = (($527) + ($525))|0;
    $check = $528;
    $529 = HEAP32[((80 + 32916|0))>>2]|0;
    $530 = ($529|0)==(0);
    do {
     if ($530) {
      $531 = HEAP32[((80 + 32920|0))>>2]|0;
      $532 = ($531|0)!=(0);
      if (!($532)) {
       $533 = (_load()|0);
       $534 = ($533|0)==(0);
       if (!($534)) {
        label = 194;
        break;
       }
      }
      $542 = 0;
     } else {
      label = 194;
     }
    } while(0);
    if ((label|0) == 194) {
     label = 0;
     $535 = HEAP32[((80 + 32916|0))>>2]|0;
     $536 = (($535) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $536;
     $537 = HEAP32[((80 + 32912|0))>>2]|0;
     $538 = (($537) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $538;
     $539 = HEAP8[$537>>0]|0;
     $540 = $539&255;
     $542 = $540;
    }
    $541 = $542 << 8;
    $543 = $check;
    $544 = (($543) + ($541))|0;
    $check = $544;
    $545 = HEAP32[((80 + 32916|0))>>2]|0;
    $546 = ($545|0)==(0);
    do {
     if ($546) {
      $547 = HEAP32[((80 + 32920|0))>>2]|0;
      $548 = ($547|0)!=(0);
      if (!($548)) {
       $549 = (_load()|0);
       $550 = ($549|0)==(0);
       if (!($550)) {
        label = 199;
        break;
       }
      }
      $559 = 0;
     } else {
      label = 199;
     }
    } while(0);
    if ((label|0) == 199) {
     label = 0;
     $551 = HEAP32[((80 + 32916|0))>>2]|0;
     $552 = (($551) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $552;
     $553 = HEAP32[((80 + 32912|0))>>2]|0;
     $554 = (($553) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $554;
     $555 = HEAP8[$553>>0]|0;
     $556 = $555&255;
     $559 = $556;
    }
    $557 = $check;
    $558 = (($557) + ($559))|0;
    $check = $558;
    $560 = HEAP32[((80 + 32920|0))>>2]|0;
    $561 = ($560|0)!=(0);
    if ($561) {
     $562 = HEAP32[((80 + 12|0))>>2]|0;
     HEAP32[$vararg_buffer32>>2] = $562;
     $vararg_ptr35 = (($vararg_buffer32) + 4|0);
     HEAP32[$vararg_ptr35>>2] = 0;
     _try_throw_(33,(133976|0),($vararg_buffer32|0));
    }
    $563 = $check;
    $564 = HEAP32[((80 + 32936|0))>>2]|0;
    $565 = ($563|0)!=($564|0);
    if ($565) {
     $566 = HEAP32[((80 + 12|0))>>2]|0;
     HEAP32[$vararg_buffer36>>2] = $566;
     $vararg_ptr39 = (($vararg_buffer36) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 0;
     _try_throw_(33,(134016|0),($vararg_buffer36|0));
    }
   } else {
    $567 = HEAP32[((80 + 32916|0))>>2]|0;
    $568 = ($567|0)==(0);
    do {
     if ($568) {
      $569 = HEAP32[((80 + 32920|0))>>2]|0;
      $570 = ($569|0)!=(0);
      if (!($570)) {
       $571 = (_load()|0);
       $572 = ($571|0)==(0);
       if (!($572)) {
        label = 209;
        break;
       }
      }
      $579 = 0;
     } else {
      label = 209;
     }
    } while(0);
    if ((label|0) == 209) {
     label = 0;
     $573 = HEAP32[((80 + 32916|0))>>2]|0;
     $574 = (($573) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $574;
     $575 = HEAP32[((80 + 32912|0))>>2]|0;
     $576 = (($575) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $576;
     $577 = HEAP8[$575>>0]|0;
     $578 = $577&255;
     $579 = $578;
    }
    $tmp2 = $579;
    $580 = $tmp2;
    $581 = HEAP32[((80 + 32916|0))>>2]|0;
    $582 = ($581|0)==(0);
    do {
     if ($582) {
      $583 = HEAP32[((80 + 32920|0))>>2]|0;
      $584 = ($583|0)!=(0);
      if (!($584)) {
       $585 = (_load()|0);
       $586 = ($585|0)==(0);
       if (!($586)) {
        label = 214;
        break;
       }
      }
      $594 = 0;
     } else {
      label = 214;
     }
    } while(0);
    if ((label|0) == 214) {
     label = 0;
     $587 = HEAP32[((80 + 32916|0))>>2]|0;
     $588 = (($587) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $588;
     $589 = HEAP32[((80 + 32912|0))>>2]|0;
     $590 = (($589) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $590;
     $591 = HEAP8[$589>>0]|0;
     $592 = $591&255;
     $594 = $592;
    }
    $593 = $594 << 8;
    $595 = (($580) + ($593))|0;
    $tmp4 = $595;
    $596 = $tmp4;
    $597 = HEAP32[((80 + 32916|0))>>2]|0;
    $598 = ($597|0)==(0);
    do {
     if ($598) {
      $599 = HEAP32[((80 + 32920|0))>>2]|0;
      $600 = ($599|0)!=(0);
      if (!($600)) {
       $601 = (_load()|0);
       $602 = ($601|0)==(0);
       if (!($602)) {
        label = 219;
        break;
       }
      }
      $609 = 0;
     } else {
      label = 219;
     }
    } while(0);
    if ((label|0) == 219) {
     label = 0;
     $603 = HEAP32[((80 + 32916|0))>>2]|0;
     $604 = (($603) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $604;
     $605 = HEAP32[((80 + 32912|0))>>2]|0;
     $606 = (($605) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $606;
     $607 = HEAP8[$605>>0]|0;
     $608 = $607&255;
     $609 = $608;
    }
    $tmp2 = $609;
    $610 = $tmp2;
    $611 = HEAP32[((80 + 32916|0))>>2]|0;
    $612 = ($611|0)==(0);
    do {
     if ($612) {
      $613 = HEAP32[((80 + 32920|0))>>2]|0;
      $614 = ($613|0)!=(0);
      if (!($614)) {
       $615 = (_load()|0);
       $616 = ($615|0)==(0);
       if (!($616)) {
        label = 224;
        break;
       }
      }
      $624 = 0;
     } else {
      label = 224;
     }
    } while(0);
    if ((label|0) == 224) {
     label = 0;
     $617 = HEAP32[((80 + 32916|0))>>2]|0;
     $618 = (($617) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $618;
     $619 = HEAP32[((80 + 32912|0))>>2]|0;
     $620 = (($619) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $620;
     $621 = HEAP8[$619>>0]|0;
     $622 = $621&255;
     $624 = $622;
    }
    $623 = $624 << 8;
    $625 = (($610) + ($623))|0;
    $626 = $625 << 16;
    $627 = (($596) + ($626))|0;
    $check = $627;
    $628 = HEAP32[((80 + 32916|0))>>2]|0;
    $629 = ($628|0)==(0);
    do {
     if ($629) {
      $630 = HEAP32[((80 + 32920|0))>>2]|0;
      $631 = ($630|0)!=(0);
      if (!($631)) {
       $632 = (_load()|0);
       $633 = ($632|0)==(0);
       if (!($633)) {
        label = 229;
        break;
       }
      }
      $640 = 0;
     } else {
      label = 229;
     }
    } while(0);
    if ((label|0) == 229) {
     label = 0;
     $634 = HEAP32[((80 + 32916|0))>>2]|0;
     $635 = (($634) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $635;
     $636 = HEAP32[((80 + 32912|0))>>2]|0;
     $637 = (($636) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $637;
     $638 = HEAP8[$636>>0]|0;
     $639 = $638&255;
     $640 = $639;
    }
    $tmp2 = $640;
    $641 = $tmp2;
    $642 = HEAP32[((80 + 32916|0))>>2]|0;
    $643 = ($642|0)==(0);
    do {
     if ($643) {
      $644 = HEAP32[((80 + 32920|0))>>2]|0;
      $645 = ($644|0)!=(0);
      if (!($645)) {
       $646 = (_load()|0);
       $647 = ($646|0)==(0);
       if (!($647)) {
        label = 234;
        break;
       }
      }
      $655 = 0;
     } else {
      label = 234;
     }
    } while(0);
    if ((label|0) == 234) {
     label = 0;
     $648 = HEAP32[((80 + 32916|0))>>2]|0;
     $649 = (($648) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $649;
     $650 = HEAP32[((80 + 32912|0))>>2]|0;
     $651 = (($650) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $651;
     $652 = HEAP8[$650>>0]|0;
     $653 = $652&255;
     $655 = $653;
    }
    $654 = $655 << 8;
    $656 = (($641) + ($654))|0;
    $tmp4 = $656;
    $657 = $tmp4;
    $658 = HEAP32[((80 + 32916|0))>>2]|0;
    $659 = ($658|0)==(0);
    do {
     if ($659) {
      $660 = HEAP32[((80 + 32920|0))>>2]|0;
      $661 = ($660|0)!=(0);
      if (!($661)) {
       $662 = (_load()|0);
       $663 = ($662|0)==(0);
       if (!($663)) {
        label = 239;
        break;
       }
      }
      $670 = 0;
     } else {
      label = 239;
     }
    } while(0);
    if ((label|0) == 239) {
     label = 0;
     $664 = HEAP32[((80 + 32916|0))>>2]|0;
     $665 = (($664) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $665;
     $666 = HEAP32[((80 + 32912|0))>>2]|0;
     $667 = (($666) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $667;
     $668 = HEAP8[$666>>0]|0;
     $669 = $668&255;
     $670 = $669;
    }
    $tmp2 = $670;
    $671 = $tmp2;
    $672 = HEAP32[((80 + 32916|0))>>2]|0;
    $673 = ($672|0)==(0);
    do {
     if ($673) {
      $674 = HEAP32[((80 + 32920|0))>>2]|0;
      $675 = ($674|0)!=(0);
      if (!($675)) {
       $676 = (_load()|0);
       $677 = ($676|0)==(0);
       if (!($677)) {
        label = 244;
        break;
       }
      }
      $685 = 0;
     } else {
      label = 244;
     }
    } while(0);
    if ((label|0) == 244) {
     label = 0;
     $678 = HEAP32[((80 + 32916|0))>>2]|0;
     $679 = (($678) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $679;
     $680 = HEAP32[((80 + 32912|0))>>2]|0;
     $681 = (($680) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $681;
     $682 = HEAP8[$680>>0]|0;
     $683 = $682&255;
     $685 = $683;
    }
    $684 = $685 << 8;
    $686 = (($671) + ($684))|0;
    $687 = $686 << 16;
    $688 = (($657) + ($687))|0;
    $len = $688;
    $689 = HEAP32[((80 + 32920|0))>>2]|0;
    $690 = ($689|0)!=(0);
    if ($690) {
     $691 = HEAP32[((80 + 12|0))>>2]|0;
     HEAP32[$vararg_buffer40>>2] = $691;
     $vararg_ptr43 = (($vararg_buffer40) + 4|0);
     HEAP32[$vararg_ptr43>>2] = 0;
     _try_throw_(33,(133976|0),($vararg_buffer40|0));
    }
    $692 = $check;
    $693 = HEAP32[((80 + 32936|0))>>2]|0;
    $694 = ($692|0)!=($693|0);
    if ($694) {
     $695 = HEAP32[((80 + 12|0))>>2]|0;
     HEAP32[$vararg_buffer44>>2] = $695;
     $vararg_ptr47 = (($vararg_buffer44) + 4|0);
     HEAP32[$vararg_ptr47>>2] = 0;
     _try_throw_(33,(134056|0),($vararg_buffer44|0));
    }
    $696 = $len;
    $697 = HEAP32[((80 + 32932|0))>>2]|0;
    $698 = ($696|0)!=($697|0);
    if ($698) {
     $699 = HEAP32[((80 + 12|0))>>2]|0;
     HEAP32[$vararg_buffer48>>2] = $699;
     $vararg_ptr51 = (($vararg_buffer48) + 4|0);
     HEAP32[$vararg_ptr51>>2] = 0;
     _try_throw_(33,(134088|0),($vararg_buffer48|0));
    }
   }
  }
  $700 = HEAP32[((80 + 68|0))>>2]|0;
  $701 = ($700|0)!=(0);
  if ($701) {
   $702 = $clen;
   HEAP32[((80 + 32928|0))>>2] = $702;
   $703 = $check;
   $704 = HEAP32[((80 + 32932|0))>>2]|0;
   $705 = $cont;
   _show_info(8,$703,$704,$705);
   $cont = 1;
  }
  $706 = HEAP32[((80 + 44|0))>>2]|0;
  $was = $706;
  $707 = $was;
  $708 = ($707|0)==(0);
  if ($708) {
   $709 = (_get_header(0)|0);
   $ret = $709;
   $710 = ($709|0)==(8);
   if ($710) {
    $711 = HEAP32[((80 + 44|0))>>2]|0;
    $712 = ($711|0)==(0);
    $750 = $712;
   } else {
    $750 = 0;
   }
  } else {
   $750 = 0;
  }
  if (!($750)) {
   break;
  }
 }
 $713 = $was;
 $714 = ($713|0)==(0);
 if ($714) {
  $715 = $ret;
  $716 = ($715|0)==(-2);
  if ($716) {
   $717 = HEAP32[((80 + 40|0))>>2]|0;
   $718 = ($717|0)!=(0);
   if ($718) {
    $719 = HEAP32[((80 + 32|0))>>2]|0;
    $720 = ($719|0)!=(0);
    if ($720) {
     $721 = HEAP32[((80 + 76|0))>>2]|0;
     $722 = ($721|0)!=(2);
     if ($722) {
      $723 = HEAP32[((80 + 68|0))>>2]|0;
      $724 = ($723|0)!=(0);
      if (!($724)) {
       _cat();
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $725 = $was;
 $726 = ($725|0)>(1);
 if ($726) {
  $727 = (_get_header(0)|0);
  $728 = ($727|0)!=(-5);
  if ($728) {
   $729 = HEAP32[((80 + 12|0))>>2]|0;
   HEAP32[$vararg_buffer52>>2] = $729;
   (_complain(134128,$vararg_buffer52)|0);
  } else {
   label = 270;
  }
 } else {
  label = 270;
 }
 if ((label|0) == 270) {
  $730 = $was;
  $731 = ($730|0)==(0);
  if ($731) {
   $732 = $ret;
   $733 = ($732|0)!=(-1);
   if ($733) {
    label = 279;
   } else {
    label = 272;
   }
  } else {
   label = 272;
  }
  if ((label|0) == 272) {
   $734 = $was;
   $735 = ($734|0)==(1);
   if ($735) {
    $736 = HEAP32[((80 + 32916|0))>>2]|0;
    $737 = ($736|0)==(0);
    do {
     if ($737) {
      $738 = HEAP32[((80 + 32920|0))>>2]|0;
      $739 = ($738|0)!=(0);
      if (!($739)) {
       $740 = (_load()|0);
       $741 = ($740|0)==(0);
       if (!($741)) {
        label = 277;
        break;
       }
      }
     } else {
      label = 277;
     }
    } while(0);
    if ((label|0) == 277) {
     $742 = HEAP32[((80 + 32916|0))>>2]|0;
     $743 = (($742) + -1)|0;
     HEAP32[((80 + 32916|0))>>2] = $743;
     $744 = HEAP32[((80 + 32912|0))>>2]|0;
     $745 = (($744) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $745;
    }
    $746 = HEAP32[((80 + 32920|0))>>2]|0;
    $747 = ($746|0)!=(0);
    $748 = $747 ^ 1;
    if ($748) {
     label = 279;
    }
   }
  }
  if ((label|0) == 279) {
   $749 = HEAP32[((80 + 12|0))>>2]|0;
   HEAP32[$vararg_buffer55>>2] = $749;
   (_complain(134184,$vararg_buffer55)|0);
  }
 }
 STACKTOP = sp;return;
}
function _unlzw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0, $buf = 0, $code = 0, $end = 0, $final = 0, $flags = 0, $left = 0, $mark = 0, $mask = 0, $match = 0, $max = 0, $outcnt = 0, $prefix = 0, $prev = 0;
 var $rem = 0, $rem1 = 0, $stack = 0, $suffix = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 262016|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer22 = sp;
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer2 = sp + 32|0;
 $vararg_buffer = sp + 40|0;
 $prefix = sp + 120|0;
 $suffix = sp + 196480|0;
 $match = sp + 131192|0;
 HEAP32[((80 + 32932|0))>>2] = 0;
 $0 = HEAP32[((80 + 32916|0))>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = HEAP32[((80 + 32920|0))>>2]|0;
   $3 = ($2|0)!=(0);
   if (!($3)) {
    $4 = (_load()|0);
    $5 = ($4|0)==(0);
    if (!($5)) {
     break;
    }
   }
   $6 = HEAP32[((80 + 12|0))>>2]|0;
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 0;
   _try_throw_(33,(100880|0),($vararg_buffer|0));
  }
 } while(0);
 $7 = HEAP32[((80 + 32916|0))>>2]|0;
 $8 = (($7) + -1)|0;
 HEAP32[((80 + 32916|0))>>2] = $8;
 $9 = HEAP32[((80 + 32912|0))>>2]|0;
 $10 = (($9) + 1|0);
 HEAP32[((80 + 32912|0))>>2] = $10;
 $11 = HEAP8[$9>>0]|0;
 $12 = $11&255;
 $flags = $12;
 $13 = $flags;
 $14 = $13 & 96;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = HEAP32[((80 + 12|0))>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $16;
  $vararg_ptr5 = (($vararg_buffer2) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 0;
  _try_throw_(33,(100904|0),($vararg_buffer2|0));
 }
 $17 = $flags;
 $18 = $17 & 31;
 $max = $18;
 $19 = $max;
 $20 = ($19>>>0)<(9);
 if ($20) {
  label = 9;
 } else {
  $21 = $max;
  $22 = ($21>>>0)>(16);
  if ($22) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $23 = HEAP32[((80 + 12|0))>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $23;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 0;
  _try_throw_(33,(100936|0),($vararg_buffer6|0));
 }
 $24 = $max;
 $25 = ($24|0)==(9);
 if ($25) {
  $max = 10;
 }
 $26 = $flags;
 $27 = $26 & 128;
 $flags = $27;
 $28 = HEAP32[((80 + 32928|0))>>2]|0;
 $29 = HEAP32[((80 + 32916|0))>>2]|0;
 $30 = (($28) - ($29))|0;
 $mark = $30;
 $bits = 9;
 $mask = 511;
 $31 = $flags;
 $32 = ($31|0)!=(0);
 $33 = $32 ? 256 : 255;
 $end = $33;
 $34 = HEAP32[((80 + 32916|0))>>2]|0;
 $35 = ($34|0)==(0);
 do {
  if ($35) {
   $36 = HEAP32[((80 + 32920|0))>>2]|0;
   $37 = ($36|0)!=(0);
   if (!($37)) {
    $38 = (_load()|0);
    $39 = ($38|0)==(0);
    if (!($39)) {
     break;
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $40 = HEAP32[((80 + 32916|0))>>2]|0;
 $41 = (($40) + -1)|0;
 HEAP32[((80 + 32916|0))>>2] = $41;
 $42 = HEAP32[((80 + 32912|0))>>2]|0;
 $43 = (($42) + 1|0);
 HEAP32[((80 + 32912|0))>>2] = $43;
 $44 = HEAP8[$42>>0]|0;
 $45 = $44&255;
 $buf = $45;
 $46 = HEAP32[((80 + 32916|0))>>2]|0;
 $47 = ($46|0)==(0);
 do {
  if ($47) {
   $48 = HEAP32[((80 + 32920|0))>>2]|0;
   $49 = ($48|0)!=(0);
   if (!($49)) {
    $50 = (_load()|0);
    $51 = ($50|0)==(0);
    if (!($51)) {
     break;
    }
   }
   $52 = HEAP32[((80 + 12|0))>>2]|0;
   HEAP32[$vararg_buffer10>>2] = $52;
   $vararg_ptr13 = (($vararg_buffer10) + 4|0);
   HEAP32[$vararg_ptr13>>2] = 0;
   _try_throw_(33,(100880|0),($vararg_buffer10|0));
  }
 } while(0);
 $53 = HEAP32[((80 + 32916|0))>>2]|0;
 $54 = (($53) + -1)|0;
 HEAP32[((80 + 32916|0))>>2] = $54;
 $55 = HEAP32[((80 + 32912|0))>>2]|0;
 $56 = (($55) + 1|0);
 HEAP32[((80 + 32912|0))>>2] = $56;
 $57 = HEAP8[$55>>0]|0;
 $58 = $57&255;
 $59 = $58 << 8;
 $60 = $buf;
 $61 = (($60) + ($59))|0;
 $buf = $61;
 $62 = $buf;
 $63 = $mask;
 $64 = $62 & $63;
 $prev = $64;
 $final = $64;
 $65 = $bits;
 $66 = $buf;
 $67 = $66 >>> $65;
 $buf = $67;
 $68 = $bits;
 $69 = (16 - ($68))|0;
 $left = $69;
 $70 = $prev;
 $71 = ($70>>>0)>(255);
 if ($71) {
  $72 = HEAP32[((80 + 12|0))>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $72;
  $vararg_ptr17 = (($vararg_buffer14) + 4|0);
  HEAP32[$vararg_ptr17>>2] = 0;
  _try_throw_(33,(100968|0),($vararg_buffer14|0));
 }
 $73 = $final;
 $74 = $73&255;
 HEAP8[100992>>0] = $74;
 $outcnt = 1;
 $stack = 0;
 while(1) {
  $75 = $end;
  $76 = $mask;
  $77 = ($75>>>0)>=($76>>>0);
  if ($77) {
   $78 = $bits;
   $79 = $max;
   $80 = ($78>>>0)<($79>>>0);
   if ($80) {
    $81 = HEAP32[((80 + 32928|0))>>2]|0;
    $82 = HEAP32[((80 + 32916|0))>>2]|0;
    $83 = (($81) - ($82))|0;
    $84 = $mark;
    $85 = (($83) - ($84))|0;
    $86 = $bits;
    $87 = (($85>>>0) % ($86>>>0))&-1;
    $rem = $87;
    $88 = $rem;
    $89 = ($88|0)!=(0);
    if ($89) {
     $90 = $bits;
     $91 = $rem;
     $92 = (($90) - ($91))|0;
     $rem = $92;
    }
    while(1) {
     $93 = $rem;
     $94 = HEAP32[((80 + 32916|0))>>2]|0;
     $95 = ($93>>>0)>($94>>>0);
     if (!($95)) {
      break;
     }
     $96 = HEAP32[((80 + 32916|0))>>2]|0;
     $97 = $rem;
     $98 = (($97) - ($96))|0;
     $rem = $98;
     $99 = (_load()|0);
     $100 = ($99|0)==(0);
     if ($100) {
      label = 30;
      break;
     }
    }
    if ((label|0) == 30) {
     label = 0;
    }
    $101 = $rem;
    $102 = HEAP32[((80 + 32916|0))>>2]|0;
    $103 = (($102) - ($101))|0;
    HEAP32[((80 + 32916|0))>>2] = $103;
    $104 = $rem;
    $105 = HEAP32[((80 + 32912|0))>>2]|0;
    $106 = (($105) + ($104)|0);
    HEAP32[((80 + 32912|0))>>2] = $106;
    $buf = 0;
    $left = 0;
    $107 = HEAP32[((80 + 32928|0))>>2]|0;
    $108 = HEAP32[((80 + 32916|0))>>2]|0;
    $109 = (($107) - ($108))|0;
    $mark = $109;
    $110 = $bits;
    $111 = (($110) + 1)|0;
    $bits = $111;
    $112 = $mask;
    $113 = $112 << 1;
    $mask = $113;
    $114 = $mask;
    $115 = (($114) + 1)|0;
    $mask = $115;
   }
  }
  $116 = HEAP32[((80 + 32916|0))>>2]|0;
  $117 = ($116|0)==(0);
  if ($117) {
   $118 = HEAP32[((80 + 32920|0))>>2]|0;
   $119 = ($118|0)!=(0);
   if ($119) {
    break;
   }
   $120 = (_load()|0);
   $121 = ($120|0)==(0);
   if ($121) {
    break;
   }
  }
  $122 = HEAP32[((80 + 32916|0))>>2]|0;
  $123 = (($122) + -1)|0;
  HEAP32[((80 + 32916|0))>>2] = $123;
  $124 = HEAP32[((80 + 32912|0))>>2]|0;
  $125 = (($124) + 1|0);
  HEAP32[((80 + 32912|0))>>2] = $125;
  $126 = HEAP8[$124>>0]|0;
  $127 = $126&255;
  $128 = $left;
  $129 = $127 << $128;
  $130 = $buf;
  $131 = (($130) + ($129))|0;
  $buf = $131;
  $132 = $left;
  $133 = (($132) + 8)|0;
  $left = $133;
  $134 = $left;
  $135 = $bits;
  $136 = ($134>>>0)<($135>>>0);
  if ($136) {
   $137 = HEAP32[((80 + 32916|0))>>2]|0;
   $138 = ($137|0)==(0);
   do {
    if ($138) {
     $139 = HEAP32[((80 + 32920|0))>>2]|0;
     $140 = ($139|0)!=(0);
     if (!($140)) {
      $141 = (_load()|0);
      $142 = ($141|0)==(0);
      if (!($142)) {
       break;
      }
     }
     $143 = HEAP32[((80 + 12|0))>>2]|0;
     HEAP32[$vararg_buffer18>>2] = $143;
     $vararg_ptr21 = (($vararg_buffer18) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 0;
     _try_throw_(33,(100880|0),($vararg_buffer18|0));
    }
   } while(0);
   $144 = HEAP32[((80 + 32916|0))>>2]|0;
   $145 = (($144) + -1)|0;
   HEAP32[((80 + 32916|0))>>2] = $145;
   $146 = HEAP32[((80 + 32912|0))>>2]|0;
   $147 = (($146) + 1|0);
   HEAP32[((80 + 32912|0))>>2] = $147;
   $148 = HEAP8[$146>>0]|0;
   $149 = $148&255;
   $150 = $left;
   $151 = $149 << $150;
   $152 = $buf;
   $153 = (($152) + ($151))|0;
   $buf = $153;
   $154 = $left;
   $155 = (($154) + 8)|0;
   $left = $155;
  }
  $156 = $buf;
  $157 = $mask;
  $158 = $156 & $157;
  $code = $158;
  $159 = $bits;
  $160 = $buf;
  $161 = $160 >>> $159;
  $buf = $161;
  $162 = $bits;
  $163 = $left;
  $164 = (($163) - ($162))|0;
  $left = $164;
  $165 = $code;
  $166 = ($165|0)==(256);
  if ($166) {
   $167 = $flags;
   $168 = ($167|0)!=(0);
   if ($168) {
    $169 = HEAP32[((80 + 32928|0))>>2]|0;
    $170 = HEAP32[((80 + 32916|0))>>2]|0;
    $171 = (($169) - ($170))|0;
    $172 = $mark;
    $173 = (($171) - ($172))|0;
    $174 = $bits;
    $175 = (($173>>>0) % ($174>>>0))&-1;
    $rem1 = $175;
    $176 = $rem1;
    $177 = ($176|0)!=(0);
    if ($177) {
     $178 = $bits;
     $179 = $rem1;
     $180 = (($178) - ($179))|0;
     $rem1 = $180;
    }
    while(1) {
     $181 = $rem1;
     $182 = HEAP32[((80 + 32916|0))>>2]|0;
     $183 = ($181>>>0)>($182>>>0);
     if (!($183)) {
      break;
     }
     $184 = HEAP32[((80 + 32916|0))>>2]|0;
     $185 = $rem1;
     $186 = (($185) - ($184))|0;
     $rem1 = $186;
     $187 = (_load()|0);
     $188 = ($187|0)==(0);
     if ($188) {
      label = 50;
      break;
     }
    }
    if ((label|0) == 50) {
     label = 0;
    }
    $189 = $rem1;
    $190 = HEAP32[((80 + 32916|0))>>2]|0;
    $191 = (($190) - ($189))|0;
    HEAP32[((80 + 32916|0))>>2] = $191;
    $192 = $rem1;
    $193 = HEAP32[((80 + 32912|0))>>2]|0;
    $194 = (($193) + ($192)|0);
    HEAP32[((80 + 32912|0))>>2] = $194;
    $buf = 0;
    $left = 0;
    $195 = HEAP32[((80 + 32928|0))>>2]|0;
    $196 = HEAP32[((80 + 32916|0))>>2]|0;
    $197 = (($195) - ($196))|0;
    $mark = $197;
    $bits = 9;
    $mask = 511;
    $end = 255;
    continue;
   }
  }
  $198 = $code;
  $temp = $198;
  $199 = $code;
  $200 = $end;
  $201 = ($199>>>0)>($200>>>0);
  if ($201) {
   $202 = $code;
   $203 = $end;
   $204 = (($203) + 1)|0;
   $205 = ($202|0)!=($204|0);
   if ($205) {
    label = 56;
   } else {
    $206 = $prev;
    $207 = $end;
    $208 = ($206>>>0)>($207>>>0);
    if ($208) {
     label = 56;
    }
   }
   if ((label|0) == 56) {
    label = 0;
    $209 = HEAP32[((80 + 12|0))>>2]|0;
    HEAP32[$vararg_buffer22>>2] = $209;
    $vararg_ptr25 = (($vararg_buffer22) + 4|0);
    HEAP32[$vararg_ptr25>>2] = 0;
    _try_throw_(33,(100968|0),($vararg_buffer22|0));
   }
   $210 = $final;
   $211 = $210&255;
   $212 = $stack;
   $213 = (($212) + 1)|0;
   $stack = $213;
   $214 = (($match) + ($212)|0);
   HEAP8[$214>>0] = $211;
   $215 = $prev;
   $code = $215;
  }
  while(1) {
   $216 = $code;
   $217 = ($216>>>0)>=(256);
   if (!($217)) {
    break;
   }
   $218 = $code;
   $219 = (($suffix) + ($218)|0);
   $220 = HEAP8[$219>>0]|0;
   $221 = $stack;
   $222 = (($221) + 1)|0;
   $stack = $222;
   $223 = (($match) + ($221)|0);
   HEAP8[$223>>0] = $220;
   $224 = $code;
   $225 = (($prefix) + ($224<<1)|0);
   $226 = HEAP16[$225>>1]|0;
   $227 = $226&65535;
   $code = $227;
  }
  $228 = $code;
  $229 = $228&255;
  $230 = $stack;
  $231 = (($230) + 1)|0;
  $stack = $231;
  $232 = (($match) + ($230)|0);
  HEAP8[$232>>0] = $229;
  $233 = $code;
  $final = $233;
  $234 = $end;
  $235 = $mask;
  $236 = ($234>>>0)<($235>>>0);
  if ($236) {
   $237 = $end;
   $238 = (($237) + 1)|0;
   $end = $238;
   $239 = $prev;
   $240 = $239&65535;
   $241 = $end;
   $242 = (($prefix) + ($241<<1)|0);
   HEAP16[$242>>1] = $240;
   $243 = $final;
   $244 = $243&255;
   $245 = $end;
   $246 = (($suffix) + ($245)|0);
   HEAP8[$246>>0] = $244;
  }
  $247 = $temp;
  $prev = $247;
  while(1) {
   $248 = $stack;
   $249 = $outcnt;
   $250 = (32768 - ($249))|0;
   $251 = ($248>>>0)>($250>>>0);
   if (!($251)) {
    break;
   }
   while(1) {
    $252 = $outcnt;
    $253 = ($252>>>0)<(32768);
    if (!($253)) {
     break;
    }
    $254 = $stack;
    $255 = (($254) + -1)|0;
    $stack = $255;
    $256 = (($match) + ($255)|0);
    $257 = HEAP8[$256>>0]|0;
    $258 = $outcnt;
    $259 = (($258) + 1)|0;
    $outcnt = $259;
    $260 = (100992 + ($258)|0);
    HEAP8[$260>>0] = $257;
   }
   $261 = $outcnt;
   $262 = HEAP32[((80 + 32932|0))>>2]|0;
   $263 = (($262) + ($261))|0;
   HEAP32[((80 + 32932|0))>>2] = $263;
   $264 = HEAP32[((80 + 76|0))>>2]|0;
   $265 = ($264|0)==(1);
   if ($265) {
    $266 = HEAP32[((80 + 8|0))>>2]|0;
    $267 = $outcnt;
    _writen($266,100992,$267);
   }
   $outcnt = 0;
  }
  while(1) {
   $268 = $stack;
   $269 = (($268) + -1)|0;
   $stack = $269;
   $270 = (($match) + ($269)|0);
   $271 = HEAP8[$270>>0]|0;
   $272 = $outcnt;
   $273 = (($272) + 1)|0;
   $outcnt = $273;
   $274 = (100992 + ($272)|0);
   HEAP8[$274>>0] = $271;
   $275 = $stack;
   $276 = ($275|0)!=(0);
   if (!($276)) {
    break;
   }
  }
 }
 $277 = $outcnt;
 $278 = HEAP32[((80 + 32932|0))>>2]|0;
 $279 = (($278) + ($277))|0;
 HEAP32[((80 + 32932|0))>>2] = $279;
 $280 = $outcnt;
 $281 = ($280|0)!=(0);
 if (!($281)) {
  STACKTOP = sp;return;
 }
 $282 = HEAP32[((80 + 76|0))>>2]|0;
 $283 = ($282|0)==(1);
 if (!($283)) {
  STACKTOP = sp;return;
 }
 $284 = HEAP32[((80 + 8|0))>>2]|0;
 $285 = $outcnt;
 _writen($284,100992,$285);
 STACKTOP = sp;return;
}
function _show_info($method,$check,$len,$cont) {
 $method = $method|0;
 $check = $check|0;
 $len = $len|0;
 $cont = $cont|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $max = 0, $mod = 0, $n = 0, $now = 0, $tag = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer25 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0;
 var $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer25 = sp;
 $vararg_buffer20 = sp + 96|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer7 = sp + 56|0;
 $vararg_buffer2 = sp + 72|0;
 $vararg_buffer = sp + 88|0;
 $now = sp + 136|0;
 $mod = sp + 194|0;
 $tag = sp + 144|0;
 $0 = $method;
 $1 = $check;
 $2 = $len;
 $3 = $cont;
 $4 = HEAP32[((80 + 24|0))>>2]|0;
 $5 = ($4|0)>(1);
 $6 = $5 ? 16 : 48;
 $max = $6;
 $7 = $max;
 $8 = (($7) + 1)|0;
 _memset(($tag|0),0,($8|0))|0;
 $9 = $3;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $max;
  $12 = (($11) + 1)|0;
  (_strncpy(($tag|0),(100584|0),($12|0))|0);
 } else {
  $13 = HEAP32[((80 + 128|0))>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $15 = HEAP32[((80 + 12|0))>>2]|0;
   $16 = (_strlen(($15|0))|0);
   $17 = HEAP32[((80 + 12|0))>>2]|0;
   $18 = (_compressed_suffix($17)|0);
   $19 = (($16) - ($18))|0;
   $n = $19;
   $20 = HEAP32[((80 + 12|0))>>2]|0;
   $21 = $n;
   $22 = $max;
   $23 = (($22) + 1)|0;
   $24 = ($21>>>0)>($23>>>0);
   if ($24) {
    $25 = $max;
    $26 = (($25) + 1)|0;
    $28 = $26;
   } else {
    $27 = $n;
    $28 = $27;
   }
   (_strncpy(($tag|0),($20|0),($28|0))|0);
   $29 = HEAP32[((80 + 12|0))>>2]|0;
   $30 = $n;
   $31 = (($29) + ($30)|0);
   $32 = (_strcmp($31,66656)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = $n;
    $35 = $max;
    $36 = (($35) + 1)|0;
    $37 = ($34>>>0)<($36>>>0);
    if ($37) {
     $38 = $n;
     $39 = (($tag) + ($38)|0);
     $40 = $max;
     $41 = (($40) + 1)|0;
     $42 = $n;
     $43 = (($41) - ($42))|0;
     (_strncpy(($39|0),(67240|0),($43|0))|0);
    }
   }
  } else {
   $44 = HEAP32[((80 + 128|0))>>2]|0;
   $45 = $max;
   $46 = (($45) + 1)|0;
   (_strncpy(($tag|0),($44|0),($46|0))|0);
  }
 }
 $47 = $max;
 $48 = (($tag) + ($47)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = ($49<<24>>24)!=(0);
 if ($50) {
  $51 = $max;
  $52 = (($tag) + ($51)|0);
  $53 = (($52) + -3|0);
  (_strcpy(($53|0),(100592|0))|0);
 }
 $54 = HEAP32[((80 + 124|0))>>2]|0;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = (_ctime((((80 + 124|0))|0))|0);
  (_strcpy(($mod|0),($56|0))|0);
  $57 = (_time((0|0))|0);
  HEAP32[$now>>2] = $57;
  $58 = (($mod) + 20|0);
  $59 = (_ctime(($now|0))|0);
  $60 = (($59) + 20|0);
  $61 = (_strcmp($58,$60)|0);
  $62 = ($61|0)!=(0);
  if ($62) {
   $63 = (($mod) + 11|0);
   $64 = (($mod) + 19|0);
   (_strcpy(($63|0),($64|0))|0);
  }
 } else {
  $65 = (($mod) + 4|0);
  (_strcpy(($65|0),(100600|0))|0);
 }
 $66 = (($mod) + 16|0);
 HEAP8[$66>>0] = 0;
 $67 = HEAP32[((80 + 72|0))>>2]|0;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = HEAP32[((80 + 24|0))>>2]|0;
  $70 = ($69|0)>(1);
  if ($70) {
   $71 = HEAP32[_stdout>>2]|0;
   (_fputs((100616|0),($71|0))|0);
  }
  $72 = HEAP32[((80 + 24|0))>>2]|0;
  $73 = ($72|0)>(0);
  if ($73) {
   (_puts((100656|0))|0);
  }
  HEAP32[((80 + 72|0))>>2] = 0;
 }
 $74 = HEAP32[((80 + 24|0))>>2]|0;
 $75 = ($74|0)>(1);
 if ($75) {
  $76 = HEAP32[((80 + 44|0))>>2]|0;
  $77 = ($76|0)==(3);
  if ($77) {
   $78 = HEAP32[((80 + 76|0))>>2]|0;
   $79 = ($78|0)!=(0);
   if ($79) {
    label = 30;
   } else {
    $80 = $0;
    $81 = (($mod) + 4|0);
    HEAP32[$vararg_buffer>>2] = $80;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $81;
    (_printf((100696|0),($vararg_buffer|0))|0);
   }
  } else {
   label = 30;
  }
  if ((label|0) == 30) {
   $82 = HEAP32[((80 + 44|0))>>2]|0;
   $83 = ($82|0)>(1);
   if ($83) {
    $84 = $0;
    $85 = $1;
    $86 = (($mod) + 4|0);
    HEAP32[$vararg_buffer2>>2] = $84;
    $vararg_ptr5 = (($vararg_buffer2) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $85;
    $vararg_ptr6 = (($vararg_buffer2) + 8|0);
    HEAP32[$vararg_ptr6>>2] = $86;
    (_printf((100720|0),($vararg_buffer2|0))|0);
   } else {
    $87 = HEAP32[((80 + 44|0))>>2]|0;
    $88 = ($87|0)==(1);
    if ($88) {
     $89 = $0;
     $90 = $1;
     $91 = (($mod) + 4|0);
     HEAP32[$vararg_buffer7>>2] = $89;
     $vararg_ptr10 = (($vararg_buffer7) + 4|0);
     HEAP32[$vararg_ptr10>>2] = $90;
     $vararg_ptr11 = (($vararg_buffer7) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $91;
     (_printf((100744|0),($vararg_buffer7|0))|0);
    } else {
     $92 = $0;
     $93 = ($92|0)==(257);
     if ($93) {
      $94 = (($mod) + 4|0);
      HEAP32[$vararg_buffer12>>2] = $94;
      (_printf((100768|0),($vararg_buffer12|0))|0);
     } else {
      $95 = $0;
      $96 = $1;
      $97 = (($mod) + 4|0);
      HEAP32[$vararg_buffer15>>2] = $95;
      $vararg_ptr18 = (($vararg_buffer15) + 4|0);
      HEAP32[$vararg_ptr18>>2] = $96;
      $vararg_ptr19 = (($vararg_buffer15) + 8|0);
      HEAP32[$vararg_ptr19>>2] = $97;
      (_printf((100792|0),($vararg_buffer15|0))|0);
     }
    }
   }
  }
 }
 $98 = HEAP32[((80 + 24|0))>>2]|0;
 $99 = ($98|0)>(0);
 if (!($99)) {
  STACKTOP = sp;return;
 }
 $100 = HEAP32[((80 + 44|0))>>2]|0;
 $101 = ($100|0)==(3);
 if ($101) {
  $102 = HEAP32[((80 + 76|0))>>2]|0;
  $103 = ($102|0)!=(0);
  if ($103) {
   label = 44;
  } else {
   label = 48;
  }
 } else {
  label = 44;
 }
 do {
  if ((label|0) == 44) {
   $104 = $0;
   $105 = ($104|0)==(8);
   if ($105) {
    $106 = HEAP32[((80 + 32928|0))>>2]|0;
    $107 = $2;
    $108 = $2;
    $109 = $108 >> 10;
    $110 = (($107) + ($109))|0;
    $111 = (($110) + 12)|0;
    $112 = ($106|0)>($111|0);
    if ($112) {
     label = 48;
     break;
    }
   }
   $113 = $0;
   $114 = ($113|0)==(257);
   if ($114) {
    $115 = HEAP32[((80 + 32928|0))>>2]|0;
    $116 = $2;
    $117 = $2;
    $118 = $117 >> 1;
    $119 = (($116) + ($118))|0;
    $120 = (($119) + 3)|0;
    $121 = ($115|0)>($120|0);
    if ($121) {
     label = 48;
     break;
    }
   }
   $136 = HEAP32[((80 + 32928|0))>>2]|0;
   $137 = ($136|0)<(0);
   $138 = $137 << 31 >> 31;
   $139 = $2;
   $140 = ($139|0)<(0);
   $141 = $140 << 31 >> 31;
   $142 = $2;
   $143 = ($142|0)==(0);
   if ($143) {
    $160 = 0.0;
   } else {
    $144 = $2;
    $145 = HEAP32[((80 + 32928|0))>>2]|0;
    $146 = (($144) - ($145))|0;
    $147 = ($146*100)|0;
    $148 = (+($147|0));
    $149 = $2;
    $150 = (+($149|0));
    $151 = $148 / $150;
    $160 = $151;
   }
   $152 = $vararg_buffer25;
   $153 = $152;
   HEAP32[$153>>2] = $136;
   $154 = (($152) + 4)|0;
   $155 = $154;
   HEAP32[$155>>2] = $138;
   $vararg_ptr28 = (($vararg_buffer25) + 8|0);
   $156 = $vararg_ptr28;
   $157 = $156;
   HEAP32[$157>>2] = $139;
   $158 = (($156) + 4)|0;
   $159 = $158;
   HEAP32[$159>>2] = $141;
   $vararg_ptr29 = (($vararg_buffer25) + 16|0);
   HEAPF64[tempDoublePtr>>3]=$160;HEAP32[$vararg_ptr29>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr29+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr30 = (($vararg_buffer25) + 24|0);
   HEAP32[$vararg_ptr30>>2] = $tag;
   (_printf((100848|0),($vararg_buffer25|0))|0);
  }
 } while(0);
 if ((label|0) == 48) {
  $122 = HEAP32[((80 + 32928|0))>>2]|0;
  $123 = ($122|0)<(0);
  $124 = $123 << 31 >> 31;
  $125 = $2;
  $126 = ($125|0)<(0);
  $127 = $126 << 31 >> 31;
  $128 = $vararg_buffer20;
  $129 = $128;
  HEAP32[$129>>2] = $122;
  $130 = (($128) + 4)|0;
  $131 = $130;
  HEAP32[$131>>2] = $124;
  $vararg_ptr23 = (($vararg_buffer20) + 8|0);
  $132 = $vararg_ptr23;
  $133 = $132;
  HEAP32[$133>>2] = $125;
  $134 = (($132) + 4)|0;
  $135 = $134;
  HEAP32[$135>>2] = $127;
  $vararg_ptr24 = (($vararg_buffer20) + 16|0);
  HEAP32[$vararg_ptr24>>2] = $tag;
  (_printf((100816|0),($vararg_buffer20|0))|0);
 }
 STACKTOP = sp;return;
}
function _outb($desc,$buf,$len) {
 $desc = $desc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $desc;
 $2 = $buf;
 $3 = $len;
 $4 = HEAP32[((80 + 112|0))>>2]|0;
 $5 = ($4|0)>(1);
 if (!($5)) {
  $36 = $3;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = HEAP32[((80 + 76|0))>>2]|0;
   $39 = ($38|0)==(1);
   if ($39) {
    $40 = HEAP32[((80 + 8|0))>>2]|0;
    $41 = $2;
    $42 = $3;
    _writen($40,$41,$42);
   }
   $43 = HEAP32[((80 + 44|0))>>2]|0;
   $44 = ($43|0)==(1);
   if ($44) {
    $45 = HEAP32[((80 + 32936|0))>>2]|0;
    $46 = $2;
    $47 = $3;
    $48 = (_adler32(($45|0),($46|0),($47|0))|0);
    $53 = $48;
   } else {
    $49 = HEAP32[((80 + 32936|0))>>2]|0;
    $50 = $2;
    $51 = $3;
    $52 = (_crc32(($49|0),($50|0),($51|0))|0);
    $53 = $52;
   }
   HEAP32[((80 + 32936|0))>>2] = $53;
   $54 = $3;
   $55 = HEAP32[((80 + 32932|0))>>2]|0;
   $56 = (($55) + ($54))|0;
   HEAP32[((80 + 32932|0))>>2] = $56;
  }
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $6 = HEAP32[67760>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (_new_lock(0)|0);
  HEAP32[67760>>2] = $8;
  $9 = (_new_lock(0)|0);
  HEAP32[67768>>2] = $9;
  $10 = (_launch((55|0),(0|0))|0);
  HEAP32[67744>>2] = $10;
  $11 = (_launch((56|0),(0|0))|0);
  HEAP32[67752>>2] = $11;
 }
 $12 = HEAP32[67768>>2]|0;
 _possess(($12|0));
 $13 = HEAP32[67768>>2]|0;
 _wait_for(($13|0),0,0);
 $14 = HEAP32[67760>>2]|0;
 _possess(($14|0));
 $15 = HEAP32[67760>>2]|0;
 _wait_for(($15|0),0,0);
 $16 = $3;
 HEAP32[67776>>2] = $16;
 $17 = $3;
 $18 = HEAP32[((80 + 32932|0))>>2]|0;
 $19 = (($18) + ($17))|0;
 HEAP32[((80 + 32932|0))>>2] = $19;
 $20 = $2;
 $21 = $3;
 _memcpy((67784|0),($20|0),($21|0))|0;
 $22 = HEAP32[67760>>2]|0;
 _twist(($22|0),0,1);
 $23 = HEAP32[67768>>2]|0;
 _twist(($23|0),0,1);
 $24 = $3;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = HEAP32[67760>>2]|0;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $1;
   $29 = ($28|0)!=(0|0);
   if ($29) {
    $30 = HEAP32[67752>>2]|0;
    _destruct(($30|0));
    $31 = HEAP32[67744>>2]|0;
    _destruct(($31|0));
   } else {
    $32 = HEAP32[67752>>2]|0;
    _join(($32|0));
    $33 = HEAP32[67744>>2]|0;
    _join(($33|0));
   }
   $34 = HEAP32[67768>>2]|0;
   _free_lock(($34|0));
   $35 = HEAP32[67760>>2]|0;
   _free_lock(($35|0));
   HEAP32[67760>>2] = 0;
  }
 }
 $0 = 0;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _list_info() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $at = 0, $check = 0, $len = 0, $method = 0, $n = 0, $tail = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $tail = sp + 48|0;
 _in_init();
 $0 = (_get_header(1)|0);
 $method = $0;
 $1 = $method;
 $2 = ($1|0)<(0);
 if ($2) {
  $3 = HEAP32[((80 + 128|0))>>2]|0;
  $4 = ($3|0)!=(0|0);
  if ($4) {
   $5 = HEAP32[((80 + 128|0))>>2]|0;
   _free($5);
   HEAP32[((80 + 128|0))>>2] = 0;
  }
  $6 = $method;
  $7 = ($6|0)!=(-1);
  if ($7) {
   $8 = HEAP32[((80 + 24|0))>>2]|0;
   $9 = ($8|0)>(1);
   if ($9) {
    $10 = $method;
    $11 = ($10|0)!=(-6);
    $12 = $11 ? 67672 : 67000;
    $13 = HEAP32[((80 + 12|0))>>2]|0;
    HEAP32[$vararg_buffer>>2] = $13;
    (_complain($12,$vararg_buffer)|0);
   }
  }
  STACKTOP = sp;return;
 }
 $14 = HEAP32[((80 + 44|0))>>2]|0;
 $15 = ($14|0)>(1);
 if ($15) {
  $16 = HEAP32[((80 + 136|0))>>2]|0;
  HEAP32[((80 + 32928|0))>>2] = $16;
  $17 = $method;
  $18 = HEAP32[((80 + 132|0))>>2]|0;
  $19 = HEAP32[((80 + 140|0))>>2]|0;
  _show_info($17,$18,$19,0);
  STACKTOP = sp;return;
 }
 $20 = HEAP32[((80 + 44|0))>>2]|0;
 $21 = ($20|0)==(1);
 if ($21) {
  $22 = HEAP32[((80 + 4|0))>>2]|0;
  $23 = (_lseek(($22|0),0,2)|0);
  $at = $23;
  $24 = $at;
  $25 = ($24|0)==(-1);
  if ($25) {
   $check = 0;
   while(1) {
    $26 = HEAP32[((80 + 32916|0))>>2]|0;
    $27 = ($26>>>0)<(4);
    if ($27) {
     $28 = HEAP32[((80 + 32916|0))>>2]|0;
     $29 = $28;
    } else {
     $29 = 4;
    }
    $len = $29;
    $30 = HEAP32[((80 + 32916|0))>>2]|0;
    $31 = $len;
    $32 = (($30) - ($31))|0;
    $33 = HEAP32[((80 + 32912|0))>>2]|0;
    $34 = (($33) + ($32)|0);
    HEAP32[((80 + 32912|0))>>2] = $34;
    while(1) {
     $35 = $len;
     $36 = (($35) + -1)|0;
     $len = $36;
     $37 = ($35|0)!=(0);
     if (!($37)) {
      break;
     }
     $38 = $check;
     $39 = $38 << 8;
     $40 = HEAP32[((80 + 32912|0))>>2]|0;
     $41 = (($40) + 1|0);
     HEAP32[((80 + 32912|0))>>2] = $41;
     $42 = HEAP8[$40>>0]|0;
     $43 = $42&255;
     $44 = (($39) + ($43))|0;
     $check = $44;
    }
    $45 = (_load()|0);
    $46 = ($45|0)!=(0);
    if (!($46)) {
     break;
    }
   }
   $47 = $check;
   $check = $47;
  } else {
   $48 = $at;
   HEAP32[((80 + 32928|0))>>2] = $48;
   $49 = HEAP32[((80 + 4|0))>>2]|0;
   (_lseek(($49|0),-4,2)|0);
   $50 = HEAP32[((80 + 4|0))>>2]|0;
   (_readn($50,$tail,4)|0);
   $51 = HEAP8[$tail>>0]|0;
   $52 = $51&255;
   $53 = $52 << 8;
   $54 = (($tail) + 1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = (($53) + ($56))|0;
   $58 = $57 << 16;
   $59 = (($tail) + 2|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = $61 << 8;
   $63 = (($tail) + 2|0);
   $64 = (($63) + 1|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = (($62) + ($66))|0;
   $68 = (($58) + ($67))|0;
   $check = $68;
  }
  $69 = HEAP32[((80 + 32928|0))>>2]|0;
  $70 = (($69) - 6)|0;
  HEAP32[((80 + 32928|0))>>2] = $70;
  $71 = $method;
  $72 = $check;
  _show_info($71,$72,0,0);
  STACKTOP = sp;return;
 }
 $73 = $method;
 $74 = ($73|0)==(257);
 if ($74) {
  $75 = HEAP32[((80 + 4|0))>>2]|0;
  $76 = (_lseek(($75|0),0,2)|0);
  $at = $76;
  $77 = $at;
  $78 = ($77|0)==(-1);
  if ($78) {
   while(1) {
    $79 = (_load()|0);
    $80 = ($79|0)!=(0);
    if (!($80)) {
     break;
    }
   }
  } else {
   $81 = $at;
   HEAP32[((80 + 32928|0))>>2] = $81;
  }
  $82 = HEAP32[((80 + 32928|0))>>2]|0;
  $83 = (($82) - 3)|0;
  HEAP32[((80 + 32928|0))>>2] = $83;
  $84 = $method;
  _show_info($84,0,0,0);
  STACKTOP = sp;return;
 }
 $85 = HEAP32[((80 + 32924|0))>>2]|0;
 $86 = ($85|0)!=(0);
 do {
  if ($86) {
   $87 = HEAP32[((80 + 32916|0))>>2]|0;
   $88 = ($87>>>0)<(8);
   if (!($88)) {
    $90 = HEAP32[((80 + 32916|0))>>2]|0;
    $91 = (($90) - 8)|0;
    HEAP32[((80 + 32928|0))>>2] = $91;
    $92 = HEAP32[((80 + 32912|0))>>2]|0;
    $93 = HEAP32[((80 + 32916|0))>>2]|0;
    $94 = (($93) - 8)|0;
    $95 = (($92) + ($94)|0);
    ;HEAP8[$tail+0>>0]=HEAP8[$95+0>>0]|0;HEAP8[$tail+1>>0]=HEAP8[$95+1>>0]|0;HEAP8[$tail+2>>0]=HEAP8[$95+2>>0]|0;HEAP8[$tail+3>>0]=HEAP8[$95+3>>0]|0;HEAP8[$tail+4>>0]=HEAP8[$95+4>>0]|0;HEAP8[$tail+5>>0]=HEAP8[$95+5>>0]|0;HEAP8[$tail+6>>0]=HEAP8[$95+6>>0]|0;HEAP8[$tail+7>>0]=HEAP8[$95+7>>0]|0;
    break;
   }
   $89 = HEAP32[((80 + 12|0))>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $89;
   (_complain(67704,$vararg_buffer1)|0);
   STACKTOP = sp;return;
  } else {
   $96 = HEAP32[((80 + 4|0))>>2]|0;
   $97 = (_lseek(($96|0),-8,2)|0);
   $at = $97;
   $98 = ($97|0)!=(-1);
   if ($98) {
    $99 = $at;
    $100 = HEAP32[((80 + 32928|0))>>2]|0;
    $101 = (($99) - ($100))|0;
    $102 = HEAP32[((80 + 32916|0))>>2]|0;
    $103 = (($101) + ($102))|0;
    HEAP32[((80 + 32928|0))>>2] = $103;
    $104 = HEAP32[((80 + 4|0))>>2]|0;
    (_readn($104,$tail,8)|0);
   } else {
    $105 = HEAP32[((80 + 32928|0))>>2]|0;
    $106 = HEAP32[((80 + 32916|0))>>2]|0;
    $107 = (($105) - ($106))|0;
    $at = $107;
    while(1) {
     $108 = HEAP32[((80 + 32916|0))>>2]|0;
     $109 = ($108>>>0)<(8);
     if ($109) {
      $110 = HEAP32[((80 + 32916|0))>>2]|0;
      $111 = $110;
     } else {
      $111 = 8;
     }
     $n = $111;
     $112 = HEAP32[((80 + 32912|0))>>2]|0;
     $113 = HEAP32[((80 + 32916|0))>>2]|0;
     $114 = $n;
     $115 = (($113) - ($114))|0;
     $116 = (($112) + ($115)|0);
     $117 = $n;
     _memcpy(($tail|0),($116|0),($117|0))|0;
     (_load()|0);
     $118 = HEAP32[((80 + 32916|0))>>2]|0;
     $119 = ($118|0)==(32768);
     if (!($119)) {
      break;
     }
    }
    $120 = HEAP32[((80 + 32916|0))>>2]|0;
    $121 = ($120>>>0)<(8);
    if ($121) {
     $122 = $n;
     $123 = HEAP32[((80 + 32916|0))>>2]|0;
     $124 = (($122) + ($123))|0;
     $125 = ($124>>>0)<(8);
     if ($125) {
      $126 = HEAP32[((80 + 12|0))>>2]|0;
      HEAP32[$vararg_buffer4>>2] = $126;
      (_complain(67704,$vararg_buffer4)|0);
      STACKTOP = sp;return;
     }
     $127 = HEAP32[((80 + 32916|0))>>2]|0;
     $128 = ($127|0)!=(0);
     if ($128) {
      $129 = $n;
      $130 = HEAP32[((80 + 32916|0))>>2]|0;
      $131 = (($129) + ($130))|0;
      $132 = ($131>>>0)>(8);
      if ($132) {
       $133 = $n;
       $134 = (($tail) + ($133)|0);
       $135 = HEAP32[((80 + 32916|0))>>2]|0;
       $136 = (8 - ($135))|0;
       $137 = (0 - ($136))|0;
       $138 = (($134) + ($137)|0);
       $139 = HEAP32[((80 + 32916|0))>>2]|0;
       $140 = (8 - ($139))|0;
       _memcpy(($tail|0),($138|0),($140|0))|0;
      }
      $141 = (($tail) + 8|0);
      $142 = HEAP32[((80 + 32916|0))>>2]|0;
      $143 = (0 - ($142))|0;
      $144 = (($141) + ($143)|0);
      $145 = HEAP32[((80 + 32912|0))>>2]|0;
      $146 = HEAP32[((80 + 32916|0))>>2]|0;
      _memcpy(($144|0),($145|0),($146|0))|0;
     }
    } else {
     $147 = HEAP32[((80 + 32912|0))>>2]|0;
     $148 = HEAP32[((80 + 32916|0))>>2]|0;
     $149 = (($148) - 8)|0;
     $150 = (($147) + ($149)|0);
     ;HEAP8[$tail+0>>0]=HEAP8[$150+0>>0]|0;HEAP8[$tail+1>>0]=HEAP8[$150+1>>0]|0;HEAP8[$tail+2>>0]=HEAP8[$150+2>>0]|0;HEAP8[$tail+3>>0]=HEAP8[$150+3>>0]|0;HEAP8[$tail+4>>0]=HEAP8[$150+4>>0]|0;HEAP8[$tail+5>>0]=HEAP8[$150+5>>0]|0;HEAP8[$tail+6>>0]=HEAP8[$150+6>>0]|0;HEAP8[$tail+7>>0]=HEAP8[$150+7>>0]|0;
    }
    $151 = $at;
    $152 = (($151) + 8)|0;
    $153 = HEAP32[((80 + 32928|0))>>2]|0;
    $154 = (($153) - ($152))|0;
    HEAP32[((80 + 32928|0))>>2] = $154;
   }
  }
 } while(0);
 $155 = HEAP32[((80 + 32928|0))>>2]|0;
 $156 = ($155|0)<(2);
 if ($156) {
  $157 = HEAP32[((80 + 12|0))>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $157;
  (_complain(67704,$vararg_buffer7)|0);
  STACKTOP = sp;return;
 }
 $158 = HEAP8[$tail>>0]|0;
 $159 = $158&255;
 $160 = (($tail) + 1|0);
 $161 = HEAP8[$160>>0]|0;
 $162 = $161&255;
 $163 = $162 << 8;
 $164 = (($159) + ($163))|0;
 $165 = (($tail) + 2|0);
 $166 = HEAP8[$165>>0]|0;
 $167 = $166&255;
 $168 = (($tail) + 2|0);
 $169 = (($168) + 1|0);
 $170 = HEAP8[$169>>0]|0;
 $171 = $170&255;
 $172 = $171 << 8;
 $173 = (($167) + ($172))|0;
 $174 = $173 << 16;
 $175 = (($164) + ($174))|0;
 $check = $175;
 $176 = (($tail) + 4|0);
 $177 = HEAP8[$176>>0]|0;
 $178 = $177&255;
 $179 = (($tail) + 4|0);
 $180 = (($179) + 1|0);
 $181 = HEAP8[$180>>0]|0;
 $182 = $181&255;
 $183 = $182 << 8;
 $184 = (($178) + ($183))|0;
 $185 = (($tail) + 4|0);
 $186 = (($185) + 2|0);
 $187 = HEAP8[$186>>0]|0;
 $188 = $187&255;
 $189 = (($tail) + 4|0);
 $190 = (($189) + 2|0);
 $191 = (($190) + 1|0);
 $192 = HEAP8[$191>>0]|0;
 $193 = $192&255;
 $194 = $193 << 8;
 $195 = (($188) + ($194))|0;
 $196 = $195 << 16;
 $197 = (($184) + ($196))|0;
 $len = $197;
 $198 = $method;
 $199 = $check;
 $200 = $len;
 _show_info($198,$199,$200,0);
 $201 = HEAP32[((80 + 128|0))>>2]|0;
 $202 = ($201|0)!=(0|0);
 if ($202) {
  $203 = HEAP32[((80 + 128|0))>>2]|0;
  _free($203);
  HEAP32[((80 + 128|0))>>2] = 0;
 }
 STACKTOP = sp;return;
}
function _cat() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[((80 + 8|0))>>2]|0;
 _writen($0,((80 + 48|0)),1);
 HEAP32[((80 + 32932|0))>>2] = 1;
 while(1) {
  $1 = HEAP32[((80 + 32916|0))>>2]|0;
  $2 = ($1|0)!=(0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[((80 + 8|0))>>2]|0;
  $4 = HEAP32[((80 + 32912|0))>>2]|0;
  $5 = HEAP32[((80 + 32916|0))>>2]|0;
  _writen($3,$4,$5);
  $6 = HEAP32[((80 + 32916|0))>>2]|0;
  $7 = HEAP32[((80 + 32932|0))>>2]|0;
  $8 = (($7) + ($6))|0;
  HEAP32[((80 + 32932|0))>>2] = $8;
  HEAP32[((80 + 32916|0))>>2] = 0;
  (_load()|0);
 }
 STACKTOP = sp;return;
}
function _parallel_compress() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $curr = 0, $dict = 0, $end = 0, $hash = 0, $hold = 0, $job = 0, $last = 0, $left = 0, $len = 0, $more = 0, $next = 0, $scan = 0;
 var $seq = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _setup_jobs();
 $0 = (_launch((57|0),(0|0))|0);
 HEAP32[67320>>2] = $0;
 $seq = 0;
 $1 = (_get_space(66232)|0);
 $next = $1;
 $2 = HEAP32[((80 + 4|0))>>2]|0;
 $3 = $next;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $next;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_readn($2,$5,$8)|0);
 $10 = $next;
 $11 = (($10) + 12|0);
 HEAP32[$11>>2] = $9;
 $hold = 0;
 $dict = 0;
 $12 = $next;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $scan = $14;
 $hash = 2047;
 $left = 0;
 while(1) {
  $15 = (_alloc(0,32)|0);
  $job = $15;
  $16 = (_new_lock(0)|0);
  $17 = $job;
  $18 = (($17) + 24|0);
  HEAP32[$18>>2] = $16;
  $19 = $next;
  $curr = $19;
  $20 = $hold;
  $next = $20;
  $hold = 0;
  $21 = $next;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $23 = (_get_space(66232)|0);
   $next = $23;
   $24 = HEAP32[((80 + 4|0))>>2]|0;
   $25 = $next;
   $26 = (($25) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $next;
   $29 = (($28) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_readn($24,$27,$30)|0);
   $32 = $next;
   $33 = (($32) + 12|0);
   HEAP32[$33>>2] = $31;
  }
  $34 = $job;
  $35 = (($34) + 16|0);
  HEAP32[$35>>2] = 0;
  $36 = HEAP32[((80 + 108|0))>>2]|0;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = $curr;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $left;
    $43 = ($42|0)==(0);
    if ($43) {
     $44 = $curr;
     $45 = (($44) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     $last = $46;
     $47 = $curr;
     $48 = (($47) + 4|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $curr;
     $51 = (($50) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($49) + ($52)|0);
     $end = $53;
     while(1) {
      $54 = $scan;
      $55 = $end;
      $56 = ($54>>>0)<($55>>>0);
      if (!($56)) {
       break;
      }
      $57 = $hash;
      $58 = $57 << 1;
      $59 = $scan;
      $60 = (($59) + 1|0);
      $scan = $60;
      $61 = HEAP8[$59>>0]|0;
      $62 = $61&255;
      $63 = $58 ^ $62;
      $64 = $63 & 4095;
      $hash = $64;
      $65 = $hash;
      $66 = ($65|0)==(2047);
      if ($66) {
       $67 = $scan;
       $68 = $last;
       $69 = $67;
       $70 = $68;
       $71 = (($69) - ($70))|0;
       $len = $71;
       $72 = $job;
       $73 = $len;
       _append_len($72,$73);
       $74 = $scan;
       $last = $74;
      }
     }
     $75 = $scan;
     $76 = $last;
     $77 = $75;
     $78 = $76;
     $79 = (($77) - ($78))|0;
     $left = $79;
     $80 = $next;
     $81 = (($80) + 4|0);
     $82 = HEAP32[$81>>2]|0;
     $scan = $82;
    }
    $83 = $next;
    $84 = (($83) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $last = $85;
    $86 = $curr;
    $87 = (($86) + 8|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $curr;
    $90 = (($89) + 12|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($88) - ($91))|0;
    $len = $92;
    $93 = $len;
    $94 = $next;
    $95 = (($94) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($93>>>0)>($96>>>0);
    if ($97) {
     $98 = $next;
     $99 = (($98) + 12|0);
     $100 = HEAP32[$99>>2]|0;
     $len = $100;
    }
    $101 = $next;
    $102 = (($101) + 4|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $len;
    $105 = (($103) + ($104)|0);
    $end = $105;
    while(1) {
     $106 = $scan;
     $107 = $end;
     $108 = ($106>>>0)<($107>>>0);
     if (!($108)) {
      break;
     }
     $109 = $hash;
     $110 = $109 << 1;
     $111 = $scan;
     $112 = (($111) + 1|0);
     $scan = $112;
     $113 = HEAP8[$111>>0]|0;
     $114 = $113&255;
     $115 = $110 ^ $114;
     $116 = $115 & 4095;
     $hash = $116;
     $117 = $hash;
     $118 = ($117|0)==(2047);
     if ($118) {
      $119 = $scan;
      $120 = $last;
      $121 = $119;
      $122 = $120;
      $123 = (($121) - ($122))|0;
      $124 = $left;
      $125 = (($123) + ($124))|0;
      $len = $125;
      $left = 0;
      $126 = $job;
      $127 = $len;
      _append_len($126,$127);
      $128 = $scan;
      $last = $128;
     }
    }
    $129 = $job;
    _append_len($129,0);
    $130 = $job;
    $131 = (($130) + 16|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + 12|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ($134|0)==(1);
    if ($135) {
     $136 = $scan;
     $141 = $136;
    } else {
     $137 = $last;
     $141 = $137;
    }
    $138 = $next;
    $139 = (($138) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $142 = $141;
    $143 = $140;
    $144 = (($142) - ($143))|0;
    $len = $144;
    $145 = $len;
    $146 = ($145|0)!=(0);
    if ($146) {
     $147 = $curr;
     $148 = (($147) + 4|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = $curr;
     $151 = (($150) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($149) + ($152)|0);
     $154 = $next;
     $155 = (($154) + 4|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = $len;
     _memcpy(($153|0),($156|0),($157|0))|0;
     $158 = $len;
     $159 = $curr;
     $160 = (($159) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($161) + ($158))|0;
     HEAP32[$160>>2] = $162;
     $163 = $next;
     $164 = (($163) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = $next;
     $167 = (($166) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = $len;
     $170 = (($168) + ($169)|0);
     $171 = $next;
     $172 = (($171) + 12|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $len;
     $175 = (($173) - ($174))|0;
     _memmove(($165|0),($170|0),($175|0))|0;
     $176 = $len;
     $177 = $next;
     $178 = (($177) + 12|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = (($179) - ($176))|0;
     HEAP32[$178>>2] = $180;
     $181 = $len;
     $182 = $scan;
     $183 = (0 - ($181))|0;
     $184 = (($182) + ($183)|0);
     $scan = $184;
     $left = 0;
    } else {
     $185 = $job;
     $186 = (($185) + 16|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = (($187) + 12|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = ($189|0)!=(1);
     if ($190) {
      $191 = $left;
      $192 = ($191|0)!=(0);
      if ($192) {
       $193 = $next;
       $194 = (($193) + 12|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = ($195|0)!=(0);
       if ($196) {
        $197 = $next;
        $hold = $197;
        $198 = (_get_space(66232)|0);
        $next = $198;
        $199 = $next;
        $200 = (($199) + 4|0);
        $201 = HEAP32[$200>>2]|0;
        $202 = $curr;
        $203 = (($202) + 4|0);
        $204 = HEAP32[$203>>2]|0;
        $205 = $curr;
        $206 = (($205) + 12|0);
        $207 = HEAP32[$206>>2]|0;
        $208 = $left;
        $209 = (($207) - ($208))|0;
        $210 = (($204) + ($209)|0);
        $211 = $left;
        _memcpy(($201|0),($210|0),($211|0))|0;
        $212 = $left;
        $213 = $next;
        $214 = (($213) + 12|0);
        HEAP32[$214>>2] = $212;
        $215 = $left;
        $216 = $curr;
        $217 = (($216) + 12|0);
        $218 = HEAP32[$217>>2]|0;
        $219 = (($218) - ($215))|0;
        HEAP32[$217>>2] = $219;
       } else {
        label = 29;
       }
      } else {
       label = 29;
      }
     } else {
      label = 29;
     }
     if ((label|0) == 29) {
      label = 0;
      $left = 0;
     }
    }
   }
  }
  $220 = $curr;
  $221 = $job;
  $222 = (($221) + 8|0);
  HEAP32[$222>>2] = $220;
  $223 = $next;
  $224 = (($223) + 12|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ($225|0)!=(0);
  $227 = $226&1;
  $more = $227;
  $228 = $more;
  $229 = $job;
  $230 = (($229) + 4|0);
  HEAP32[$230>>2] = $228;
  $231 = $dict;
  $232 = $job;
  $233 = (($232) + 12|0);
  HEAP32[$233>>2] = $231;
  $234 = $more;
  $235 = ($234|0)!=(0);
  if ($235) {
   $236 = HEAP32[((80 + 116|0))>>2]|0;
   $237 = ($236|0)!=(0);
   if ($237) {
    $238 = $curr;
    $239 = (($238) + 12|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = ($240>>>0)>=(32768);
    if ($241) {
     label = 36;
    } else {
     $242 = $job;
     $243 = (($242) + 12|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = ($244|0)==(0|0);
     if ($245) {
      label = 36;
     } else {
      $248 = (_get_space(66184)|0);
      $dict = $248;
      $249 = $curr;
      $250 = (($249) + 12|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = (32768 - ($251))|0;
      $len = $252;
      $253 = $dict;
      $254 = (($253) + 4|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = $job;
      $257 = (($256) + 12|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = (($258) + 4|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = $job;
      $262 = (($261) + 12|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = (($263) + 12|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = $len;
      $267 = (($265) - ($266))|0;
      $268 = (($260) + ($267)|0);
      $269 = $len;
      _memcpy(($255|0),($268|0),($269|0))|0;
      $270 = $dict;
      $271 = (($270) + 4|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = $len;
      $274 = (($272) + ($273)|0);
      $275 = $curr;
      $276 = (($275) + 4|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = $curr;
      $279 = (($278) + 12|0);
      $280 = HEAP32[$279>>2]|0;
      _memcpy(($274|0),($277|0),($280|0))|0;
      $281 = $dict;
      $282 = (($281) + 12|0);
      HEAP32[$282>>2] = 32768;
     }
    }
    if ((label|0) == 36) {
     label = 0;
     $246 = $curr;
     $dict = $246;
     $247 = $dict;
     _use_space($247);
    }
   }
  }
  $283 = $seq;
  $284 = $job;
  HEAP32[$284>>2] = $283;
  $285 = $seq;
  $286 = (($285) + 1)|0;
  $seq = $286;
  $287 = ($286|0)<(1);
  if ($287) {
   HEAP32[$vararg_buffer>>2] = 0;
   _try_throw_(75,(67328|0),($vararg_buffer|0));
  }
  $288 = HEAP32[66112>>2]|0;
  $289 = $seq;
  $290 = ($288|0)<($289|0);
  if ($290) {
   $291 = HEAP32[66112>>2]|0;
   $292 = HEAP32[((80 + 112|0))>>2]|0;
   $293 = ($291|0)<($292|0);
   if ($293) {
    (_launch((58|0),(0|0))|0);
    $294 = HEAP32[66112>>2]|0;
    $295 = (($294) + 1)|0;
    HEAP32[66112>>2] = $295;
   }
  }
  $296 = HEAP32[66088>>2]|0;
  _possess(($296|0));
  $297 = $job;
  $298 = (($297) + 28|0);
  HEAP32[$298>>2] = 0;
  $299 = $job;
  $300 = HEAP32[66104>>2]|0;
  HEAP32[$300>>2] = $299;
  $301 = $job;
  $302 = (($301) + 28|0);
  HEAP32[66104>>2] = $302;
  $303 = HEAP32[66088>>2]|0;
  _twist(($303|0),1,1);
  $304 = $more;
  $305 = ($304|0)!=(0);
  if (!($305)) {
   break;
  }
 }
 $306 = $next;
 _drop_space($306);
 $307 = HEAP32[67320>>2]|0;
 _join(($307|0));
 HEAP32[67320>>2] = 0;
 STACKTOP = sp;return;
}
function _copymeta($from,$to) {
 $from = $from|0;
 $to = $to|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $st = 0, $times = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $st = sp + 4|0;
 $times = sp + 80|0;
 $0 = $from;
 $1 = $to;
 $2 = $0;
 $3 = (_stat(($2|0),($st|0))|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  $5 = (($st) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 61440;
  $8 = ($7|0)!=(32768);
  if (!($8)) {
   $9 = $1;
   $10 = (($st) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $11 & 4095;
   (_chmod(($9|0),($12|0))|0);
   $13 = $1;
   $14 = (($st) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($st) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   (_chown(($13|0),($15|0),($17|0))|0);
   $18 = (($st) + 48|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$times>>2] = $19;
   $20 = (($times) + 4|0);
   HEAP32[$20>>2] = 0;
   $21 = (($st) + 56|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($times) + 8|0);
   HEAP32[$23>>2] = $22;
   $24 = (($times) + 8|0);
   $25 = (($24) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = $1;
   (_utimes(($26|0),($times|0))|0);
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _touch($path,$t) {
 $path = $path|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $times = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $times = sp + 8|0;
 $0 = $path;
 $1 = $t;
 $2 = $1;
 HEAP32[$times>>2] = $2;
 $3 = (($times) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = (($times) + 8|0);
 HEAP32[$5>>2] = $4;
 $6 = (($times) + 8|0);
 $7 = (($6) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = $0;
 (_utimes(($8|0),($times|0))|0);
 STACKTOP = sp;return;
}
function _setup_jobs() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[66088>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  $2 = (_new_lock(0)|0);
  HEAP32[66088>>2] = $2;
  HEAP32[66096>>2] = 0;
  HEAP32[66104>>2] = 66096;
  $3 = (_new_lock(-1)|0);
  HEAP32[66256>>2] = $3;
  HEAP32[67456>>2] = 0;
  $4 = HEAP32[((80 + 120|0))>>2]|0;
  $5 = HEAP32[((80 + 112|0))>>2]|0;
  $6 = $5 << 1;
  $7 = (($6) + 3)|0;
  _new_pool(66232,$4,$7);
  $8 = HEAP32[((80 + 120|0))>>2]|0;
  $9 = HEAP32[((80 + 120|0))>>2]|0;
  $10 = $9 >>> 4;
  $11 = (($8) + ($10))|0;
  $12 = (($11) + 32768)|0;
  _new_pool(66208,$12,-1);
  _new_pool(66184,32768,-1);
  $13 = HEAP32[((80 + 120|0))>>2]|0;
  $14 = $13 >>> 11;
  _new_pool(66160,$14,-1);
  STACKTOP = sp;return;
 }
}
function _write_thread($dummy) {
 $dummy = $dummy|0;
 var $$reg2mem118$0 = 0, $$reg2mem120$0 = 0, $$reg2mem122$0 = 0, $$reg2mem124$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $check$0 = 0, $clen$0 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond14 = 0, $cond15 = 0, $cond16 = 0, $cond17 = 0, $cond18 = 0;
 var $cond19 = 0, $cond2 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond25 = 0, $cond26 = 0, $cond27 = 0, $cond28 = 0, $cond29 = 0, $cond3 = 0, $cond30 = 0, $cond31 = 0, $cond32 = 0, $cond33 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0;
 var $cond7 = 0, $cond8 = 0, $cond9 = 0, $err = 0, $seq$0 = 0, $try_pushed_$0 = 0, $try_pushed_$0$phi = 0, $try_pushed_$1 = 0, $try_this_ = 0, $ulen$0 = 0, $vararg_buffer = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $err = sp + 176|0;
 $try_this_ = sp + 4|0;
 $0 = (($try_this_) + 156|0);
 HEAP32[$0>>2] = 0;
 $1 = (($try_this_) + 156|0);
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($try_this_) + 156|0);
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = 0;
 __THREW__ = 0;
 invoke_v(1);
 $5 = __THREW__; __THREW__ = 0;
 if ((($5|0) != 0) & ((threwValue|0) != 0)) { $6 = _testSetjmp(HEAP32[$5>>2]|0, _setjmpTable)|0; if (($6|0) == 0) { _longjmp($5|0, threwValue|0); } tempRet0 = threwValue; } else { $6 = -1; };
 $7 = tempRet0;
 $cond = ($6|0)==(1);
 do {
  if ($cond) {
   $$reg2mem124$0 = $7;$try_pushed_$0 = 1;
  } else {
   $8 = HEAP32[_try_key_>>2]|0;
   __THREW__ = 0;
   $9 = (invoke_ii(2,($8|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
   $12 = tempRet0;
   $cond1 = ($11|0)==(1);
   if ($cond1) {
    $$reg2mem124$0 = $12;$try_pushed_$0 = 1;
   } else {
    $13 = (($try_this_) + 168|0);
    HEAP32[$13>>2] = $9;
    $14 = HEAP32[_try_key_>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_iii(3,($14|0),($try_this_|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = threwValue; } else { $17 = -1; };
    $18 = tempRet0;
    $cond2 = ($17|0)==(1);
    if ($cond2) {
     $$reg2mem124$0 = $18;$try_pushed_$0 = 1;
    } else {
     $19 = ($15|0)==(0);
     if (!($19)) {
      __THREW__ = 0;
      invoke_viiii(4,(8|0),(64|0),1730,(67560|0));
      $20 = __THREW__; __THREW__ = 0;
      if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = threwValue; } else { $21 = -1; };
      $22 = tempRet0;
      $cond3 = ($21|0)==(1);
      if ($cond3) {
       $$reg2mem124$0 = $22;$try_pushed_$0 = 1;
       break;
      }
      // unreachable;
     }
     _saveSetjmp($try_this_,1,_setjmpTable|0)|0;
     __THREW__ = 0;
     $23 = __THREW__; __THREW__ = 0;
     if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
     $25 = tempRet0;
     $cond4 = ($24|0)==(1);
     if ($cond4) {
      $$reg2mem124$0 = $25;$try_pushed_$0 = 1;
     } else {
      $$reg2mem124$0 = 0;$try_pushed_$0 = 1;
     }
    }
   }
  }
 } while(0);
 L14: while(1) {
  $26 = ($$reg2mem124$0|0)<(2);
  do {
   if ($26) {
    __THREW__ = 0;
    $27 = (invoke_i(59)|0);
    $28 = __THREW__; __THREW__ = 0;
    if ((($28|0) != 0) & ((threwValue|0) != 0)) { $29 = _testSetjmp(HEAP32[$28>>2]|0, _setjmpTable)|0; if (($29|0) == 0) { _longjmp($28|0, threwValue|0); } tempRet0 = threwValue; } else { $29 = -1; };
    $30 = tempRet0;
    $cond10 = ($29|0)==(1);
    if ($cond10) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $30;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $31 = HEAP32[((80 + 44|0))>>2]|0;
    $32 = ($31|0)==(1);
    if ($32) {
     __THREW__ = 0;
     $33 = (invoke_iiii(60,0,(0|0),0)|0);
     $34 = __THREW__; __THREW__ = 0;
     if ((($34|0) != 0) & ((threwValue|0) != 0)) { $35 = _testSetjmp(HEAP32[$34>>2]|0, _setjmpTable)|0; if (($35|0) == 0) { _longjmp($34|0, threwValue|0); } tempRet0 = threwValue; } else { $35 = -1; };
     $36 = tempRet0;
     $cond33 = ($35|0)==(1);
     if ($cond33) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $36;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $$reg2mem122$0 = $33;
    } else {
     __THREW__ = 0;
     $37 = (invoke_iiii(61,0,(0|0),0)|0);
     $38 = __THREW__; __THREW__ = 0;
     if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = threwValue; } else { $39 = -1; };
     $40 = tempRet0;
     $cond11 = ($39|0)==(1);
     if ($cond11) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $40;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $$reg2mem122$0 = $37;
    }
    $check$0 = $$reg2mem122$0;$clen$0 = 0;$seq$0 = 0;$ulen$0 = 0;
    while(1) {
     $41 = HEAP32[66256>>2]|0;
     __THREW__ = 0;
     invoke_vi(62,($41|0));
     $42 = __THREW__; __THREW__ = 0;
     if ((($42|0) != 0) & ((threwValue|0) != 0)) { $43 = _testSetjmp(HEAP32[$42>>2]|0, _setjmpTable)|0; if (($43|0) == 0) { _longjmp($42|0, threwValue|0); } tempRet0 = threwValue; } else { $43 = -1; };
     $44 = tempRet0;
     $cond12 = ($43|0)==(1);
     if ($cond12) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $44;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $45 = HEAP32[66256>>2]|0;
     __THREW__ = 0;
     invoke_viii(63,($45|0),0,($seq$0|0));
     $46 = __THREW__; __THREW__ = 0;
     if ((($46|0) != 0) & ((threwValue|0) != 0)) { $47 = _testSetjmp(HEAP32[$46>>2]|0, _setjmpTable)|0; if (($47|0) == 0) { _longjmp($46|0, threwValue|0); } tempRet0 = threwValue; } else { $47 = -1; };
     $48 = tempRet0;
     $cond13 = ($47|0)==(1);
     if ($cond13) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $48;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $49 = HEAP32[67456>>2]|0;
     $50 = (($49) + 28|0);
     $51 = HEAP32[$50>>2]|0;
     HEAP32[67456>>2] = $51;
     $52 = HEAP32[66256>>2]|0;
     $53 = HEAP32[67456>>2]|0;
     $54 = ($53|0)==(0|0);
     if ($54) {
      $$reg2mem120$0 = -1;
     } else {
      $55 = HEAP32[67456>>2]|0;
      $56 = HEAP32[$55>>2]|0;
      $$reg2mem120$0 = $56;
     }
     __THREW__ = 0;
     invoke_viii(64,($52|0),0,($$reg2mem120$0|0));
     $57 = __THREW__; __THREW__ = 0;
     if ((($57|0) != 0) & ((threwValue|0) != 0)) { $58 = _testSetjmp(HEAP32[$57>>2]|0, _setjmpTable)|0; if (($58|0) == 0) { _longjmp($57|0, threwValue|0); } tempRet0 = threwValue; } else { $58 = -1; };
     $59 = tempRet0;
     $cond14 = ($58|0)==(1);
     if ($cond14) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $59;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $60 = (($49) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($49) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + 12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($49) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     __THREW__ = 0;
     invoke_vi(65,($67|0));
     $68 = __THREW__; __THREW__ = 0;
     if ((($68|0) != 0) & ((threwValue|0) != 0)) { $69 = _testSetjmp(HEAP32[$68>>2]|0, _setjmpTable)|0; if (($69|0) == 0) { _longjmp($68|0, threwValue|0); } tempRet0 = threwValue; } else { $69 = -1; };
     $70 = tempRet0;
     $cond15 = ($69|0)==(1);
     if ($cond15) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $70;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $71 = (($ulen$0) + ($65))|0;
     $72 = (($49) + 12|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (($73) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (($clen$0) + ($75))|0;
     $77 = HEAP32[((80 + 8|0))>>2]|0;
     $78 = (($49) + 12|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($49) + 12|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (($83) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     invoke_viii(66,($77|0),($81|0),($85|0));
     $86 = __THREW__; __THREW__ = 0;
     if ((($86|0) != 0) & ((threwValue|0) != 0)) { $87 = _testSetjmp(HEAP32[$86>>2]|0, _setjmpTable)|0; if (($87|0) == 0) { _longjmp($86|0, threwValue|0); } tempRet0 = threwValue; } else { $87 = -1; };
     $88 = tempRet0;
     $cond16 = ($87|0)==(1);
     if ($cond16) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $88;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $89 = (($49) + 12|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     invoke_vi(65,($90|0));
     $91 = __THREW__; __THREW__ = 0;
     if ((($91|0) != 0) & ((threwValue|0) != 0)) { $92 = _testSetjmp(HEAP32[$91>>2]|0, _setjmpTable)|0; if (($92|0) == 0) { _longjmp($91|0, threwValue|0); } tempRet0 = threwValue; } else { $92 = -1; };
     $93 = tempRet0;
     $cond17 = ($92|0)==(1);
     if ($cond17) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $93;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $94 = (($49) + 24|0);
     $95 = HEAP32[$94>>2]|0;
     __THREW__ = 0;
     invoke_vi(62,($95|0));
     $96 = __THREW__; __THREW__ = 0;
     if ((($96|0) != 0) & ((threwValue|0) != 0)) { $97 = _testSetjmp(HEAP32[$96>>2]|0, _setjmpTable)|0; if (($97|0) == 0) { _longjmp($96|0, threwValue|0); } tempRet0 = threwValue; } else { $97 = -1; };
     $98 = tempRet0;
     $cond18 = ($97|0)==(1);
     if ($cond18) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $98;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $99 = (($49) + 24|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     invoke_viii(63,($100|0),0,1);
     $101 = __THREW__; __THREW__ = 0;
     if ((($101|0) != 0) & ((threwValue|0) != 0)) { $102 = _testSetjmp(HEAP32[$101>>2]|0, _setjmpTable)|0; if (($102|0) == 0) { _longjmp($101|0, threwValue|0); } tempRet0 = threwValue; } else { $102 = -1; };
     $103 = tempRet0;
     $cond19 = ($102|0)==(1);
     if ($cond19) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $103;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $104 = (($49) + 24|0);
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     invoke_vi(67,($105|0));
     $106 = __THREW__; __THREW__ = 0;
     if ((($106|0) != 0) & ((threwValue|0) != 0)) { $107 = _testSetjmp(HEAP32[$106>>2]|0, _setjmpTable)|0; if (($107|0) == 0) { _longjmp($106|0, threwValue|0); } tempRet0 = threwValue; } else { $107 = -1; };
     $108 = tempRet0;
     $cond20 = ($107|0)==(1);
     if ($cond20) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $108;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $109 = HEAP32[((80 + 44|0))>>2]|0;
     $110 = ($109|0)==(1);
     if ($110) {
      $111 = (($49) + 20|0);
      $112 = HEAP32[$111>>2]|0;
      __THREW__ = 0;
      $113 = (invoke_iiii(68,($check$0|0),($112|0),($65|0))|0);
      $114 = __THREW__; __THREW__ = 0;
      if ((($114|0) != 0) & ((threwValue|0) != 0)) { $115 = _testSetjmp(HEAP32[$114>>2]|0, _setjmpTable)|0; if (($115|0) == 0) { _longjmp($114|0, threwValue|0); } tempRet0 = threwValue; } else { $115 = -1; };
      $116 = tempRet0;
      $cond32 = ($115|0)==(1);
      if ($cond32) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $116;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $$reg2mem118$0 = $113;
     } else {
      $117 = (($49) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      __THREW__ = 0;
      $119 = (invoke_iiii(69,($check$0|0),($118|0),($65|0))|0);
      $120 = __THREW__; __THREW__ = 0;
      if ((($120|0) != 0) & ((threwValue|0) != 0)) { $121 = _testSetjmp(HEAP32[$120>>2]|0, _setjmpTable)|0; if (($121|0) == 0) { _longjmp($120|0, threwValue|0); } tempRet0 = threwValue; } else { $121 = -1; };
      $122 = tempRet0;
      $cond21 = ($121|0)==(1);
      if ($cond21) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $122;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $$reg2mem118$0 = $119;
     }
     $123 = (($49) + 24|0);
     $124 = HEAP32[$123>>2]|0;
     __THREW__ = 0;
     invoke_vi(70,($124|0));
     $125 = __THREW__; __THREW__ = 0;
     if ((($125|0) != 0) & ((threwValue|0) != 0)) { $126 = _testSetjmp(HEAP32[$125>>2]|0, _setjmpTable)|0; if (($126|0) == 0) { _longjmp($125|0, threwValue|0); } tempRet0 = threwValue; } else { $126 = -1; };
     $127 = tempRet0;
     $cond22 = ($126|0)==(1);
     if ($cond22) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $127;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     __THREW__ = 0;
     invoke_vi(19,($49|0));
     $128 = __THREW__; __THREW__ = 0;
     if ((($128|0) != 0) & ((threwValue|0) != 0)) { $129 = _testSetjmp(HEAP32[$128>>2]|0, _setjmpTable)|0; if (($129|0) == 0) { _longjmp($128|0, threwValue|0); } tempRet0 = threwValue; } else { $129 = -1; };
     $130 = tempRet0;
     $cond23 = ($129|0)==(1);
     if ($cond23) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $130;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $131 = (($seq$0) + 1)|0;
     $132 = ($61|0)!=(0);
     if ($132) {
      $check$0 = $$reg2mem118$0;$clen$0 = $76;$seq$0 = $131;$ulen$0 = $71;
     } else {
      break;
     }
    }
    __THREW__ = 0;
    invoke_viiii(71,($71|0),($76|0),($$reg2mem118$0|0),($27|0));
    $133 = __THREW__; __THREW__ = 0;
    if ((($133|0) != 0) & ((threwValue|0) != 0)) { $134 = _testSetjmp(HEAP32[$133>>2]|0, _setjmpTable)|0; if (($134|0) == 0) { _longjmp($133|0, threwValue|0); } tempRet0 = threwValue; } else { $134 = -1; };
    $135 = tempRet0;
    $cond24 = ($134|0)==(1);
    if ($cond24) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $135;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $136 = HEAP32[66088>>2]|0;
    __THREW__ = 0;
    invoke_vi(62,($136|0));
    $137 = __THREW__; __THREW__ = 0;
    if ((($137|0) != 0) & ((threwValue|0) != 0)) { $138 = _testSetjmp(HEAP32[$137>>2]|0, _setjmpTable)|0; if (($138|0) == 0) { _longjmp($137|0, threwValue|0); } tempRet0 = threwValue; } else { $138 = -1; };
    $139 = tempRet0;
    $cond25 = ($138|0)==(1);
    if ($cond25) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $139;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $140 = HEAP32[66096>>2]|0;
    $141 = ($140|0)==(0|0);
    if ($141) {
     $142 = HEAP32[66088>>2]|0;
     __THREW__ = 0;
     $143 = (invoke_ii(72,($142|0))|0);
     $144 = __THREW__; __THREW__ = 0;
     if ((($144|0) != 0) & ((threwValue|0) != 0)) { $145 = _testSetjmp(HEAP32[$144>>2]|0, _setjmpTable)|0; if (($145|0) == 0) { _longjmp($144|0, threwValue|0); } tempRet0 = threwValue; } else { $145 = -1; };
     $146 = tempRet0;
     $cond27 = ($145|0)==(1);
     if ($cond27) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $146;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $147 = ($143|0)==(0);
     if ($147) {
      $151 = HEAP32[66088>>2]|0;
      __THREW__ = 0;
      invoke_vi(67,($151|0));
      $152 = __THREW__; __THREW__ = 0;
      if ((($152|0) != 0) & ((threwValue|0) != 0)) { $153 = _testSetjmp(HEAP32[$152>>2]|0, _setjmpTable)|0; if (($153|0) == 0) { _longjmp($152|0, threwValue|0); } tempRet0 = threwValue; } else { $153 = -1; };
      $154 = tempRet0;
      $cond28 = ($153|0)==(1);
      if ($cond28) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $154;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $155 = HEAP32[66256>>2]|0;
      __THREW__ = 0;
      invoke_vi(62,($155|0));
      $156 = __THREW__; __THREW__ = 0;
      if ((($156|0) != 0) & ((threwValue|0) != 0)) { $157 = _testSetjmp(HEAP32[$156>>2]|0, _setjmpTable)|0; if (($157|0) == 0) { _longjmp($156|0, threwValue|0); } tempRet0 = threwValue; } else { $157 = -1; };
      $158 = tempRet0;
      $cond29 = ($157|0)==(1);
      if ($cond29) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $158;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $159 = HEAP32[67456>>2]|0;
      $160 = ($159|0)==(0|0);
      if (!($160)) {
       __THREW__ = 0;
       invoke_viiii(4,(67632|0),(64|0),1783,(67560|0));
       $161 = __THREW__; __THREW__ = 0;
       if ((($161|0) != 0) & ((threwValue|0) != 0)) { $162 = _testSetjmp(HEAP32[$161>>2]|0, _setjmpTable)|0; if (($162|0) == 0) { _longjmp($161|0, threwValue|0); } tempRet0 = threwValue; } else { $162 = -1; };
       $163 = tempRet0;
       $cond30 = ($162|0)==(1);
       if ($cond30) {
        $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $163;$try_pushed_$0 = $try_pushed_$0$phi;
        continue L14;
       } else {
        label = 54;
        break L14;
       }
      }
      $164 = HEAP32[66256>>2]|0;
      __THREW__ = 0;
      invoke_viii(64,($164|0),0,-1);
      $165 = __THREW__; __THREW__ = 0;
      if ((($165|0) != 0) & ((threwValue|0) != 0)) { $166 = _testSetjmp(HEAP32[$165>>2]|0, _setjmpTable)|0; if (($166|0) == 0) { _longjmp($165|0, threwValue|0); } tempRet0 = threwValue; } else { $166 = -1; };
      $167 = tempRet0;
      $cond31 = ($166|0)==(1);
      if ($cond31) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $167;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      break;
     }
    }
    __THREW__ = 0;
    invoke_viiii(4,(67576|0),(64|0),1780,(67560|0));
    $148 = __THREW__; __THREW__ = 0;
    if ((($148|0) != 0) & ((threwValue|0) != 0)) { $149 = _testSetjmp(HEAP32[$148>>2]|0, _setjmpTable)|0; if (($149|0) == 0) { _longjmp($148|0, threwValue|0); } tempRet0 = threwValue; } else { $149 = -1; };
    $150 = tempRet0;
    $cond26 = ($149|0)==(1);
    if ($cond26) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $150;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    } else {
     label = 49;
     break L14;
    }
   }
  } while(0);
  $168 = ($try_pushed_$0|0)!=(0);
  if ($168) {
   $169 = HEAP32[_try_key_>>2]|0;
   $170 = (($try_this_) + 168|0);
   $171 = HEAP32[$170>>2]|0;
   __THREW__ = 0;
   $172 = (invoke_iii(3,($169|0),($171|0))|0);
   $173 = __THREW__; __THREW__ = 0;
   if ((($173|0) != 0) & ((threwValue|0) != 0)) { $174 = _testSetjmp(HEAP32[$173>>2]|0, _setjmpTable)|0; if (($174|0) == 0) { _longjmp($173|0, threwValue|0); } tempRet0 = threwValue; } else { $174 = -1; };
   $175 = tempRet0;
   $cond8 = ($174|0)==(1);
   if ($cond8) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $175;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $176 = ($172|0)==(0);
   if (!($176)) {
    __THREW__ = 0;
    invoke_viiii(4,(8|0),(64|0),1786,(67560|0));
    $177 = __THREW__; __THREW__ = 0;
    if ((($177|0) != 0) & ((threwValue|0) != 0)) { $178 = _testSetjmp(HEAP32[$177>>2]|0, _setjmpTable)|0; if (($178|0) == 0) { _longjmp($177|0, threwValue|0); } tempRet0 = threwValue; } else { $178 = -1; };
    $179 = tempRet0;
    $cond9 = ($178|0)==(1);
    if ($cond9) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem124$0 = $179;$try_pushed_$0 = $try_pushed_$0$phi;
     continue;
    } else {
     label = 64;
     break;
    }
   }
   $try_pushed_$1 = 0;
  } else {
   $try_pushed_$1 = $try_pushed_$0;
  }
  $180 = (($try_this_) + 156|0);
  ;HEAP32[$err+0>>2]=HEAP32[$180+0>>2]|0;HEAP32[$err+4>>2]=HEAP32[$180+4>>2]|0;HEAP32[$err+8>>2]=HEAP32[$180+8>>2]|0;
  $181 = HEAP32[$err>>2]|0;
  $182 = ($181|0)!=(0);
  if (!($182)) {
   label = 79;
   break;
  }
  $183 = (($err) + 8|0);
  $184 = HEAP32[$183>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer>>2] = $184;
  (invoke_iii(17,(66072|0),($vararg_buffer|0))|0);
  $185 = __THREW__; __THREW__ = 0;
  if ((($185|0) != 0) & ((threwValue|0) != 0)) { $186 = _testSetjmp(HEAP32[$185>>2]|0, _setjmpTable)|0; if (($186|0) == 0) { _longjmp($185|0, threwValue|0); } tempRet0 = threwValue; } else { $186 = -1; };
  $187 = tempRet0;
  $cond5 = ($186|0)==(1);
  if ($cond5) {
   $$reg2mem124$0 = $187;$try_pushed_$0 = $try_pushed_$1;
   continue;
  }
  $188 = (($err) + 4|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ($189|0)!=(0);
  if ($190) {
   $191 = (($err) + 8|0);
   $192 = HEAP32[$191>>2]|0;
   __THREW__ = 0;
   invoke_vi(19,($192|0));
   $193 = __THREW__; __THREW__ = 0;
   if ((($193|0) != 0) & ((threwValue|0) != 0)) { $194 = _testSetjmp(HEAP32[$193>>2]|0, _setjmpTable)|0; if (($194|0) == 0) { _longjmp($193|0, threwValue|0); } tempRet0 = threwValue; } else { $194 = -1; };
   $195 = tempRet0;
   $cond7 = ($194|0)==(1);
   if ($cond7) {
    $$reg2mem124$0 = $195;$try_pushed_$0 = $try_pushed_$1;
    continue;
   }
   $196 = (($err) + 4|0);
   HEAP32[$196>>2] = 0;
   $197 = (($err) + 8|0);
   HEAP32[$197>>2] = 0;
  }
  $198 = HEAP32[$err>>2]|0;
  $199 = (0 - ($198))|0;
  __THREW__ = 0;
  invoke_vi(7,($199|0));
  $200 = __THREW__; __THREW__ = 0;
  if ((($200|0) != 0) & ((threwValue|0) != 0)) { $201 = _testSetjmp(HEAP32[$200>>2]|0, _setjmpTable)|0; if (($201|0) == 0) { _longjmp($200|0, threwValue|0); } tempRet0 = threwValue; } else { $201 = -1; };
  $202 = tempRet0;
  $cond6 = ($201|0)==(1);
  if ($cond6) {
   $$reg2mem124$0 = $202;$try_pushed_$0 = $try_pushed_$1;
  } else {
   label = 77;
   break;
  }
 }
 if ((label|0) == 49) {
  // unreachable;
 }
 else if ((label|0) == 54) {
  // unreachable;
 }
 else if ((label|0) == 64) {
  // unreachable;
 }
 else if ((label|0) == 77) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 79) {
  STACKTOP = sp;return;
 }
}
function _get_space($pool) {
 $pool = $pool|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $space = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pool;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 _possess(($3|0));
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  _wait_for(($9|0),1,0);
 }
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $1;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $space = $16;
  $17 = $space;
  $18 = HEAP32[$17>>2]|0;
  _possess(($18|0));
  $19 = $space;
  $20 = (($19) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  $23 = (($22) + 4|0);
  HEAP32[$23>>2] = $21;
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  _twist(($25|0),1,-1);
  $26 = $space;
  $27 = HEAP32[$26>>2]|0;
  _twist(($27|0),0,1);
  $28 = $space;
  $29 = (($28) + 12|0);
  HEAP32[$29>>2] = 0;
  $30 = $space;
  $0 = $30;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 }
 $31 = $1;
 $32 = (($31) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  ___assert_fail((67520|0),(64|0),1277,(67544|0));
  // unreachable;
 }
 $35 = $1;
 $36 = (($35) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)>(0);
 if ($38) {
  $39 = $1;
  $40 = (($39) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + -1)|0;
  HEAP32[$40>>2] = $42;
 }
 $43 = $1;
 $44 = (($43) + 16|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[$44>>2] = $46;
 $47 = $1;
 $48 = HEAP32[$47>>2]|0;
 _release(($48|0));
 $49 = (_alloc(0,24)|0);
 $space = $49;
 $50 = (_new_lock(1)|0);
 $51 = $space;
 HEAP32[$51>>2] = $50;
 $52 = $1;
 $53 = (($52) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (_alloc(0,$54)|0);
 $56 = $space;
 $57 = (($56) + 4|0);
 HEAP32[$57>>2] = $55;
 $58 = $1;
 $59 = (($58) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $space;
 $62 = (($61) + 8|0);
 HEAP32[$62>>2] = $60;
 $63 = $space;
 $64 = (($63) + 12|0);
 HEAP32[$64>>2] = 0;
 $65 = $1;
 $66 = $space;
 $67 = (($66) + 16|0);
 HEAP32[$67>>2] = $65;
 $68 = $space;
 $0 = $68;
 $69 = $0;
 STACKTOP = sp;return ($69|0);
}
function _append_len($job,$len) {
 $job = $job|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lens = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $job;
 $1 = $len;
 $2 = $1;
 $3 = ($2>>>0)<(539000896);
 if (!($3)) {
  ___assert_fail((67480|0),(64|0),1796,(67504|0));
  // unreachable;
 }
 $4 = $0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (_get_space(66160)|0);
  $9 = $0;
  $10 = (($9) + 16|0);
  HEAP32[$10>>2] = $8;
 }
 $11 = $0;
 $12 = (($11) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $lens = $13;
 $14 = $lens;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $lens;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 3)|0;
 $21 = ($16>>>0)<($20>>>0);
 if ($21) {
  $22 = $lens;
  _grow_space($22);
 }
 $23 = $1;
 $24 = ($23>>>0)<(64);
 if ($24) {
  $25 = $1;
  $26 = (($25) + 128)|0;
  $27 = $26&255;
  $28 = $lens;
  $29 = (($28) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$29>>2] = $31;
  $32 = $lens;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($30)|0);
  HEAP8[$35>>0] = $27;
  STACKTOP = sp;return;
 }
 $36 = $1;
 $37 = ($36>>>0)<(32832);
 if ($37) {
  $38 = $1;
  $39 = (($38) - 64)|0;
  $1 = $39;
  $40 = $1;
  $41 = $40 >>> 8;
  $42 = $41&255;
  $43 = $lens;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$44>>2] = $46;
  $47 = $lens;
  $48 = (($47) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($45)|0);
  HEAP8[$50>>0] = $42;
  $51 = $1;
  $52 = $51&255;
  $53 = $lens;
  $54 = (($53) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 1)|0;
  HEAP32[$54>>2] = $56;
  $57 = $lens;
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($55)|0);
  HEAP8[$60>>0] = $52;
 } else {
  $61 = $1;
  $62 = ($61>>>0)<(2129984);
  if ($62) {
   $63 = $1;
   $64 = (($63) - 32832)|0;
   $1 = $64;
   $65 = $1;
   $66 = $65 >>> 16;
   $67 = (($66) + 192)|0;
   $68 = $67&255;
   $69 = $lens;
   $70 = (($69) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 1)|0;
   HEAP32[$70>>2] = $72;
   $73 = $lens;
   $74 = (($73) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + ($71)|0);
   HEAP8[$76>>0] = $68;
   $77 = $1;
   $78 = $77 >>> 8;
   $79 = $78&255;
   $80 = $lens;
   $81 = (($80) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + 1)|0;
   HEAP32[$81>>2] = $83;
   $84 = $lens;
   $85 = (($84) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + ($82)|0);
   HEAP8[$87>>0] = $79;
   $88 = $1;
   $89 = $88&255;
   $90 = $lens;
   $91 = (($90) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + 1)|0;
   HEAP32[$91>>2] = $93;
   $94 = $lens;
   $95 = (($94) + 4|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + ($92)|0);
   HEAP8[$97>>0] = $89;
  } else {
   $98 = $1;
   $99 = (($98) - 2129984)|0;
   $1 = $99;
   $100 = $1;
   $101 = $100 >>> 24;
   $102 = (($101) + 224)|0;
   $103 = $102&255;
   $104 = $lens;
   $105 = (($104) + 12|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + 1)|0;
   HEAP32[$105>>2] = $107;
   $108 = $lens;
   $109 = (($108) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + ($106)|0);
   HEAP8[$111>>0] = $103;
   $112 = $1;
   $113 = $112 >>> 16;
   $114 = $113&255;
   $115 = $lens;
   $116 = (($115) + 12|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + 1)|0;
   HEAP32[$116>>2] = $118;
   $119 = $lens;
   $120 = (($119) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + ($117)|0);
   HEAP8[$122>>0] = $114;
   $123 = $1;
   $124 = $123 >>> 8;
   $125 = $124&255;
   $126 = $lens;
   $127 = (($126) + 12|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (($128) + 1)|0;
   HEAP32[$127>>2] = $129;
   $130 = $lens;
   $131 = (($130) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (($132) + ($128)|0);
   HEAP8[$133>>0] = $125;
   $134 = $1;
   $135 = $134&255;
   $136 = $lens;
   $137 = (($136) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($138) + 1)|0;
   HEAP32[$137>>2] = $139;
   $140 = $lens;
   $141 = (($140) + 4|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + ($138)|0);
   HEAP8[$143>>0] = $135;
  }
 }
 STACKTOP = sp;return;
}
function _use_space($space) {
 $space = $space|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $space;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _possess(($2|0));
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 _twist(($4|0),1,1);
 STACKTOP = sp;return;
}
function _compress_thread($dummy) {
 $dummy = $dummy|0;
 var $$reg2mem178$0 = 0, $$reg2mem180$0 = 0, $$reg2mem182$0 = 0, $$reg2mem186$0 = 0, $$reg2mem190$0 = 0, $$reg2mem192$0 = 0, $$reg2mem194$0 = 0, $$reg2mem198$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0, $bits1 = 0, $check$0 = 0, $cond = 0;
 var $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond14 = 0, $cond15 = 0, $cond16 = 0, $cond17 = 0, $cond18 = 0, $cond19 = 0, $cond2 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond25 = 0, $cond26 = 0, $cond27 = 0;
 var $cond28 = 0, $cond29 = 0, $cond3 = 0, $cond30 = 0, $cond31 = 0, $cond32 = 0, $cond33 = 0, $cond34 = 0, $cond35 = 0, $cond36 = 0, $cond37 = 0, $cond38 = 0, $cond39 = 0, $cond4 = 0, $cond40 = 0, $cond41 = 0, $cond42 = 0, $cond43 = 0, $cond44 = 0, $cond45 = 0;
 var $cond46 = 0, $cond47 = 0, $cond48 = 0, $cond49 = 0, $cond5 = 0, $cond50 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, $err = 0, $left$0 = 0, $len$0 = 0, $len$1 = 0, $len$2 = 0, $len$3 = 0, $len$4 = 0, $len$5 = 0, $next$0 = 0, $next$1 = 0;
 var $next$2 = 0, $next$3 = 0, $next$4 = 0, $next$5 = 0, $next$6 = 0, $out = 0, $outsize = 0, $prior$0 = 0, $strm = 0, $temp$0 = 0, $temp$0$phi = 0, $temp$1 = 0, $temp$2 = 0, $temp$3 = 0, $temp$4 = 0, $try_pushed_$0 = 0, $try_pushed_$0$phi = 0, $try_pushed_$1 = 0, $try_this_ = 0, $vararg_buffer = 0;
 var $vararg_buffer202 = 0, $vararg_buffer205 = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer205 = sp + 16|0;
 $vararg_buffer202 = sp;
 $vararg_buffer = sp + 8|0;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $bits = sp + 256|0;
 $strm = sp + 200|0;
 $err = sp + 260|0;
 $try_this_ = sp + 20|0;
 $bits1 = sp + 272|0;
 $out = sp + 192|0;
 $outsize = sp + 196|0;
 $0 = (($try_this_) + 156|0);
 HEAP32[$0>>2] = 0;
 $1 = (($try_this_) + 156|0);
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($try_this_) + 156|0);
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = 0;
 __THREW__ = 0;
 invoke_v(1);
 $5 = __THREW__; __THREW__ = 0;
 if ((($5|0) != 0) & ((threwValue|0) != 0)) { $6 = _testSetjmp(HEAP32[$5>>2]|0, _setjmpTable)|0; if (($6|0) == 0) { _longjmp($5|0, threwValue|0); } tempRet0 = threwValue; } else { $6 = -1; };
 $7 = tempRet0;
 $cond = ($6|0)==(1);
 do {
  if ($cond) {
   $$reg2mem198$0 = $7;$temp$0 = 0;$try_pushed_$0 = 1;
  } else {
   $8 = HEAP32[_try_key_>>2]|0;
   __THREW__ = 0;
   $9 = (invoke_ii(2,($8|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
   $12 = tempRet0;
   $cond1 = ($11|0)==(1);
   if ($cond1) {
    $$reg2mem198$0 = $12;$temp$0 = 0;$try_pushed_$0 = 1;
   } else {
    $13 = (($try_this_) + 168|0);
    HEAP32[$13>>2] = $9;
    $14 = HEAP32[_try_key_>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_iii(3,($14|0),($try_this_|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = threwValue; } else { $17 = -1; };
    $18 = tempRet0;
    $cond2 = ($17|0)==(1);
    if ($cond2) {
     $$reg2mem198$0 = $18;$temp$0 = 0;$try_pushed_$0 = 1;
    } else {
     $19 = ($15|0)==(0);
     if (!($19)) {
      __THREW__ = 0;
      invoke_viiii(4,(8|0),(64|0),1500,(67376|0));
      $20 = __THREW__; __THREW__ = 0;
      if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = threwValue; } else { $21 = -1; };
      $22 = tempRet0;
      $cond3 = ($21|0)==(1);
      if ($cond3) {
       $$reg2mem198$0 = $22;$temp$0 = 0;$try_pushed_$0 = 1;
       break;
      }
      // unreachable;
     }
     _saveSetjmp($try_this_,1,_setjmpTable|0)|0;
     __THREW__ = 0;
     $23 = __THREW__; __THREW__ = 0;
     if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
     $25 = tempRet0;
     $cond4 = ($24|0)==(1);
     if ($cond4) {
      $$reg2mem198$0 = $25;$temp$0 = 0;$try_pushed_$0 = 1;
     } else {
      $$reg2mem198$0 = 0;$temp$0 = 0;$try_pushed_$0 = 1;
     }
    }
   }
  }
 } while(0);
 L14: while(1) {
  $26 = ($$reg2mem198$0|0)<(2);
  do {
   if ($26) {
    $27 = (($strm) + 36|0);
    HEAP32[$27>>2] = 0;
    $28 = (($strm) + 32|0);
    HEAP32[$28>>2] = 0;
    $29 = (($strm) + 40|0);
    HEAP32[$29>>2] = 0;
    __THREW__ = 0;
    $30 = (invoke_iiiiiiiii(73,($strm|0),6,8,-15,8,0,(66344|0),56)|0);
    $31 = __THREW__; __THREW__ = 0;
    if ((($31|0) != 0) & ((threwValue|0) != 0)) { $32 = _testSetjmp(HEAP32[$31>>2]|0, _setjmpTable)|0; if (($32|0) == 0) { _longjmp($31|0, threwValue|0); } tempRet0 = threwValue; } else { $32 = -1; };
    $33 = tempRet0;
    $cond10 = ($32|0)==(1);
    if ($cond10) {
     $try_pushed_$0$phi = $try_pushed_$0;$temp$0$phi = $temp$0;$$reg2mem198$0 = $33;$try_pushed_$0 = $try_pushed_$0$phi;$temp$0 = $temp$0$phi;
     continue L14;
    }
    $34 = ($30|0)==(-4);
    if ($34) {
     __THREW__ = 0;
     HEAP32[$vararg_buffer>>2] = 0;
     invoke_viii(12,12,(66352|0),($vararg_buffer|0));
     $35 = __THREW__; __THREW__ = 0;
     if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = threwValue; } else { $36 = -1; };
     $37 = tempRet0;
     $cond50 = ($36|0)==(1);
     if ($cond50) {
      $try_pushed_$0$phi = $try_pushed_$0;$temp$0$phi = $temp$0;$$reg2mem198$0 = $37;$try_pushed_$0 = $try_pushed_$0$phi;$temp$0 = $temp$0$phi;
      continue L14;
     }
    }
    $38 = ($30|0)!=(0);
    if ($38) {
     __THREW__ = 0;
     HEAP32[$vararg_buffer202>>2] = 0;
     invoke_viii(12,22,(66376|0),($vararg_buffer202|0));
     $39 = __THREW__; __THREW__ = 0;
     if ((($39|0) != 0) & ((threwValue|0) != 0)) { $40 = _testSetjmp(HEAP32[$39>>2]|0, _setjmpTable)|0; if (($40|0) == 0) { _longjmp($39|0, threwValue|0); } tempRet0 = threwValue; } else { $40 = -1; };
     $41 = tempRet0;
     $cond49 = ($40|0)==(1);
     if ($cond49) {
      $try_pushed_$0$phi = $try_pushed_$0;$temp$0$phi = $temp$0;$$reg2mem198$0 = $41;$try_pushed_$0 = $try_pushed_$0$phi;$temp$0 = $temp$0$phi;
      continue L14;
     }
    }
    $temp$1 = $temp$0;
    L28: while(1) {
     $42 = HEAP32[66088>>2]|0;
     __THREW__ = 0;
     invoke_vi(62,($42|0));
     $43 = __THREW__; __THREW__ = 0;
     if ((($43|0) != 0) & ((threwValue|0) != 0)) { $44 = _testSetjmp(HEAP32[$43>>2]|0, _setjmpTable)|0; if (($44|0) == 0) { _longjmp($43|0, threwValue|0); } tempRet0 = threwValue; } else { $44 = -1; };
     $45 = tempRet0;
     $cond11 = ($44|0)==(1);
     if ($cond11) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $45;$temp$0 = $temp$1;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $46 = HEAP32[66088>>2]|0;
     __THREW__ = 0;
     invoke_viii(63,($46|0),1,0);
     $47 = __THREW__; __THREW__ = 0;
     if ((($47|0) != 0) & ((threwValue|0) != 0)) { $48 = _testSetjmp(HEAP32[$47>>2]|0, _setjmpTable)|0; if (($48|0) == 0) { _longjmp($47|0, threwValue|0); } tempRet0 = threwValue; } else { $48 = -1; };
     $49 = tempRet0;
     $cond12 = ($48|0)==(1);
     if ($cond12) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $49;$temp$0 = $temp$1;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $50 = HEAP32[66096>>2]|0;
     $51 = ($50|0)!=(0|0);
     if (!($51)) {
      label = 26;
      break;
     }
     $55 = HEAP32[$50>>2]|0;
     $56 = ($55|0)==(-1);
     if ($56) {
      label = 29;
      break;
     }
     $57 = (($50) + 28|0);
     $58 = HEAP32[$57>>2]|0;
     HEAP32[66096>>2] = $58;
     $59 = (($50) + 28|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      HEAP32[66104>>2] = 66096;
     }
     $62 = HEAP32[66088>>2]|0;
     __THREW__ = 0;
     invoke_viii(64,($62|0),1,-1);
     $63 = __THREW__; __THREW__ = 0;
     if ((($63|0) != 0) & ((threwValue|0) != 0)) { $64 = _testSetjmp(HEAP32[$63>>2]|0, _setjmpTable)|0; if (($64|0) == 0) { _longjmp($63|0, threwValue|0); } tempRet0 = threwValue; } else { $64 = -1; };
     $65 = tempRet0;
     $cond14 = ($64|0)==(1);
     if ($cond14) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $65;$temp$0 = $temp$1;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $66 = HEAP32[((80 + 80|0))>>2]|0;
     $67 = ($66|0)<=(9);
     if ($67) {
      __THREW__ = 0;
      (invoke_ii(74,($strm|0))|0);
      $68 = __THREW__; __THREW__ = 0;
      if ((($68|0) != 0) & ((threwValue|0) != 0)) { $69 = _testSetjmp(HEAP32[$68>>2]|0, _setjmpTable)|0; if (($69|0) == 0) { _longjmp($68|0, threwValue|0); } tempRet0 = threwValue; } else { $69 = -1; };
      $70 = tempRet0;
      $cond44 = ($69|0)==(1);
      if ($cond44) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $70;$temp$0 = $temp$1;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $71 = HEAP32[((80 + 80|0))>>2]|0;
      __THREW__ = 0;
      (invoke_iiii(75,($strm|0),($71|0),0)|0);
      $72 = __THREW__; __THREW__ = 0;
      if ((($72|0) != 0) & ((threwValue|0) != 0)) { $73 = _testSetjmp(HEAP32[$72>>2]|0, _setjmpTable)|0; if (($73|0) == 0) { _longjmp($72|0, threwValue|0); } tempRet0 = threwValue; } else { $73 = -1; };
      $74 = tempRet0;
      $cond45 = ($73|0)==(1);
      if ($cond45) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $74;$temp$0 = $temp$1;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $temp$3 = $temp$1;
     } else {
      $75 = ($temp$1|0)==(0|0);
      if ($75) {
       __THREW__ = 0;
       $76 = (invoke_ii(76,(66208|0))|0);
       $77 = __THREW__; __THREW__ = 0;
       if ((($77|0) != 0) & ((threwValue|0) != 0)) { $78 = _testSetjmp(HEAP32[$77>>2]|0, _setjmpTable)|0; if (($78|0) == 0) { _longjmp($77|0, threwValue|0); } tempRet0 = threwValue; } else { $78 = -1; };
       $79 = tempRet0;
       $cond43 = ($78|0)==(1);
       if ($cond43) {
        $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $79;$temp$0 = $temp$1;$try_pushed_$0 = $try_pushed_$0$phi;
        continue L14;
       }
       $temp$2 = $76;
      } else {
       $temp$2 = $temp$1;
      }
      $80 = (($temp$2) + 12|0);
      HEAP32[$80>>2] = 0;
      $temp$3 = $temp$2;
     }
     $81 = (($50) + 12|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)!=(0|0);
     if ($83) {
      $84 = (($50) + 12|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (($85) + 12|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ($87>>>0)<(32768);
      if ($88) {
       $$reg2mem194$0 = $87;
      } else {
       $$reg2mem194$0 = 32768;
      }
      $89 = HEAP32[((80 + 80|0))>>2]|0;
      $90 = ($89|0)<=(9);
      if ($90) {
       $91 = (($50) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (($92) + 4|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = (($87) - ($$reg2mem194$0))|0;
       $96 = (($94) + ($95)|0);
       __THREW__ = 0;
       (invoke_iiii(77,($strm|0),($96|0),($$reg2mem194$0|0))|0);
       $97 = __THREW__; __THREW__ = 0;
       if ((($97|0) != 0) & ((threwValue|0) != 0)) { $98 = _testSetjmp(HEAP32[$97>>2]|0, _setjmpTable)|0; if (($98|0) == 0) { _longjmp($97|0, threwValue|0); } tempRet0 = threwValue; } else { $98 = -1; };
       $99 = tempRet0;
       $cond42 = ($98|0)==(1);
       if ($cond42) {
        $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $99;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
        continue L14;
       }
      } else {
       $100 = (($temp$3) + 4|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = (($50) + 12|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (($103) + 4|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($87) - ($$reg2mem194$0))|0;
       $107 = (($105) + ($106)|0);
       _memcpy(($101|0),($107|0),($$reg2mem194$0|0))|0;
       $108 = (($temp$3) + 12|0);
       HEAP32[$108>>2] = $$reg2mem194$0;
      }
      $109 = (($50) + 12|0);
      $110 = HEAP32[$109>>2]|0;
      __THREW__ = 0;
      invoke_vi(65,($110|0));
      $111 = __THREW__; __THREW__ = 0;
      if ((($111|0) != 0) & ((threwValue|0) != 0)) { $112 = _testSetjmp(HEAP32[$111>>2]|0, _setjmpTable)|0; if (($112|0) == 0) { _longjmp($111|0, threwValue|0); } tempRet0 = threwValue; } else { $112 = -1; };
      $113 = tempRet0;
      $cond41 = ($112|0)==(1);
      if ($cond41) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $113;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
     }
     __THREW__ = 0;
     $114 = (invoke_ii(76,(66208|0))|0);
     $115 = __THREW__; __THREW__ = 0;
     if ((($115|0) != 0) & ((threwValue|0) != 0)) { $116 = _testSetjmp(HEAP32[$115>>2]|0, _setjmpTable)|0; if (($116|0) == 0) { _longjmp($115|0, threwValue|0); } tempRet0 = threwValue; } else { $116 = -1; };
     $117 = tempRet0;
     $cond15 = ($116|0)==(1);
     if ($cond15) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $117;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $118 = (($50) + 12|0);
     HEAP32[$118>>2] = $114;
     $119 = HEAP32[((80 + 80|0))>>2]|0;
     $120 = ($119|0)<=(9);
     if ($120) {
      $121 = (($50) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($122) + 4|0);
      $124 = HEAP32[$123>>2]|0;
      HEAP32[$strm>>2] = $124;
      $125 = (($50) + 12|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = (($126) + 4|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (($strm) + 12|0);
      HEAP32[$129>>2] = $128;
     } else {
      $130 = (($temp$3) + 4|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = (($temp$3) + 12|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = (($131) + ($133)|0);
      $135 = (($50) + 8|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = (($136) + 4|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = (($50) + 8|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($140) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      _memcpy(($134|0),($138|0),($142|0))|0;
     }
     $143 = (($50) + 16|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($144|0)==(0|0);
     if ($145) {
      $$reg2mem192$0 = 0;
     } else {
      $146 = (($50) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($147) + 4|0);
      $149 = HEAP32[$148>>2]|0;
      $$reg2mem192$0 = $149;
     }
     $150 = (($50) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = (($151) + 12|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = (($50) + 12|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (($155) + 12|0);
     HEAP32[$156>>2] = 0;
     $left$0 = $153;$next$0 = $$reg2mem192$0;
     while(1) {
      $157 = ($next$0|0)==(0|0);
      if ($157) {
       $$reg2mem190$0 = 128;$next$1 = $next$0;
      } else {
       $158 = (($next$0) + 1|0);
       $159 = HEAP8[$next$0>>0]|0;
       $160 = $159&255;
       $$reg2mem190$0 = $160;$next$1 = $158;
      }
      $161 = ($$reg2mem190$0>>>0)<(128);
      if ($161) {
       $162 = $$reg2mem190$0 << 8;
       $163 = (($next$1) + 1|0);
       $164 = HEAP8[$next$1>>0]|0;
       $165 = $164&255;
       $166 = (($162) + ($165))|0;
       $167 = (($166) + 64)|0;
       $len$3 = $167;$next$5 = $163;
      } else {
       $168 = ($$reg2mem190$0|0)==(128);
       if ($168) {
        $len$2 = $left$0;$next$4 = $next$1;
       } else {
        $169 = ($$reg2mem190$0>>>0)<(192);
        if ($169) {
         $170 = $$reg2mem190$0 & 63;
         $len$1 = $170;$next$3 = $next$1;
        } else {
         $171 = ($$reg2mem190$0>>>0)<(224);
         if ($171) {
          $172 = $$reg2mem190$0 & 31;
          $173 = $172 << 16;
          $174 = (($next$1) + 1|0);
          $175 = HEAP8[$next$1>>0]|0;
          $176 = $175&255;
          $177 = $176 << 8;
          $178 = (($173) + ($177))|0;
          $179 = (($174) + 1|0);
          $180 = HEAP8[$174>>0]|0;
          $181 = $180&255;
          $182 = (($181) + 32832)|0;
          $183 = (($178) + ($182))|0;
          $len$0 = $183;$next$2 = $179;
         } else {
          $184 = $$reg2mem190$0 & 31;
          $185 = $184 << 24;
          $186 = (($next$1) + 1|0);
          $187 = HEAP8[$next$1>>0]|0;
          $188 = $187&255;
          $189 = $188 << 16;
          $190 = (($185) + ($189))|0;
          $191 = (($186) + 1|0);
          $192 = HEAP8[$186>>0]|0;
          $193 = $192&255;
          $194 = $193 << 8;
          $195 = (($190) + ($194))|0;
          $196 = (($191) + 1|0);
          $197 = HEAP8[$191>>0]|0;
          $198 = $197&255;
          $199 = (($198) + 2129984)|0;
          $200 = (($195) + ($199))|0;
          $len$0 = $200;$next$2 = $196;
         }
         $len$1 = $len$0;$next$3 = $next$2;
        }
        $len$2 = $len$1;$next$4 = $next$3;
       }
       $len$3 = $len$2;$next$5 = $next$4;
      }
      $201 = (($left$0) - ($len$3))|0;
      $202 = HEAP32[((80 + 80|0))>>2]|0;
      $203 = ($202|0)<=(9);
      if ($203) {
       $len$4 = $len$3;
       while(1) {
        $204 = ($len$4>>>0)>(2147483648);
        if (!($204)) {
         break;
        }
        $205 = (($strm) + 4|0);
        HEAP32[$205>>2] = -2147483648;
        $206 = (($50) + 12|0);
        $207 = HEAP32[$206>>2]|0;
        __THREW__ = 0;
        invoke_viii(78,($strm|0),($207|0),0);
        $208 = __THREW__; __THREW__ = 0;
        if ((($208|0) != 0) & ((threwValue|0) != 0)) { $209 = _testSetjmp(HEAP32[$208>>2]|0, _setjmpTable)|0; if (($209|0) == 0) { _longjmp($208|0, threwValue|0); } tempRet0 = threwValue; } else { $209 = -1; };
        $210 = tempRet0;
        $cond40 = ($209|0)==(1);
        if ($cond40) {
         $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $210;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
         continue L14;
        }
        $211 = (($len$4) - -2147483648)|0;
        $len$4 = $211;
       }
       $212 = (($strm) + 4|0);
       HEAP32[$212>>2] = $len$4;
       $213 = ($201|0)!=(0);
       do {
        if ($213) {
         label = 81;
        } else {
         $214 = (($50) + 4|0);
         $215 = HEAP32[$214>>2]|0;
         $216 = ($215|0)!=(0);
         if ($216) {
          label = 81;
          break;
         }
         $256 = (($50) + 12|0);
         $257 = HEAP32[$256>>2]|0;
         __THREW__ = 0;
         invoke_viii(78,($strm|0),($257|0),4);
         $258 = __THREW__; __THREW__ = 0;
         if ((($258|0) != 0) & ((threwValue|0) != 0)) { $259 = _testSetjmp(HEAP32[$258>>2]|0, _setjmpTable)|0; if (($259|0) == 0) { _longjmp($258|0, threwValue|0); } tempRet0 = threwValue; } else { $259 = -1; };
         $260 = tempRet0;
         $cond32 = ($259|0)==(1);
         if ($cond32) {
          $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $260;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
          continue L14;
         }
        }
       } while(0);
       if ((label|0) == 81) {
        label = 0;
        $217 = (($50) + 12|0);
        $218 = HEAP32[$217>>2]|0;
        __THREW__ = 0;
        invoke_viii(78,($strm|0),($218|0),5);
        $219 = __THREW__; __THREW__ = 0;
        if ((($219|0) != 0) & ((threwValue|0) != 0)) { $220 = _testSetjmp(HEAP32[$219>>2]|0, _setjmpTable)|0; if (($220|0) == 0) { _longjmp($219|0, threwValue|0); } tempRet0 = threwValue; } else { $220 = -1; };
        $221 = tempRet0;
        $cond33 = ($220|0)==(1);
        if ($cond33) {
         $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $221;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
         continue L14;
        }
        __THREW__ = 0;
        (invoke_iiii(79,($strm|0),(0|0),($bits|0))|0);
        $222 = __THREW__; __THREW__ = 0;
        if ((($222|0) != 0) & ((threwValue|0) != 0)) { $223 = _testSetjmp(HEAP32[$222>>2]|0, _setjmpTable)|0; if (($223|0) == 0) { _longjmp($222|0, threwValue|0); } tempRet0 = threwValue; } else { $223 = -1; };
        $224 = tempRet0;
        $cond34 = ($223|0)==(1);
        if ($cond34) {
         $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $224;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
         continue L14;
        }
        $225 = HEAP32[$bits>>2]|0;
        $226 = $225 & 1;
        $227 = ($226|0)!=(0);
        if ($227) {
         $228 = (($50) + 12|0);
         $229 = HEAP32[$228>>2]|0;
         __THREW__ = 0;
         invoke_viii(78,($strm|0),($229|0),2);
         $230 = __THREW__; __THREW__ = 0;
         if ((($230|0) != 0) & ((threwValue|0) != 0)) { $231 = _testSetjmp(HEAP32[$230>>2]|0, _setjmpTable)|0; if (($231|0) == 0) { _longjmp($230|0, threwValue|0); } tempRet0 = threwValue; } else { $231 = -1; };
         $232 = tempRet0;
         $cond39 = ($231|0)==(1);
         if ($cond39) {
          $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $232;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
          continue L14;
         }
        } else {
         $233 = HEAP32[$bits>>2]|0;
         $234 = $233 & 7;
         $235 = ($234|0)!=(0);
         if ($235) {
          while(1) {
           __THREW__ = 0;
           $236 = (invoke_iiii(80,($strm|0),10,2)|0);
           $237 = __THREW__; __THREW__ = 0;
           if ((($237|0) != 0) & ((threwValue|0) != 0)) { $238 = _testSetjmp(HEAP32[$237>>2]|0, _setjmpTable)|0; if (($238|0) == 0) { _longjmp($237|0, threwValue|0); } tempRet0 = threwValue; } else { $238 = -1; };
           $239 = tempRet0;
           $cond35 = ($238|0)==(1);
           if ($cond35) {
            $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $239;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
            continue L14;
           }
           HEAP32[$bits>>2] = $236;
           $240 = HEAP32[$bits>>2]|0;
           $241 = ($240|0)==(0);
           if (!($241)) {
            label = 90;
            break L28;
           }
           __THREW__ = 0;
           (invoke_iiii(79,($strm|0),(0|0),($bits|0))|0);
           $245 = __THREW__; __THREW__ = 0;
           if ((($245|0) != 0) & ((threwValue|0) != 0)) { $246 = _testSetjmp(HEAP32[$245>>2]|0, _setjmpTable)|0; if (($246|0) == 0) { _longjmp($245|0, threwValue|0); } tempRet0 = threwValue; } else { $246 = -1; };
           $247 = tempRet0;
           $cond37 = ($246|0)==(1);
           if ($cond37) {
            $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $247;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
            continue L14;
           }
           $248 = HEAP32[$bits>>2]|0;
           $249 = $248 & 7;
           $250 = ($249|0)!=(0);
           if (!($250)) {
            break;
           }
          }
          $251 = (($50) + 12|0);
          $252 = HEAP32[$251>>2]|0;
          __THREW__ = 0;
          invoke_viii(78,($strm|0),($252|0),5);
          $253 = __THREW__; __THREW__ = 0;
          if ((($253|0) != 0) & ((threwValue|0) != 0)) { $254 = _testSetjmp(HEAP32[$253>>2]|0, _setjmpTable)|0; if (($254|0) == 0) { _longjmp($253|0, threwValue|0); } tempRet0 = threwValue; } else { $254 = -1; };
          $255 = tempRet0;
          $cond38 = ($254|0)==(1);
          if ($cond38) {
           $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $255;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
           continue L14;
          }
         }
        }
       }
      } else {
       HEAP32[$out>>2] = 0;
       HEAP32[$outsize>>2] = 0;
       HEAP8[$bits1>>0] = 0;
       $261 = ($201|0)!=(0);
       if ($261) {
        $$reg2mem186$0 = 1;
       } else {
        $262 = (($50) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = ($263|0)!=(0);
        $$reg2mem186$0 = $264;
       }
       $265 = $$reg2mem186$0 ^ 1;
       $266 = $265&1;
       $267 = (($temp$3) + 4|0);
       $268 = HEAP32[$267>>2]|0;
       $269 = (($temp$3) + 12|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = (($temp$3) + 12|0);
       $272 = HEAP32[$271>>2]|0;
       $273 = (($272) + ($len$3))|0;
       __THREW__ = 0;
       invoke_viiiiiiiii(81,(((80 + 84|0))|0),2,($266|0),($268|0),($270|0),($273|0),($bits1|0),($out|0),($outsize|0));
       $274 = __THREW__; __THREW__ = 0;
       if ((($274|0) != 0) & ((threwValue|0) != 0)) { $275 = _testSetjmp(HEAP32[$274>>2]|0, _setjmpTable)|0; if (($275|0) == 0) { _longjmp($274|0, threwValue|0); } tempRet0 = threwValue; } else { $275 = -1; };
       $276 = tempRet0;
       $cond16 = ($275|0)==(1);
       if ($cond16) {
        $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $276;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
        continue L14;
       }
       $277 = (($50) + 12|0);
       $278 = HEAP32[$277>>2]|0;
       $279 = (($278) + 12|0);
       $280 = HEAP32[$279>>2]|0;
       $281 = HEAP32[$outsize>>2]|0;
       $282 = (($280) + ($281))|0;
       $283 = (($282) + 5)|0;
       $284 = (($50) + 12|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = (($285) + 8|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = ($283>>>0)<=($287>>>0);
       if (!($288)) {
        label = 106;
        break L28;
       }
       $292 = (($50) + 12|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = (($293) + 4|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = (($50) + 12|0);
       $297 = HEAP32[$296>>2]|0;
       $298 = (($297) + 12|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = (($295) + ($299)|0);
       $301 = HEAP32[$out>>2]|0;
       $302 = HEAP32[$outsize>>2]|0;
       _memcpy(($300|0),($301|0),($302|0))|0;
       $303 = HEAP32[$out>>2]|0;
       __THREW__ = 0;
       invoke_vi(19,($303|0));
       $304 = __THREW__; __THREW__ = 0;
       if ((($304|0) != 0) & ((threwValue|0) != 0)) { $305 = _testSetjmp(HEAP32[$304>>2]|0, _setjmpTable)|0; if (($305|0) == 0) { _longjmp($304|0, threwValue|0); } tempRet0 = threwValue; } else { $305 = -1; };
       $306 = tempRet0;
       $cond18 = ($305|0)==(1);
       if ($cond18) {
        $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $306;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
        continue L14;
       }
       $307 = HEAP32[$outsize>>2]|0;
       $308 = (($50) + 12|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = (($309) + 12|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = (($311) + ($307))|0;
       HEAP32[$310>>2] = $312;
       $313 = ($201|0)!=(0);
       if ($313) {
        label = 111;
       } else {
        $314 = (($50) + 4|0);
        $315 = HEAP32[$314>>2]|0;
        $316 = ($315|0)!=(0);
        if ($316) {
         label = 111;
        }
       }
       if ((label|0) == 111) {
        label = 0;
        $317 = HEAP8[$bits1>>0]|0;
        $318 = $317&255;
        $319 = $318 & 7;
        $320 = $319&255;
        HEAP8[$bits1>>0] = $320;
        $321 = HEAP8[$bits1>>0]|0;
        $322 = $321&255;
        $323 = $322 & 1;
        $324 = ($323|0)!=(0);
        if ($324) {
         $325 = HEAP8[$bits1>>0]|0;
         $326 = $325&255;
         $327 = ($326|0)==(7);
         if ($327) {
          $328 = (($50) + 12|0);
          $329 = HEAP32[$328>>2]|0;
          $330 = (($329) + 12|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = (($331) + 1)|0;
          HEAP32[$330>>2] = $332;
          $333 = (($50) + 12|0);
          $334 = HEAP32[$333>>2]|0;
          $335 = (($334) + 4|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = (($336) + ($331)|0);
          HEAP8[$337>>0] = 0;
         }
         $338 = (($50) + 12|0);
         $339 = HEAP32[$338>>2]|0;
         $340 = (($339) + 12|0);
         $341 = HEAP32[$340>>2]|0;
         $342 = (($341) + 1)|0;
         HEAP32[$340>>2] = $342;
         $343 = (($50) + 12|0);
         $344 = HEAP32[$343>>2]|0;
         $345 = (($344) + 4|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (($346) + ($341)|0);
         HEAP8[$347>>0] = 0;
         $348 = (($50) + 12|0);
         $349 = HEAP32[$348>>2]|0;
         $350 = (($349) + 12|0);
         $351 = HEAP32[$350>>2]|0;
         $352 = (($351) + 1)|0;
         HEAP32[$350>>2] = $352;
         $353 = (($50) + 12|0);
         $354 = HEAP32[$353>>2]|0;
         $355 = (($354) + 4|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = (($356) + ($351)|0);
         HEAP8[$357>>0] = 0;
         $358 = (($50) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = (($359) + 12|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = (($361) + 1)|0;
         HEAP32[$360>>2] = $362;
         $363 = (($50) + 12|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = (($364) + 4|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = (($366) + ($361)|0);
         HEAP8[$367>>0] = -1;
         $368 = (($50) + 12|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = (($369) + 12|0);
         $371 = HEAP32[$370>>2]|0;
         $372 = (($371) + 1)|0;
         HEAP32[$370>>2] = $372;
         $373 = (($50) + 12|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = (($374) + 4|0);
         $376 = HEAP32[$375>>2]|0;
         $377 = (($376) + ($371)|0);
         HEAP8[$377>>0] = -1;
        } else {
         $378 = HEAP8[$bits1>>0]|0;
         $379 = ($378<<24>>24)!=(0);
         if ($379) {
          while(1) {
           $380 = HEAP8[$bits1>>0]|0;
           $381 = $380&255;
           $382 = 2 << $381;
           $383 = (($50) + 12|0);
           $384 = HEAP32[$383>>2]|0;
           $385 = (($384) + 12|0);
           $386 = HEAP32[$385>>2]|0;
           $387 = (($386) - 1)|0;
           $388 = (($50) + 12|0);
           $389 = HEAP32[$388>>2]|0;
           $390 = (($389) + 4|0);
           $391 = HEAP32[$390>>2]|0;
           $392 = (($391) + ($387)|0);
           $393 = HEAP8[$392>>0]|0;
           $394 = $393&255;
           $395 = (($394) + ($382))|0;
           $396 = $395&255;
           HEAP8[$392>>0] = $396;
           $397 = (($50) + 12|0);
           $398 = HEAP32[$397>>2]|0;
           $399 = (($398) + 12|0);
           $400 = HEAP32[$399>>2]|0;
           $401 = (($400) + 1)|0;
           HEAP32[$399>>2] = $401;
           $402 = (($50) + 12|0);
           $403 = HEAP32[$402>>2]|0;
           $404 = (($403) + 4|0);
           $405 = HEAP32[$404>>2]|0;
           $406 = (($405) + ($400)|0);
           HEAP8[$406>>0] = 0;
           $407 = HEAP8[$bits1>>0]|0;
           $408 = $407&255;
           $409 = (($408) + 2)|0;
           $410 = $409&255;
           HEAP8[$bits1>>0] = $410;
           $411 = HEAP8[$bits1>>0]|0;
           $412 = $411&255;
           $413 = ($412|0)<(8);
           if (!($413)) {
            break;
           }
          }
         }
        }
       }
       $414 = (($temp$3) + 12|0);
       $415 = HEAP32[$414>>2]|0;
       $416 = (($415) + ($len$3))|0;
       HEAP32[$414>>2] = $416;
      }
      $417 = ($201|0)!=(0);
      if ($417) {
       $left$0 = $201;$next$0 = $next$5;
      } else {
       break;
      }
     }
     $418 = (($50) + 16|0);
     $419 = HEAP32[$418>>2]|0;
     __THREW__ = 0;
     invoke_vi(65,($419|0));
     $420 = __THREW__; __THREW__ = 0;
     if ((($420|0) != 0) & ((threwValue|0) != 0)) { $421 = _testSetjmp(HEAP32[$420>>2]|0, _setjmpTable)|0; if (($421|0) == 0) { _longjmp($420|0, threwValue|0); } tempRet0 = threwValue; } else { $421 = -1; };
     $422 = tempRet0;
     $cond19 = ($421|0)==(1);
     if ($cond19) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $422;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $423 = (($50) + 16|0);
     HEAP32[$423>>2] = 0;
     $424 = (($50) + 8|0);
     $425 = HEAP32[$424>>2]|0;
     __THREW__ = 0;
     invoke_vi(82,($425|0));
     $426 = __THREW__; __THREW__ = 0;
     if ((($426|0) != 0) & ((threwValue|0) != 0)) { $427 = _testSetjmp(HEAP32[$426>>2]|0, _setjmpTable)|0; if (($427|0) == 0) { _longjmp($426|0, threwValue|0); } tempRet0 = threwValue; } else { $427 = -1; };
     $428 = tempRet0;
     $cond20 = ($427|0)==(1);
     if ($cond20) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $428;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $429 = HEAP32[66256>>2]|0;
     __THREW__ = 0;
     invoke_vi(62,($429|0));
     $430 = __THREW__; __THREW__ = 0;
     if ((($430|0) != 0) & ((threwValue|0) != 0)) { $431 = _testSetjmp(HEAP32[$430>>2]|0, _setjmpTable)|0; if (($431|0) == 0) { _longjmp($430|0, threwValue|0); } tempRet0 = threwValue; } else { $431 = -1; };
     $432 = tempRet0;
     $cond21 = ($431|0)==(1);
     if ($cond21) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $432;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $prior$0 = 67456;
     while(1) {
      $433 = HEAP32[$prior$0>>2]|0;
      $434 = ($433|0)!=(0|0);
      if (!($434)) {
       break;
      }
      $435 = HEAP32[$433>>2]|0;
      $436 = HEAP32[$50>>2]|0;
      $437 = ($435|0)>($436|0);
      if ($437) {
       label = 131;
       break;
      }
      $438 = (($433) + 28|0);
      $prior$0 = $438;
     }
     if ((label|0) == 131) {
      label = 0;
     }
     $439 = (($50) + 28|0);
     HEAP32[$439>>2] = $433;
     HEAP32[$prior$0>>2] = $50;
     $440 = HEAP32[66256>>2]|0;
     $441 = HEAP32[67456>>2]|0;
     $442 = HEAP32[$441>>2]|0;
     __THREW__ = 0;
     invoke_viii(64,($440|0),0,($442|0));
     $443 = __THREW__; __THREW__ = 0;
     if ((($443|0) != 0) & ((threwValue|0) != 0)) { $444 = _testSetjmp(HEAP32[$443>>2]|0, _setjmpTable)|0; if (($444|0) == 0) { _longjmp($443|0, threwValue|0); } tempRet0 = threwValue; } else { $444 = -1; };
     $445 = tempRet0;
     $cond22 = ($444|0)==(1);
     if ($cond22) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $445;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $446 = (($50) + 8|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = (($447) + 12|0);
     $449 = HEAP32[$448>>2]|0;
     $450 = (($50) + 8|0);
     $451 = HEAP32[$450>>2]|0;
     $452 = (($451) + 4|0);
     $453 = HEAP32[$452>>2]|0;
     $454 = HEAP32[((80 + 44|0))>>2]|0;
     $455 = ($454|0)==(1);
     if ($455) {
      __THREW__ = 0;
      $456 = (invoke_iiii(60,0,(0|0),0)|0);
      $457 = __THREW__; __THREW__ = 0;
      if ((($457|0) != 0) & ((threwValue|0) != 0)) { $458 = _testSetjmp(HEAP32[$457>>2]|0, _setjmpTable)|0; if (($458|0) == 0) { _longjmp($457|0, threwValue|0); } tempRet0 = threwValue; } else { $458 = -1; };
      $459 = tempRet0;
      $cond31 = ($458|0)==(1);
      if ($cond31) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $459;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $$reg2mem182$0 = $456;
     } else {
      __THREW__ = 0;
      $460 = (invoke_iiii(61,0,(0|0),0)|0);
      $461 = __THREW__; __THREW__ = 0;
      if ((($461|0) != 0) & ((threwValue|0) != 0)) { $462 = _testSetjmp(HEAP32[$461>>2]|0, _setjmpTable)|0; if (($462|0) == 0) { _longjmp($461|0, threwValue|0); } tempRet0 = threwValue; } else { $462 = -1; };
      $463 = tempRet0;
      $cond23 = ($462|0)==(1);
      if ($cond23) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $463;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $$reg2mem182$0 = $460;
     }
     $check$0 = $$reg2mem182$0;$len$5 = $449;$next$6 = $453;
     while(1) {
      $464 = ($len$5>>>0)>(2147483648);
      if (!($464)) {
       break;
      }
      $465 = HEAP32[((80 + 44|0))>>2]|0;
      $466 = ($465|0)==(1);
      if ($466) {
       __THREW__ = 0;
       $467 = (invoke_iiii(60,($check$0|0),($next$6|0),-2147483648)|0);
       $468 = __THREW__; __THREW__ = 0;
       if ((($468|0) != 0) & ((threwValue|0) != 0)) { $469 = _testSetjmp(HEAP32[$468>>2]|0, _setjmpTable)|0; if (($469|0) == 0) { _longjmp($468|0, threwValue|0); } tempRet0 = threwValue; } else { $469 = -1; };
       $470 = tempRet0;
       $cond30 = ($469|0)==(1);
       if ($cond30) {
        $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $470;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
        continue L14;
       }
       $$reg2mem180$0 = $467;
      } else {
       __THREW__ = 0;
       $471 = (invoke_iiii(61,($check$0|0),($next$6|0),-2147483648)|0);
       $472 = __THREW__; __THREW__ = 0;
       if ((($472|0) != 0) & ((threwValue|0) != 0)) { $473 = _testSetjmp(HEAP32[$472>>2]|0, _setjmpTable)|0; if (($473|0) == 0) { _longjmp($472|0, threwValue|0); } tempRet0 = threwValue; } else { $473 = -1; };
       $474 = tempRet0;
       $cond29 = ($473|0)==(1);
       if ($cond29) {
        $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $474;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
        continue L14;
       }
       $$reg2mem180$0 = $471;
      }
      $475 = (($len$5) - -2147483648)|0;
      $476 = (($next$6) + -2147483648|0);
      $check$0 = $$reg2mem180$0;$len$5 = $475;$next$6 = $476;
     }
     $477 = HEAP32[((80 + 44|0))>>2]|0;
     $478 = ($477|0)==(1);
     if ($478) {
      __THREW__ = 0;
      $479 = (invoke_iiii(60,($check$0|0),($next$6|0),($len$5|0))|0);
      $480 = __THREW__; __THREW__ = 0;
      if ((($480|0) != 0) & ((threwValue|0) != 0)) { $481 = _testSetjmp(HEAP32[$480>>2]|0, _setjmpTable)|0; if (($481|0) == 0) { _longjmp($480|0, threwValue|0); } tempRet0 = threwValue; } else { $481 = -1; };
      $482 = tempRet0;
      $cond28 = ($481|0)==(1);
      if ($cond28) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $482;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $$reg2mem178$0 = $479;
     } else {
      __THREW__ = 0;
      $483 = (invoke_iiii(61,($check$0|0),($next$6|0),($len$5|0))|0);
      $484 = __THREW__; __THREW__ = 0;
      if ((($484|0) != 0) & ((threwValue|0) != 0)) { $485 = _testSetjmp(HEAP32[$484>>2]|0, _setjmpTable)|0; if (($485|0) == 0) { _longjmp($484|0, threwValue|0); } tempRet0 = threwValue; } else { $485 = -1; };
      $486 = tempRet0;
      $cond24 = ($485|0)==(1);
      if ($cond24) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $486;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
      $$reg2mem178$0 = $483;
     }
     $487 = (($50) + 8|0);
     $488 = HEAP32[$487>>2]|0;
     __THREW__ = 0;
     invoke_vi(65,($488|0));
     $489 = __THREW__; __THREW__ = 0;
     if ((($489|0) != 0) & ((threwValue|0) != 0)) { $490 = _testSetjmp(HEAP32[$489>>2]|0, _setjmpTable)|0; if (($490|0) == 0) { _longjmp($489|0, threwValue|0); } tempRet0 = threwValue; } else { $490 = -1; };
     $491 = tempRet0;
     $cond25 = ($490|0)==(1);
     if ($cond25) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $491;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $492 = (($50) + 20|0);
     HEAP32[$492>>2] = $$reg2mem178$0;
     $493 = (($50) + 24|0);
     $494 = HEAP32[$493>>2]|0;
     __THREW__ = 0;
     invoke_vi(62,($494|0));
     $495 = __THREW__; __THREW__ = 0;
     if ((($495|0) != 0) & ((threwValue|0) != 0)) { $496 = _testSetjmp(HEAP32[$495>>2]|0, _setjmpTable)|0; if (($496|0) == 0) { _longjmp($495|0, threwValue|0); } tempRet0 = threwValue; } else { $496 = -1; };
     $497 = tempRet0;
     $cond26 = ($496|0)==(1);
     if ($cond26) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $497;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $498 = (($50) + 24|0);
     $499 = HEAP32[$498>>2]|0;
     __THREW__ = 0;
     invoke_viii(64,($499|0),0,1);
     $500 = __THREW__; __THREW__ = 0;
     if ((($500|0) != 0) & ((threwValue|0) != 0)) { $501 = _testSetjmp(HEAP32[$500>>2]|0, _setjmpTable)|0; if (($501|0) == 0) { _longjmp($500|0, threwValue|0); } tempRet0 = threwValue; } else { $501 = -1; };
     $502 = tempRet0;
     $cond27 = ($501|0)==(1);
     if ($cond27) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $502;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $temp$1 = $temp$3;
    }
    if ((label|0) == 26) {
     label = 0;
     __THREW__ = 0;
     invoke_viiii(4,(67392|0),(64|0),1517,(67376|0));
     $52 = __THREW__; __THREW__ = 0;
     if ((($52|0) != 0) & ((threwValue|0) != 0)) { $53 = _testSetjmp(HEAP32[$52>>2]|0, _setjmpTable)|0; if (($53|0) == 0) { _longjmp($52|0, threwValue|0); } tempRet0 = threwValue; } else { $53 = -1; };
     $54 = tempRet0;
     $cond13 = ($53|0)==(1);
     if ($cond13) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $54;$temp$0 = $temp$1;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     } else {
      label = 27;
      break L14;
     }
    }
    else if ((label|0) == 29) {
     label = 0;
     __THREW__ = 0;
     invoke_vi(65,($temp$1|0));
     $503 = __THREW__; __THREW__ = 0;
     if ((($503|0) != 0) & ((threwValue|0) != 0)) { $504 = _testSetjmp(HEAP32[$503>>2]|0, _setjmpTable)|0; if (($504|0) == 0) { _longjmp($503|0, threwValue|0); } tempRet0 = threwValue; } else { $504 = -1; };
     $505 = tempRet0;
     $cond46 = ($504|0)==(1);
     if ($cond46) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $505;$temp$0 = $temp$1;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $506 = HEAP32[66088>>2]|0;
     __THREW__ = 0;
     invoke_vi(67,($506|0));
     $507 = __THREW__; __THREW__ = 0;
     if ((($507|0) != 0) & ((threwValue|0) != 0)) { $508 = _testSetjmp(HEAP32[$507>>2]|0, _setjmpTable)|0; if (($508|0) == 0) { _longjmp($507|0, threwValue|0); } tempRet0 = threwValue; } else { $508 = -1; };
     $509 = tempRet0;
     $cond47 = ($508|0)==(1);
     if ($cond47) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $509;$temp$0 = $temp$1;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     __THREW__ = 0;
     (invoke_ii(83,($strm|0))|0);
     $510 = __THREW__; __THREW__ = 0;
     if ((($510|0) != 0) & ((threwValue|0) != 0)) { $511 = _testSetjmp(HEAP32[$510>>2]|0, _setjmpTable)|0; if (($511|0) == 0) { _longjmp($510|0, threwValue|0); } tempRet0 = threwValue; } else { $511 = -1; };
     $512 = tempRet0;
     $cond48 = ($511|0)==(1);
     if ($cond48) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $512;$temp$0 = $temp$1;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $temp$4 = $temp$1;
     break;
    }
    else if ((label|0) == 90) {
     label = 0;
     __THREW__ = 0;
     invoke_viiii(4,(66432|0),(64|0),1614,(67376|0));
     $242 = __THREW__; __THREW__ = 0;
     if ((($242|0) != 0) & ((threwValue|0) != 0)) { $243 = _testSetjmp(HEAP32[$242>>2]|0, _setjmpTable)|0; if (($243|0) == 0) { _longjmp($242|0, threwValue|0); } tempRet0 = threwValue; } else { $243 = -1; };
     $244 = tempRet0;
     $cond36 = ($243|0)==(1);
     if ($cond36) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $244;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     } else {
      label = 91;
      break L14;
     }
    }
    else if ((label|0) == 106) {
     label = 0;
     __THREW__ = 0;
     invoke_viiii(4,(67408|0),(64|0),1637,(67376|0));
     $289 = __THREW__; __THREW__ = 0;
     if ((($289|0) != 0) & ((threwValue|0) != 0)) { $290 = _testSetjmp(HEAP32[$289>>2]|0, _setjmpTable)|0; if (($290|0) == 0) { _longjmp($289|0, threwValue|0); } tempRet0 = threwValue; } else { $290 = -1; };
     $291 = tempRet0;
     $cond17 = ($290|0)==(1);
     if ($cond17) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $291;$temp$0 = $temp$3;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     } else {
      label = 107;
      break L14;
     }
    }
   } else {
    $temp$4 = $temp$0;
   }
  } while(0);
  $513 = ($try_pushed_$0|0)!=(0);
  if ($513) {
   $514 = HEAP32[_try_key_>>2]|0;
   $515 = (($try_this_) + 168|0);
   $516 = HEAP32[$515>>2]|0;
   __THREW__ = 0;
   $517 = (invoke_iii(3,($514|0),($516|0))|0);
   $518 = __THREW__; __THREW__ = 0;
   if ((($518|0) != 0) & ((threwValue|0) != 0)) { $519 = _testSetjmp(HEAP32[$518>>2]|0, _setjmpTable)|0; if (($519|0) == 0) { _longjmp($518|0, threwValue|0); } tempRet0 = threwValue; } else { $519 = -1; };
   $520 = tempRet0;
   $cond8 = ($519|0)==(1);
   if ($cond8) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $520;$temp$0 = $temp$4;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $521 = ($517|0)==(0);
   if (!($521)) {
    __THREW__ = 0;
    invoke_viiii(4,(8|0),(64|0),1708,(67376|0));
    $522 = __THREW__; __THREW__ = 0;
    if ((($522|0) != 0) & ((threwValue|0) != 0)) { $523 = _testSetjmp(HEAP32[$522>>2]|0, _setjmpTable)|0; if (($523|0) == 0) { _longjmp($522|0, threwValue|0); } tempRet0 = threwValue; } else { $523 = -1; };
    $524 = tempRet0;
    $cond9 = ($523|0)==(1);
    if ($cond9) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem198$0 = $524;$temp$0 = $temp$4;$try_pushed_$0 = $try_pushed_$0$phi;
     continue;
    } else {
     label = 167;
     break;
    }
   }
   $try_pushed_$1 = 0;
  } else {
   $try_pushed_$1 = $try_pushed_$0;
  }
  $525 = (($try_this_) + 156|0);
  ;HEAP32[$err+0>>2]=HEAP32[$525+0>>2]|0;HEAP32[$err+4>>2]=HEAP32[$525+4>>2]|0;HEAP32[$err+8>>2]=HEAP32[$525+8>>2]|0;
  $526 = HEAP32[$err>>2]|0;
  $527 = ($526|0)!=(0);
  if (!($527)) {
   label = 182;
   break;
  }
  $528 = (($err) + 8|0);
  $529 = HEAP32[$528>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer205>>2] = $529;
  (invoke_iii(17,(66072|0),($vararg_buffer205|0))|0);
  $530 = __THREW__; __THREW__ = 0;
  if ((($530|0) != 0) & ((threwValue|0) != 0)) { $531 = _testSetjmp(HEAP32[$530>>2]|0, _setjmpTable)|0; if (($531|0) == 0) { _longjmp($530|0, threwValue|0); } tempRet0 = threwValue; } else { $531 = -1; };
  $532 = tempRet0;
  $cond5 = ($531|0)==(1);
  if ($cond5) {
   $$reg2mem198$0 = $532;$temp$0 = $temp$4;$try_pushed_$0 = $try_pushed_$1;
   continue;
  }
  $533 = (($err) + 4|0);
  $534 = HEAP32[$533>>2]|0;
  $535 = ($534|0)!=(0);
  if ($535) {
   $536 = (($err) + 8|0);
   $537 = HEAP32[$536>>2]|0;
   __THREW__ = 0;
   invoke_vi(19,($537|0));
   $538 = __THREW__; __THREW__ = 0;
   if ((($538|0) != 0) & ((threwValue|0) != 0)) { $539 = _testSetjmp(HEAP32[$538>>2]|0, _setjmpTable)|0; if (($539|0) == 0) { _longjmp($538|0, threwValue|0); } tempRet0 = threwValue; } else { $539 = -1; };
   $540 = tempRet0;
   $cond7 = ($539|0)==(1);
   if ($cond7) {
    $$reg2mem198$0 = $540;$temp$0 = $temp$4;$try_pushed_$0 = $try_pushed_$1;
    continue;
   }
   $541 = (($err) + 4|0);
   HEAP32[$541>>2] = 0;
   $542 = (($err) + 8|0);
   HEAP32[$542>>2] = 0;
  }
  $543 = HEAP32[$err>>2]|0;
  $544 = (0 - ($543))|0;
  __THREW__ = 0;
  invoke_vi(7,($544|0));
  $545 = __THREW__; __THREW__ = 0;
  if ((($545|0) != 0) & ((threwValue|0) != 0)) { $546 = _testSetjmp(HEAP32[$545>>2]|0, _setjmpTable)|0; if (($546|0) == 0) { _longjmp($545|0, threwValue|0); } tempRet0 = threwValue; } else { $546 = -1; };
  $547 = tempRet0;
  $cond6 = ($546|0)==(1);
  if ($cond6) {
   $$reg2mem198$0 = $547;$temp$0 = $temp$4;$try_pushed_$0 = $try_pushed_$1;
  } else {
   label = 180;
   break;
  }
 }
 if ((label|0) == 27) {
  // unreachable;
 }
 else if ((label|0) == 91) {
  // unreachable;
 }
 else if ((label|0) == 107) {
  // unreachable;
 }
 else if ((label|0) == 167) {
  // unreachable;
 }
 else if ((label|0) == 180) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 182) {
  STACKTOP = sp;return;
 }
}
function _drop_space($space) {
 $space = $space|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pool = 0, $use = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $space;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 _possess(($4|0));
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_peek_lock(($6|0))|0);
 $use = $7;
 $8 = $use;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  ___assert_fail((67344|0),(64|0),1324,(67360|0));
  // unreachable;
 }
 $10 = $use;
 $11 = ($10|0)==(1);
 if ($11) {
  $12 = $0;
  $13 = (($12) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $pool = $14;
  $15 = $pool;
  $16 = HEAP32[$15>>2]|0;
  _possess(($16|0));
  $17 = $pool;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = (($20) + 20|0);
  HEAP32[$21>>2] = $19;
  $22 = $0;
  $23 = $pool;
  $24 = (($23) + 4|0);
  HEAP32[$24>>2] = $22;
  $25 = $pool;
  $26 = HEAP32[$25>>2]|0;
  _twist(($26|0),1,1);
 }
 $27 = $0;
 $28 = HEAP32[$27>>2]|0;
 _twist(($28|0),1,-1);
 STACKTOP = sp;return;
}
function _deflate_engine($strm,$out,$flush) {
 $strm = $strm|0;
 $out = $out|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $room = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $strm;
 $1 = $out;
 $2 = $flush;
 while(1) {
  $3 = $1;
  $4 = (($3) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $1;
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($5) - ($8))|0;
  $room = $9;
  $10 = $room;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $1;
   _grow_space($12);
   $13 = $1;
   $14 = (($13) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $1;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($15) - ($18))|0;
   $room = $19;
  }
  $20 = $1;
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $1;
  $24 = (($23) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($22) + ($25)|0);
  $27 = $0;
  $28 = (($27) + 12|0);
  HEAP32[$28>>2] = $26;
  $29 = $room;
  $30 = ($29>>>0)<(4294967295);
  if ($30) {
   $31 = $room;
   $34 = $31;
  } else {
   $34 = -1;
  }
  $32 = $0;
  $33 = (($32) + 16|0);
  HEAP32[$33>>2] = $34;
  $35 = $0;
  $36 = $2;
  (_deflate(($35|0),($36|0))|0);
  $37 = $0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $1;
  $41 = (($40) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $39;
  $44 = $42;
  $45 = (($43) - ($44))|0;
  $46 = $1;
  $47 = (($46) + 12|0);
  HEAP32[$47>>2] = $45;
  $48 = $0;
  $49 = (($48) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(0);
  if (!($51)) {
   break;
  }
 }
 $52 = $0;
 $53 = (($52) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0);
 if ($55) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((66392|0),(64|0),1474,(67464|0));
  // unreachable;
 }
}
function _grow_space($space) {
 $space = $space|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $more = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $space;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_grow($3)|0);
 $more = $4;
 $5 = $more;
 $6 = $0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($8|0);
 if ($9) {
  HEAP32[$vararg_buffer>>2] = 0;
  _try_throw_(75,(67328|0),($vararg_buffer|0));
 }
 $10 = $0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $more;
 $14 = (_alloc($12,$13)|0);
 $15 = $0;
 $16 = (($15) + 4|0);
 HEAP32[$16>>2] = $14;
 $17 = $more;
 $18 = $0;
 $19 = (($18) + 8|0);
 HEAP32[$19>>2] = $17;
 STACKTOP = sp;return;
}
function _grow($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $shift = 0, $top = 0, $was = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $0;
 $was = $1;
 $2 = $0;
 $3 = $2 >>> 2;
 $4 = $0;
 $5 = (($4) + ($3))|0;
 $0 = $5;
 $6 = $0;
 $top = $6;
 $shift = 0;
 while(1) {
  $7 = $top;
  $8 = ($7>>>0)>(7);
  if (!($8)) {
   break;
  }
  $9 = $top;
  $10 = $9 >>> 1;
  $top = $10;
  $11 = $shift;
  $12 = (($11) + 1)|0;
  $shift = $12;
 }
 $13 = $top;
 $14 = ($13|0)==(7);
 if ($14) {
  $15 = $shift;
  $16 = (($15) + 3)|0;
  $17 = 1 << $16;
  $0 = $17;
 }
 $18 = $0;
 $19 = ($18>>>0)<(16);
 if ($19) {
  $0 = 16;
 }
 $20 = $0;
 $21 = $was;
 $22 = ($20>>>0)<=($21>>>0);
 if (!($22)) {
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $0 = -1;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _adler32_comb($adler1,$adler2,$len2) {
 $adler1 = $adler1|0;
 $adler2 = $adler2|0;
 $len2 = $len2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rem = 0, $sum1 = 0, $sum2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $adler1;
 $1 = $adler2;
 $2 = $len2;
 $3 = $2;
 $4 = (($3>>>0) % 65521)&-1;
 $rem = $4;
 $5 = $0;
 $6 = $5 & 65535;
 $sum1 = $6;
 $7 = $rem;
 $8 = $sum1;
 $9 = Math_imul($7, $8)|0;
 $10 = (($9>>>0) % 65521)&-1;
 $sum2 = $10;
 $11 = $1;
 $12 = $11 & 65535;
 $13 = (($12) + 65521)|0;
 $14 = (($13) - 1)|0;
 $15 = $sum1;
 $16 = (($15) + ($14))|0;
 $sum1 = $16;
 $17 = $0;
 $18 = $17 >>> 16;
 $19 = $18 & 65535;
 $20 = $1;
 $21 = $20 >>> 16;
 $22 = $21 & 65535;
 $23 = (($19) + ($22))|0;
 $24 = (($23) + 65521)|0;
 $25 = $rem;
 $26 = (($24) - ($25))|0;
 $27 = $sum2;
 $28 = (($27) + ($26))|0;
 $sum2 = $28;
 $29 = $sum1;
 $30 = ($29>>>0)>=(65521);
 if ($30) {
  $31 = $sum1;
  $32 = (($31) - 65521)|0;
  $sum1 = $32;
 }
 $33 = $sum1;
 $34 = ($33>>>0)>=(65521);
 if ($34) {
  $35 = $sum1;
  $36 = (($35) - 65521)|0;
  $sum1 = $36;
 }
 $37 = $sum2;
 $38 = ($37>>>0)>=(131042);
 if ($38) {
  $39 = $sum2;
  $40 = (($39) - 131042)|0;
  $sum2 = $40;
 }
 $41 = $sum2;
 $42 = ($41>>>0)>=(65521);
 if (!($42)) {
  $45 = $sum1;
  $46 = $sum2;
  $47 = $46 << 16;
  $48 = $45 | $47;
  STACKTOP = sp;return ($48|0);
 }
 $43 = $sum2;
 $44 = (($43) - 65521)|0;
 $sum2 = $44;
 $45 = $sum1;
 $46 = $sum2;
 $47 = $46 << 16;
 $48 = $45 | $47;
 STACKTOP = sp;return ($48|0);
}
function _crc32_comb($crc1,$crc2,$len2) {
 $crc1 = $crc1|0;
 $crc2 = $crc2|0;
 $len2 = $len2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $even = 0;
 var $n = 0, $odd = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $even = sp + 24|0;
 $odd = sp + 152|0;
 $1 = $crc1;
 $2 = $crc2;
 $3 = $len2;
 $4 = $3;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $1;
  $0 = $6;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 HEAP32[$odd>>2] = -306674912;
 $row = 1;
 $n = 1;
 while(1) {
  $7 = $n;
  $8 = ($7|0)<(32);
  if (!($8)) {
   break;
  }
  $9 = $row;
  $10 = $n;
  $11 = (($odd) + ($10<<2)|0);
  HEAP32[$11>>2] = $9;
  $12 = $row;
  $13 = $12 << 1;
  $row = $13;
  $14 = $n;
  $15 = (($14) + 1)|0;
  $n = $15;
 }
 _gf2_matrix_square($even,$odd);
 _gf2_matrix_square($odd,$even);
 while(1) {
  _gf2_matrix_square($even,$odd);
  $16 = $3;
  $17 = $16 & 1;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $1;
   $20 = (_gf2_matrix_times($even,$19)|0);
   $1 = $20;
  }
  $21 = $3;
  $22 = $21 >>> 1;
  $3 = $22;
  $23 = $3;
  $24 = ($23|0)==(0);
  if ($24) {
   label = 11;
   break;
  }
  _gf2_matrix_square($odd,$even);
  $25 = $3;
  $26 = $25 & 1;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $1;
   $29 = (_gf2_matrix_times($odd,$28)|0);
   $1 = $29;
  }
  $30 = $3;
  $31 = $30 >>> 1;
  $3 = $31;
  $32 = $3;
  $33 = ($32|0)!=(0);
  if (!($33)) {
   break;
  }
 }
 if ((label|0) == 11) {
 }
 $34 = $2;
 $35 = $1;
 $36 = $35 ^ $34;
 $1 = $36;
 $37 = $1;
 $0 = $37;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _gf2_matrix_square($square,$mat) {
 $square = $square|0;
 $mat = $mat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $square;
 $1 = $mat;
 $n = 0;
 while(1) {
  $2 = $n;
  $3 = ($2|0)<(32);
  if (!($3)) {
   break;
  }
  $4 = $1;
  $5 = $n;
  $6 = $1;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_gf2_matrix_times($4,$8)|0);
  $10 = $n;
  $11 = $0;
  $12 = (($11) + ($10<<2)|0);
  HEAP32[$12>>2] = $9;
  $13 = $n;
  $14 = (($13) + 1)|0;
  $n = $14;
 }
 STACKTOP = sp;return;
}
function _gf2_matrix_times($mat,$vec) {
 $mat = $mat|0;
 $vec = $vec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mat;
 $1 = $vec;
 $sum = 0;
 while(1) {
  $2 = $1;
  $3 = ($2|0)!=(0);
  if (!($3)) {
   break;
  }
  $4 = $1;
  $5 = $4 & 1;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $0;
   $8 = HEAP32[$7>>2]|0;
   $9 = $sum;
   $10 = $9 ^ $8;
   $sum = $10;
  }
  $11 = $1;
  $12 = $11 >>> 1;
  $1 = $12;
  $13 = $0;
  $14 = (($13) + 4|0);
  $0 = $14;
 }
 $15 = $sum;
 STACKTOP = sp;return ($15|0);
}
function _new_pool($pool,$size,$limit) {
 $pool = $pool|0;
 $size = $size|0;
 $limit = $limit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pool;
 $1 = $size;
 $2 = $limit;
 $3 = (_new_lock(0)|0);
 $4 = $0;
 HEAP32[$4>>2] = $3;
 $5 = $0;
 $6 = (($5) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = $0;
 $9 = (($8) + 8|0);
 HEAP32[$9>>2] = $7;
 $10 = $2;
 $11 = $0;
 $12 = (($11) + 12|0);
 HEAP32[$12>>2] = $10;
 $13 = $0;
 $14 = (($13) + 16|0);
 HEAP32[$14>>2] = 0;
 STACKTOP = sp;return;
}
function _load() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[((80 + 32924|0))>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  HEAP32[((80 + 32920|0))>>2] = 1;
  HEAP32[((80 + 32916|0))>>2] = 0;
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $3 = HEAP32[((80 + 112|0))>>2]|0;
 $4 = ($3|0)>(1);
 if ($4) {
  $5 = HEAP32[((80 + 65712|0))>>2]|0;
  $6 = ($5|0)==(-1);
  if ($6) {
   HEAP32[((80 + 65712|0))>>2] = 1;
   $7 = (_new_lock(1)|0);
   HEAP32[((80 + 65716|0))>>2] = $7;
   $8 = (_launch((84|0),(0|0))|0);
   HEAP32[((80 + 65720|0))>>2] = $8;
  }
  $9 = HEAP32[((80 + 65716|0))>>2]|0;
  _possess(($9|0));
  $10 = HEAP32[((80 + 65716|0))>>2]|0;
  _wait_for(($10|0),0,0);
  $11 = HEAP32[((80 + 65716|0))>>2]|0;
  _release(($11|0));
  $12 = HEAP32[((80 + 65712|0))>>2]|0;
  $13 = ($12|0)!=(0);
  $14 = $13 ? ((80 + 144|0)) : ((80 + 32940|0));
  HEAP32[((80 + 32912|0))>>2] = $14;
  $15 = HEAP32[((80 + 65708|0))>>2]|0;
  HEAP32[((80 + 32916|0))>>2] = $15;
  $16 = HEAP32[((80 + 65708|0))>>2]|0;
  $17 = ($16|0)==(32768);
  if ($17) {
   $18 = HEAP32[((80 + 65712|0))>>2]|0;
   $19 = (1 - ($18))|0;
   HEAP32[((80 + 65712|0))>>2] = $19;
   $20 = HEAP32[((80 + 65716|0))>>2]|0;
   _possess(($20|0));
   $21 = HEAP32[((80 + 65716|0))>>2]|0;
   _twist(($21|0),0,1);
  } else {
   $22 = HEAP32[((80 + 65720|0))>>2]|0;
   _join(($22|0));
   $23 = HEAP32[((80 + 65716|0))>>2]|0;
   _free_lock(($23|0));
   HEAP32[((80 + 65712|0))>>2] = -1;
  }
 } else {
  $24 = HEAP32[((80 + 4|0))>>2]|0;
  HEAP32[((80 + 32912|0))>>2] = ((80 + 144|0));
  $25 = (_readn($24,((80 + 144|0)),32768)|0);
  HEAP32[((80 + 32916|0))>>2] = $25;
 }
 $26 = HEAP32[((80 + 32916|0))>>2]|0;
 $27 = ($26>>>0)<(32768);
 if ($27) {
  HEAP32[((80 + 32924|0))>>2] = 1;
  $28 = HEAP32[((80 + 32916|0))>>2]|0;
  $29 = ($28|0)==(0);
  if ($29) {
   HEAP32[((80 + 32920|0))>>2] = 1;
  }
 }
 $30 = HEAP32[((80 + 32916|0))>>2]|0;
 $31 = HEAP32[((80 + 32928|0))>>2]|0;
 $32 = (($31) + ($30))|0;
 HEAP32[((80 + 32928|0))>>2] = $32;
 $33 = HEAP32[((80 + 32916|0))>>2]|0;
 $0 = $33;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _load_read($dummy) {
 $dummy = $dummy|0;
 var $$reg2mem48$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $9 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond2 = 0, $cond3 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, $err = 0, $try_pushed_$0 = 0;
 var $try_pushed_$0$phi = 0, $try_pushed_$1 = 0, $try_this_ = 0, $vararg_buffer = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $err = sp + 176|0;
 $try_this_ = sp + 4|0;
 $0 = (($try_this_) + 156|0);
 HEAP32[$0>>2] = 0;
 $1 = (($try_this_) + 156|0);
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($try_this_) + 156|0);
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = 0;
 __THREW__ = 0;
 invoke_v(1);
 $5 = __THREW__; __THREW__ = 0;
 if ((($5|0) != 0) & ((threwValue|0) != 0)) { $6 = _testSetjmp(HEAP32[$5>>2]|0, _setjmpTable)|0; if (($6|0) == 0) { _longjmp($5|0, threwValue|0); } tempRet0 = threwValue; } else { $6 = -1; };
 $7 = tempRet0;
 $cond = ($6|0)==(1);
 do {
  if ($cond) {
   $$reg2mem48$0 = $7;$try_pushed_$0 = 1;
  } else {
   $8 = HEAP32[_try_key_>>2]|0;
   __THREW__ = 0;
   $9 = (invoke_ii(2,($8|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
   $12 = tempRet0;
   $cond1 = ($11|0)==(1);
   if ($cond1) {
    $$reg2mem48$0 = $12;$try_pushed_$0 = 1;
   } else {
    $13 = (($try_this_) + 168|0);
    HEAP32[$13>>2] = $9;
    $14 = HEAP32[_try_key_>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_iii(3,($14|0),($try_this_|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = threwValue; } else { $17 = -1; };
    $18 = tempRet0;
    $cond2 = ($17|0)==(1);
    if ($cond2) {
     $$reg2mem48$0 = $18;$try_pushed_$0 = 1;
    } else {
     $19 = ($15|0)==(0);
     if (!($19)) {
      __THREW__ = 0;
      invoke_viiii(4,(8|0),(64|0),2272,(67656|0));
      $20 = __THREW__; __THREW__ = 0;
      if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = threwValue; } else { $21 = -1; };
      $22 = tempRet0;
      $cond3 = ($21|0)==(1);
      if ($cond3) {
       $$reg2mem48$0 = $22;$try_pushed_$0 = 1;
       break;
      }
      // unreachable;
     }
     _saveSetjmp($try_this_,1,_setjmpTable|0)|0;
     __THREW__ = 0;
     $23 = __THREW__; __THREW__ = 0;
     if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
     $25 = tempRet0;
     $cond4 = ($24|0)==(1);
     if ($cond4) {
      $$reg2mem48$0 = $25;$try_pushed_$0 = 1;
     } else {
      $$reg2mem48$0 = 0;$try_pushed_$0 = 1;
     }
    }
   }
  }
 } while(0);
 L14: while(1) {
  $26 = ($$reg2mem48$0|0)<(2);
  if ($26) {
   while(1) {
    $27 = HEAP32[((80 + 65716|0))>>2]|0;
    __THREW__ = 0;
    invoke_vi(62,($27|0));
    $28 = __THREW__; __THREW__ = 0;
    if ((($28|0) != 0) & ((threwValue|0) != 0)) { $29 = _testSetjmp(HEAP32[$28>>2]|0, _setjmpTable)|0; if (($29|0) == 0) { _longjmp($28|0, threwValue|0); } tempRet0 = threwValue; } else { $29 = -1; };
    $30 = tempRet0;
    $cond10 = ($29|0)==(1);
    if ($cond10) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem48$0 = $30;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $31 = HEAP32[((80 + 65716|0))>>2]|0;
    __THREW__ = 0;
    invoke_viii(63,($31|0),0,1);
    $32 = __THREW__; __THREW__ = 0;
    if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = threwValue; } else { $33 = -1; };
    $34 = tempRet0;
    $cond11 = ($33|0)==(1);
    if ($cond11) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem48$0 = $34;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $35 = HEAP32[((80 + 4|0))>>2]|0;
    $36 = HEAP32[((80 + 65712|0))>>2]|0;
    $37 = ($36|0)!=(0);
    $38 = $37 ? ((80 + 144|0)) : ((80 + 32940|0));
    __THREW__ = 0;
    $39 = (invoke_iiii(85,($35|0),($38|0),32768)|0);
    $40 = __THREW__; __THREW__ = 0;
    if ((($40|0) != 0) & ((threwValue|0) != 0)) { $41 = _testSetjmp(HEAP32[$40>>2]|0, _setjmpTable)|0; if (($41|0) == 0) { _longjmp($40|0, threwValue|0); } tempRet0 = threwValue; } else { $41 = -1; };
    $42 = tempRet0;
    $cond12 = ($41|0)==(1);
    if ($cond12) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem48$0 = $42;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    HEAP32[((80 + 65708|0))>>2] = $39;
    $43 = HEAP32[((80 + 65716|0))>>2]|0;
    __THREW__ = 0;
    invoke_viii(64,($43|0),0,0);
    $44 = __THREW__; __THREW__ = 0;
    if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = threwValue; } else { $45 = -1; };
    $46 = tempRet0;
    $cond13 = ($45|0)==(1);
    if ($cond13) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem48$0 = $46;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $47 = ($39|0)==(32768);
    if (!($47)) {
     break;
    }
   }
  }
  $48 = ($try_pushed_$0|0)!=(0);
  if ($48) {
   $49 = HEAP32[_try_key_>>2]|0;
   $50 = (($try_this_) + 168|0);
   $51 = HEAP32[$50>>2]|0;
   __THREW__ = 0;
   $52 = (invoke_iii(3,($49|0),($51|0))|0);
   $53 = __THREW__; __THREW__ = 0;
   if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = threwValue; } else { $54 = -1; };
   $55 = tempRet0;
   $cond8 = ($54|0)==(1);
   if ($cond8) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem48$0 = $55;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $56 = ($52|0)==(0);
   if (!($56)) {
    __THREW__ = 0;
    invoke_viiii(4,(8|0),(64|0),2282,(67656|0));
    $57 = __THREW__; __THREW__ = 0;
    if ((($57|0) != 0) & ((threwValue|0) != 0)) { $58 = _testSetjmp(HEAP32[$57>>2]|0, _setjmpTable)|0; if (($58|0) == 0) { _longjmp($57|0, threwValue|0); } tempRet0 = threwValue; } else { $58 = -1; };
    $59 = tempRet0;
    $cond9 = ($58|0)==(1);
    if ($cond9) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem48$0 = $59;$try_pushed_$0 = $try_pushed_$0$phi;
     continue;
    } else {
     label = 30;
     break;
    }
   }
   $try_pushed_$1 = 0;
  } else {
   $try_pushed_$1 = $try_pushed_$0;
  }
  $60 = (($try_this_) + 156|0);
  ;HEAP32[$err+0>>2]=HEAP32[$60+0>>2]|0;HEAP32[$err+4>>2]=HEAP32[$60+4>>2]|0;HEAP32[$err+8>>2]=HEAP32[$60+8>>2]|0;
  $61 = HEAP32[$err>>2]|0;
  $62 = ($61|0)!=(0);
  if (!($62)) {
   label = 45;
   break;
  }
  $63 = (($err) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer>>2] = $64;
  (invoke_iii(17,(66072|0),($vararg_buffer|0))|0);
  $65 = __THREW__; __THREW__ = 0;
  if ((($65|0) != 0) & ((threwValue|0) != 0)) { $66 = _testSetjmp(HEAP32[$65>>2]|0, _setjmpTable)|0; if (($66|0) == 0) { _longjmp($65|0, threwValue|0); } tempRet0 = threwValue; } else { $66 = -1; };
  $67 = tempRet0;
  $cond5 = ($66|0)==(1);
  if ($cond5) {
   $$reg2mem48$0 = $67;$try_pushed_$0 = $try_pushed_$1;
   continue;
  }
  $68 = (($err) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0);
  if ($70) {
   $71 = (($err) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   __THREW__ = 0;
   invoke_vi(19,($72|0));
   $73 = __THREW__; __THREW__ = 0;
   if ((($73|0) != 0) & ((threwValue|0) != 0)) { $74 = _testSetjmp(HEAP32[$73>>2]|0, _setjmpTable)|0; if (($74|0) == 0) { _longjmp($73|0, threwValue|0); } tempRet0 = threwValue; } else { $74 = -1; };
   $75 = tempRet0;
   $cond7 = ($74|0)==(1);
   if ($cond7) {
    $$reg2mem48$0 = $75;$try_pushed_$0 = $try_pushed_$1;
    continue;
   }
   $76 = (($err) + 4|0);
   HEAP32[$76>>2] = 0;
   $77 = (($err) + 8|0);
   HEAP32[$77>>2] = 0;
  }
  $78 = HEAP32[$err>>2]|0;
  $79 = (0 - ($78))|0;
  __THREW__ = 0;
  invoke_vi(7,($79|0));
  $80 = __THREW__; __THREW__ = 0;
  if ((($80|0) != 0) & ((threwValue|0) != 0)) { $81 = _testSetjmp(HEAP32[$80>>2]|0, _setjmpTable)|0; if (($81|0) == 0) { _longjmp($80|0, threwValue|0); } tempRet0 = threwValue; } else { $81 = -1; };
  $82 = tempRet0;
  $cond6 = ($81|0)==(1);
  if ($cond6) {
   $$reg2mem48$0 = $82;$try_pushed_$0 = $try_pushed_$1;
  } else {
   label = 43;
   break;
  }
 }
 if ((label|0) == 30) {
  // unreachable;
 }
 else if ((label|0) == 43) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 45) {
  STACKTOP = sp;return;
 }
}
function _outb_write($dummy) {
 $dummy = $dummy|0;
 var $$reg2mem47$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $9 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond2 = 0, $cond3 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, $err = 0, $try_pushed_$0 = 0;
 var $try_pushed_$0$phi = 0, $try_pushed_$1 = 0, $try_this_ = 0, $vararg_buffer = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $err = sp + 176|0;
 $try_this_ = sp + 4|0;
 $0 = (($try_this_) + 156|0);
 HEAP32[$0>>2] = 0;
 $1 = (($try_this_) + 156|0);
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($try_this_) + 156|0);
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = 0;
 __THREW__ = 0;
 invoke_v(1);
 $5 = __THREW__; __THREW__ = 0;
 if ((($5|0) != 0) & ((threwValue|0) != 0)) { $6 = _testSetjmp(HEAP32[$5>>2]|0, _setjmpTable)|0; if (($6|0) == 0) { _longjmp($5|0, threwValue|0); } tempRet0 = threwValue; } else { $6 = -1; };
 $7 = tempRet0;
 $cond = ($6|0)==(1);
 do {
  if ($cond) {
   $$reg2mem47$0 = $7;$try_pushed_$0 = 1;
  } else {
   $8 = HEAP32[_try_key_>>2]|0;
   __THREW__ = 0;
   $9 = (invoke_ii(2,($8|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
   $12 = tempRet0;
   $cond1 = ($11|0)==(1);
   if ($cond1) {
    $$reg2mem47$0 = $12;$try_pushed_$0 = 1;
   } else {
    $13 = (($try_this_) + 168|0);
    HEAP32[$13>>2] = $9;
    $14 = HEAP32[_try_key_>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_iii(3,($14|0),($try_this_|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = threwValue; } else { $17 = -1; };
    $18 = tempRet0;
    $cond2 = ($17|0)==(1);
    if ($cond2) {
     $$reg2mem47$0 = $18;$try_pushed_$0 = 1;
    } else {
     $19 = ($15|0)==(0);
     if (!($19)) {
      __THREW__ = 0;
      invoke_viiii(4,(8|0),(64|0),2927,(100568|0));
      $20 = __THREW__; __THREW__ = 0;
      if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = threwValue; } else { $21 = -1; };
      $22 = tempRet0;
      $cond3 = ($21|0)==(1);
      if ($cond3) {
       $$reg2mem47$0 = $22;$try_pushed_$0 = 1;
       break;
      }
      // unreachable;
     }
     _saveSetjmp($try_this_,1,_setjmpTable|0)|0;
     __THREW__ = 0;
     $23 = __THREW__; __THREW__ = 0;
     if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
     $25 = tempRet0;
     $cond4 = ($24|0)==(1);
     if ($cond4) {
      $$reg2mem47$0 = $25;$try_pushed_$0 = 1;
     } else {
      $$reg2mem47$0 = 0;$try_pushed_$0 = 1;
     }
    }
   }
  }
 } while(0);
 L14: while(1) {
  $26 = ($$reg2mem47$0|0)<(2);
  if ($26) {
   while(1) {
    $27 = HEAP32[67760>>2]|0;
    __THREW__ = 0;
    invoke_vi(62,($27|0));
    $28 = __THREW__; __THREW__ = 0;
    if ((($28|0) != 0) & ((threwValue|0) != 0)) { $29 = _testSetjmp(HEAP32[$28>>2]|0, _setjmpTable)|0; if (($29|0) == 0) { _longjmp($28|0, threwValue|0); } tempRet0 = threwValue; } else { $29 = -1; };
    $30 = tempRet0;
    $cond10 = ($29|0)==(1);
    if ($cond10) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem47$0 = $30;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $31 = HEAP32[67760>>2]|0;
    __THREW__ = 0;
    invoke_viii(63,($31|0),0,1);
    $32 = __THREW__; __THREW__ = 0;
    if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = threwValue; } else { $33 = -1; };
    $34 = tempRet0;
    $cond11 = ($33|0)==(1);
    if ($cond11) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem47$0 = $34;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $35 = HEAP32[67776>>2]|0;
    $36 = ($35|0)!=(0);
    if ($36) {
     $37 = HEAP32[((80 + 76|0))>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = HEAP32[((80 + 8|0))>>2]|0;
      __THREW__ = 0;
      invoke_viii(66,($39|0),(67784|0),($35|0));
      $40 = __THREW__; __THREW__ = 0;
      if ((($40|0) != 0) & ((threwValue|0) != 0)) { $41 = _testSetjmp(HEAP32[$40>>2]|0, _setjmpTable)|0; if (($41|0) == 0) { _longjmp($40|0, threwValue|0); } tempRet0 = threwValue; } else { $41 = -1; };
      $42 = tempRet0;
      $cond13 = ($41|0)==(1);
      if ($cond13) {
       $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem47$0 = $42;$try_pushed_$0 = $try_pushed_$0$phi;
       continue L14;
      }
     }
    }
    $43 = HEAP32[67760>>2]|0;
    __THREW__ = 0;
    invoke_viii(64,($43|0),0,0);
    $44 = __THREW__; __THREW__ = 0;
    if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = threwValue; } else { $45 = -1; };
    $46 = tempRet0;
    $cond12 = ($45|0)==(1);
    if ($cond12) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem47$0 = $46;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $47 = ($35|0)!=(0);
    if (!($47)) {
     break;
    }
   }
  }
  $48 = ($try_pushed_$0|0)!=(0);
  if ($48) {
   $49 = HEAP32[_try_key_>>2]|0;
   $50 = (($try_this_) + 168|0);
   $51 = HEAP32[$50>>2]|0;
   __THREW__ = 0;
   $52 = (invoke_iii(3,($49|0),($51|0))|0);
   $53 = __THREW__; __THREW__ = 0;
   if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = threwValue; } else { $54 = -1; };
   $55 = tempRet0;
   $cond8 = ($54|0)==(1);
   if ($cond8) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem47$0 = $55;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $56 = ($52|0)==(0);
   if (!($56)) {
    __THREW__ = 0;
    invoke_viiii(4,(8|0),(64|0),2938,(100568|0));
    $57 = __THREW__; __THREW__ = 0;
    if ((($57|0) != 0) & ((threwValue|0) != 0)) { $58 = _testSetjmp(HEAP32[$57>>2]|0, _setjmpTable)|0; if (($58|0) == 0) { _longjmp($57|0, threwValue|0); } tempRet0 = threwValue; } else { $58 = -1; };
    $59 = tempRet0;
    $cond9 = ($58|0)==(1);
    if ($cond9) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem47$0 = $59;$try_pushed_$0 = $try_pushed_$0$phi;
     continue;
    } else {
     label = 33;
     break;
    }
   }
   $try_pushed_$1 = 0;
  } else {
   $try_pushed_$1 = $try_pushed_$0;
  }
  $60 = (($try_this_) + 156|0);
  ;HEAP32[$err+0>>2]=HEAP32[$60+0>>2]|0;HEAP32[$err+4>>2]=HEAP32[$60+4>>2]|0;HEAP32[$err+8>>2]=HEAP32[$60+8>>2]|0;
  $61 = HEAP32[$err>>2]|0;
  $62 = ($61|0)!=(0);
  if (!($62)) {
   label = 48;
   break;
  }
  $63 = (($err) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer>>2] = $64;
  (invoke_iii(17,(66072|0),($vararg_buffer|0))|0);
  $65 = __THREW__; __THREW__ = 0;
  if ((($65|0) != 0) & ((threwValue|0) != 0)) { $66 = _testSetjmp(HEAP32[$65>>2]|0, _setjmpTable)|0; if (($66|0) == 0) { _longjmp($65|0, threwValue|0); } tempRet0 = threwValue; } else { $66 = -1; };
  $67 = tempRet0;
  $cond5 = ($66|0)==(1);
  if ($cond5) {
   $$reg2mem47$0 = $67;$try_pushed_$0 = $try_pushed_$1;
   continue;
  }
  $68 = (($err) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0);
  if ($70) {
   $71 = (($err) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   __THREW__ = 0;
   invoke_vi(19,($72|0));
   $73 = __THREW__; __THREW__ = 0;
   if ((($73|0) != 0) & ((threwValue|0) != 0)) { $74 = _testSetjmp(HEAP32[$73>>2]|0, _setjmpTable)|0; if (($74|0) == 0) { _longjmp($73|0, threwValue|0); } tempRet0 = threwValue; } else { $74 = -1; };
   $75 = tempRet0;
   $cond7 = ($74|0)==(1);
   if ($cond7) {
    $$reg2mem47$0 = $75;$try_pushed_$0 = $try_pushed_$1;
    continue;
   }
   $76 = (($err) + 4|0);
   HEAP32[$76>>2] = 0;
   $77 = (($err) + 8|0);
   HEAP32[$77>>2] = 0;
  }
  $78 = HEAP32[$err>>2]|0;
  $79 = (0 - ($78))|0;
  __THREW__ = 0;
  invoke_vi(7,($79|0));
  $80 = __THREW__; __THREW__ = 0;
  if ((($80|0) != 0) & ((threwValue|0) != 0)) { $81 = _testSetjmp(HEAP32[$80>>2]|0, _setjmpTable)|0; if (($81|0) == 0) { _longjmp($80|0, threwValue|0); } tempRet0 = threwValue; } else { $81 = -1; };
  $82 = tempRet0;
  $cond6 = ($81|0)==(1);
  if ($cond6) {
   $$reg2mem47$0 = $82;$try_pushed_$0 = $try_pushed_$1;
  } else {
   label = 46;
   break;
  }
 }
 if ((label|0) == 33) {
  // unreachable;
 }
 else if ((label|0) == 46) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 48) {
  STACKTOP = sp;return;
 }
}
function _outb_check($dummy) {
 $dummy = $dummy|0;
 var $$reg2mem54$0 = 0, $$reg2mem56$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond14 = 0, $cond2 = 0, $cond3 = 0, $cond4 = 0;
 var $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, $err = 0, $try_pushed_$0 = 0, $try_pushed_$0$phi = 0, $try_pushed_$1 = 0, $try_this_ = 0, $vararg_buffer = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();HEAP32[_setjmpTable>>2]=0;
 $err = sp + 176|0;
 $try_this_ = sp + 4|0;
 $0 = (($try_this_) + 156|0);
 HEAP32[$0>>2] = 0;
 $1 = (($try_this_) + 156|0);
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($try_this_) + 156|0);
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = 0;
 __THREW__ = 0;
 invoke_v(1);
 $5 = __THREW__; __THREW__ = 0;
 if ((($5|0) != 0) & ((threwValue|0) != 0)) { $6 = _testSetjmp(HEAP32[$5>>2]|0, _setjmpTable)|0; if (($6|0) == 0) { _longjmp($5|0, threwValue|0); } tempRet0 = threwValue; } else { $6 = -1; };
 $7 = tempRet0;
 $cond = ($6|0)==(1);
 do {
  if ($cond) {
   $$reg2mem56$0 = $7;$try_pushed_$0 = 1;
  } else {
   $8 = HEAP32[_try_key_>>2]|0;
   __THREW__ = 0;
   $9 = (invoke_ii(2,($8|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
   $12 = tempRet0;
   $cond1 = ($11|0)==(1);
   if ($cond1) {
    $$reg2mem56$0 = $12;$try_pushed_$0 = 1;
   } else {
    $13 = (($try_this_) + 168|0);
    HEAP32[$13>>2] = $9;
    $14 = HEAP32[_try_key_>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_iii(3,($14|0),($try_this_|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = threwValue; } else { $17 = -1; };
    $18 = tempRet0;
    $cond2 = ($17|0)==(1);
    if ($cond2) {
     $$reg2mem56$0 = $18;$try_pushed_$0 = 1;
    } else {
     $19 = ($15|0)==(0);
     if (!($19)) {
      __THREW__ = 0;
      invoke_viiii(4,(8|0),(64|0),2953,(100552|0));
      $20 = __THREW__; __THREW__ = 0;
      if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = threwValue; } else { $21 = -1; };
      $22 = tempRet0;
      $cond3 = ($21|0)==(1);
      if ($cond3) {
       $$reg2mem56$0 = $22;$try_pushed_$0 = 1;
       break;
      }
      // unreachable;
     }
     _saveSetjmp($try_this_,1,_setjmpTable|0)|0;
     __THREW__ = 0;
     $23 = __THREW__; __THREW__ = 0;
     if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
     $25 = tempRet0;
     $cond4 = ($24|0)==(1);
     if ($cond4) {
      $$reg2mem56$0 = $25;$try_pushed_$0 = 1;
     } else {
      $$reg2mem56$0 = 0;$try_pushed_$0 = 1;
     }
    }
   }
  }
 } while(0);
 L14: while(1) {
  $26 = ($$reg2mem56$0|0)<(2);
  if ($26) {
   while(1) {
    $27 = HEAP32[67768>>2]|0;
    __THREW__ = 0;
    invoke_vi(62,($27|0));
    $28 = __THREW__; __THREW__ = 0;
    if ((($28|0) != 0) & ((threwValue|0) != 0)) { $29 = _testSetjmp(HEAP32[$28>>2]|0, _setjmpTable)|0; if (($29|0) == 0) { _longjmp($28|0, threwValue|0); } tempRet0 = threwValue; } else { $29 = -1; };
    $30 = tempRet0;
    $cond10 = ($29|0)==(1);
    if ($cond10) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem56$0 = $30;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $31 = HEAP32[67768>>2]|0;
    __THREW__ = 0;
    invoke_viii(63,($31|0),0,1);
    $32 = __THREW__; __THREW__ = 0;
    if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = threwValue; } else { $33 = -1; };
    $34 = tempRet0;
    $cond11 = ($33|0)==(1);
    if ($cond11) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem56$0 = $34;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $35 = HEAP32[67776>>2]|0;
    $36 = HEAP32[((80 + 44|0))>>2]|0;
    $37 = ($36|0)==(1);
    if ($37) {
     $38 = HEAP32[((80 + 32936|0))>>2]|0;
     __THREW__ = 0;
     $39 = (invoke_iiii(60,($38|0),(67784|0),($35|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     if ((($40|0) != 0) & ((threwValue|0) != 0)) { $41 = _testSetjmp(HEAP32[$40>>2]|0, _setjmpTable)|0; if (($41|0) == 0) { _longjmp($40|0, threwValue|0); } tempRet0 = threwValue; } else { $41 = -1; };
     $42 = tempRet0;
     $cond14 = ($41|0)==(1);
     if ($cond14) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem56$0 = $42;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $$reg2mem54$0 = $39;
    } else {
     $43 = HEAP32[((80 + 32936|0))>>2]|0;
     __THREW__ = 0;
     $44 = (invoke_iiii(61,($43|0),(67784|0),($35|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     if ((($45|0) != 0) & ((threwValue|0) != 0)) { $46 = _testSetjmp(HEAP32[$45>>2]|0, _setjmpTable)|0; if (($46|0) == 0) { _longjmp($45|0, threwValue|0); } tempRet0 = threwValue; } else { $46 = -1; };
     $47 = tempRet0;
     $cond12 = ($46|0)==(1);
     if ($cond12) {
      $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem56$0 = $47;$try_pushed_$0 = $try_pushed_$0$phi;
      continue L14;
     }
     $$reg2mem54$0 = $44;
    }
    HEAP32[((80 + 32936|0))>>2] = $$reg2mem54$0;
    $48 = HEAP32[67768>>2]|0;
    __THREW__ = 0;
    invoke_viii(64,($48|0),0,0);
    $49 = __THREW__; __THREW__ = 0;
    if ((($49|0) != 0) & ((threwValue|0) != 0)) { $50 = _testSetjmp(HEAP32[$49>>2]|0, _setjmpTable)|0; if (($50|0) == 0) { _longjmp($49|0, threwValue|0); } tempRet0 = threwValue; } else { $50 = -1; };
    $51 = tempRet0;
    $cond13 = ($50|0)==(1);
    if ($cond13) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem56$0 = $51;$try_pushed_$0 = $try_pushed_$0$phi;
     continue L14;
    }
    $52 = ($35|0)!=(0);
    if (!($52)) {
     break;
    }
   }
  }
  $53 = ($try_pushed_$0|0)!=(0);
  if ($53) {
   $54 = HEAP32[_try_key_>>2]|0;
   $55 = (($try_this_) + 168|0);
   $56 = HEAP32[$55>>2]|0;
   __THREW__ = 0;
   $57 = (invoke_iii(3,($54|0),($56|0))|0);
   $58 = __THREW__; __THREW__ = 0;
   if ((($58|0) != 0) & ((threwValue|0) != 0)) { $59 = _testSetjmp(HEAP32[$58>>2]|0, _setjmpTable)|0; if (($59|0) == 0) { _longjmp($58|0, threwValue|0); } tempRet0 = threwValue; } else { $59 = -1; };
   $60 = tempRet0;
   $cond8 = ($59|0)==(1);
   if ($cond8) {
    $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem56$0 = $60;$try_pushed_$0 = $try_pushed_$0$phi;
    continue;
   }
   $61 = ($57|0)==(0);
   if (!($61)) {
    __THREW__ = 0;
    invoke_viiii(4,(8|0),(64|0),2963,(100552|0));
    $62 = __THREW__; __THREW__ = 0;
    if ((($62|0) != 0) & ((threwValue|0) != 0)) { $63 = _testSetjmp(HEAP32[$62>>2]|0, _setjmpTable)|0; if (($63|0) == 0) { _longjmp($62|0, threwValue|0); } tempRet0 = threwValue; } else { $63 = -1; };
    $64 = tempRet0;
    $cond9 = ($63|0)==(1);
    if ($cond9) {
     $try_pushed_$0$phi = $try_pushed_$0;$$reg2mem56$0 = $64;$try_pushed_$0 = $try_pushed_$0$phi;
     continue;
    } else {
     label = 34;
     break;
    }
   }
   $try_pushed_$1 = 0;
  } else {
   $try_pushed_$1 = $try_pushed_$0;
  }
  $65 = (($try_this_) + 156|0);
  ;HEAP32[$err+0>>2]=HEAP32[$65+0>>2]|0;HEAP32[$err+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$err+8>>2]=HEAP32[$65+8>>2]|0;
  $66 = HEAP32[$err>>2]|0;
  $67 = ($66|0)!=(0);
  if (!($67)) {
   label = 49;
   break;
  }
  $68 = (($err) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  __THREW__ = 0;
  HEAP32[$vararg_buffer>>2] = $69;
  (invoke_iii(17,(66072|0),($vararg_buffer|0))|0);
  $70 = __THREW__; __THREW__ = 0;
  if ((($70|0) != 0) & ((threwValue|0) != 0)) { $71 = _testSetjmp(HEAP32[$70>>2]|0, _setjmpTable)|0; if (($71|0) == 0) { _longjmp($70|0, threwValue|0); } tempRet0 = threwValue; } else { $71 = -1; };
  $72 = tempRet0;
  $cond5 = ($71|0)==(1);
  if ($cond5) {
   $$reg2mem56$0 = $72;$try_pushed_$0 = $try_pushed_$1;
   continue;
  }
  $73 = (($err) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = (($err) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   __THREW__ = 0;
   invoke_vi(19,($77|0));
   $78 = __THREW__; __THREW__ = 0;
   if ((($78|0) != 0) & ((threwValue|0) != 0)) { $79 = _testSetjmp(HEAP32[$78>>2]|0, _setjmpTable)|0; if (($79|0) == 0) { _longjmp($78|0, threwValue|0); } tempRet0 = threwValue; } else { $79 = -1; };
   $80 = tempRet0;
   $cond7 = ($79|0)==(1);
   if ($cond7) {
    $$reg2mem56$0 = $80;$try_pushed_$0 = $try_pushed_$1;
    continue;
   }
   $81 = (($err) + 4|0);
   HEAP32[$81>>2] = 0;
   $82 = (($err) + 8|0);
   HEAP32[$82>>2] = 0;
  }
  $83 = HEAP32[$err>>2]|0;
  $84 = (0 - ($83))|0;
  __THREW__ = 0;
  invoke_vi(7,($84|0));
  $85 = __THREW__; __THREW__ = 0;
  if ((($85|0) != 0) & ((threwValue|0) != 0)) { $86 = _testSetjmp(HEAP32[$85>>2]|0, _setjmpTable)|0; if (($86|0) == 0) { _longjmp($85|0, threwValue|0); } tempRet0 = threwValue; } else { $86 = -1; };
  $87 = tempRet0;
  $cond6 = ($86|0)==(1);
  if ($cond6) {
   $$reg2mem56$0 = $87;$try_pushed_$0 = $try_pushed_$1;
  } else {
   label = 47;
   break;
  }
 }
 if ((label|0) == 34) {
  // unreachable;
 }
 else if ((label|0) == 47) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 49) {
  STACKTOP = sp;return;
 }
}
function _inb($desc,$buf) {
 $desc = $desc|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $desc;
 $1 = $buf;
 (_load()|0);
 $2 = HEAP32[((80 + 32912|0))>>2]|0;
 $3 = $1;
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[((80 + 32916|0))>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _dos2time($dos) {
 $dos = $dos|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tm = sp + 4|0;
 $1 = $dos;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_time((0|0))|0);
  $0 = $4;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $5 = $1;
  $6 = $5 >>> 25;
  $7 = $6 & 127;
  $8 = (($7) + 80)|0;
  $9 = (($tm) + 20|0);
  HEAP32[$9>>2] = $8;
  $10 = $1;
  $11 = $10 >>> 21;
  $12 = $11 & 15;
  $13 = (($12) - 1)|0;
  $14 = (($tm) + 16|0);
  HEAP32[$14>>2] = $13;
  $15 = $1;
  $16 = $15 >>> 16;
  $17 = $16 & 31;
  $18 = (($tm) + 12|0);
  HEAP32[$18>>2] = $17;
  $19 = $1;
  $20 = $19 >>> 11;
  $21 = $20 & 31;
  $22 = (($tm) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = $1;
  $24 = $23 >>> 5;
  $25 = $24 & 63;
  $26 = (($tm) + 4|0);
  HEAP32[$26>>2] = $25;
  $27 = $1;
  $28 = $27 << 1;
  $29 = $28 & 62;
  HEAP32[$tm>>2] = $29;
  $30 = (($tm) + 32|0);
  HEAP32[$30>>2] = -1;
  $31 = (_mktime(($tm|0))|0);
  $0 = $31;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _read_extra($len,$save) {
 $len = $len|0;
 $save = $save|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $id = 0;
 var $size = 0, $tmp2 = 0, $tmp4 = 0, $togo = 0, $togo1 = 0, $togo2 = 0, $togo3 = 0, $togo4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $len;
 $2 = $save;
 L1: while(1) {
  $3 = $1;
  $4 = ($3>>>0)>=(4);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[((80 + 32916|0))>>2]|0;
  $6 = ($5|0)==(0);
  do {
   if ($6) {
    $7 = HEAP32[((80 + 32920|0))>>2]|0;
    $8 = ($7|0)!=(0);
    if (!($8)) {
     $9 = (_load()|0);
     $10 = ($9|0)==(0);
     if (!($10)) {
      label = 7;
      break;
     }
    }
    $17 = 0;
   } else {
    label = 7;
   }
  } while(0);
  if ((label|0) == 7) {
   label = 0;
   $11 = HEAP32[((80 + 32916|0))>>2]|0;
   $12 = (($11) + -1)|0;
   HEAP32[((80 + 32916|0))>>2] = $12;
   $13 = HEAP32[((80 + 32912|0))>>2]|0;
   $14 = (($13) + 1|0);
   HEAP32[((80 + 32912|0))>>2] = $14;
   $15 = HEAP8[$13>>0]|0;
   $16 = $15&255;
   $17 = $16;
  }
  $tmp2 = $17;
  $18 = $tmp2;
  $19 = HEAP32[((80 + 32916|0))>>2]|0;
  $20 = ($19|0)==(0);
  do {
   if ($20) {
    $21 = HEAP32[((80 + 32920|0))>>2]|0;
    $22 = ($21|0)!=(0);
    if (!($22)) {
     $23 = (_load()|0);
     $24 = ($23|0)==(0);
     if (!($24)) {
      label = 12;
      break;
     }
    }
    $32 = 0;
   } else {
    label = 12;
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   $25 = HEAP32[((80 + 32916|0))>>2]|0;
   $26 = (($25) + -1)|0;
   HEAP32[((80 + 32916|0))>>2] = $26;
   $27 = HEAP32[((80 + 32912|0))>>2]|0;
   $28 = (($27) + 1|0);
   HEAP32[((80 + 32912|0))>>2] = $28;
   $29 = HEAP8[$27>>0]|0;
   $30 = $29&255;
   $32 = $30;
  }
  $31 = $32 << 8;
  $33 = (($18) + ($31))|0;
  $id = $33;
  $34 = HEAP32[((80 + 32916|0))>>2]|0;
  $35 = ($34|0)==(0);
  do {
   if ($35) {
    $36 = HEAP32[((80 + 32920|0))>>2]|0;
    $37 = ($36|0)!=(0);
    if (!($37)) {
     $38 = (_load()|0);
     $39 = ($38|0)==(0);
     if (!($39)) {
      label = 17;
      break;
     }
    }
    $46 = 0;
   } else {
    label = 17;
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   $40 = HEAP32[((80 + 32916|0))>>2]|0;
   $41 = (($40) + -1)|0;
   HEAP32[((80 + 32916|0))>>2] = $41;
   $42 = HEAP32[((80 + 32912|0))>>2]|0;
   $43 = (($42) + 1|0);
   HEAP32[((80 + 32912|0))>>2] = $43;
   $44 = HEAP8[$42>>0]|0;
   $45 = $44&255;
   $46 = $45;
  }
  $tmp2 = $46;
  $47 = $tmp2;
  $48 = HEAP32[((80 + 32916|0))>>2]|0;
  $49 = ($48|0)==(0);
  do {
   if ($49) {
    $50 = HEAP32[((80 + 32920|0))>>2]|0;
    $51 = ($50|0)!=(0);
    if (!($51)) {
     $52 = (_load()|0);
     $53 = ($52|0)==(0);
     if (!($53)) {
      label = 22;
      break;
     }
    }
    $61 = 0;
   } else {
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   $54 = HEAP32[((80 + 32916|0))>>2]|0;
   $55 = (($54) + -1)|0;
   HEAP32[((80 + 32916|0))>>2] = $55;
   $56 = HEAP32[((80 + 32912|0))>>2]|0;
   $57 = (($56) + 1|0);
   HEAP32[((80 + 32912|0))>>2] = $57;
   $58 = HEAP8[$56>>0]|0;
   $59 = $58&255;
   $61 = $59;
  }
  $60 = $61 << 8;
  $62 = (($47) + ($60))|0;
  $size = $62;
  $63 = HEAP32[((80 + 32920|0))>>2]|0;
  $64 = ($63|0)!=(0);
  if ($64) {
   label = 24;
   break;
  }
  $65 = $1;
  $66 = (($65) - 4)|0;
  $1 = $66;
  $67 = $size;
  $68 = $1;
  $69 = ($67>>>0)>($68>>>0);
  if ($69) {
   label = 26;
   break;
  }
  $70 = $size;
  $71 = $1;
  $72 = (($71) - ($70))|0;
  $1 = $72;
  $73 = $id;
  $74 = ($73|0)==(1);
  if ($74) {
   $75 = HEAP32[((80 + 140|0))>>2]|0;
   $76 = ($75|0)==(-1);
   if ($76) {
    $77 = $size;
    $78 = ($77>>>0)>=(8);
    if ($78) {
     $79 = HEAP32[((80 + 32916|0))>>2]|0;
     $80 = ($79|0)==(0);
     do {
      if ($80) {
       $81 = HEAP32[((80 + 32920|0))>>2]|0;
       $82 = ($81|0)!=(0);
       if (!($82)) {
        $83 = (_load()|0);
        $84 = ($83|0)==(0);
        if (!($84)) {
         label = 34;
         break;
        }
       }
       $91 = 0;
      } else {
       label = 34;
      }
     } while(0);
     if ((label|0) == 34) {
      label = 0;
      $85 = HEAP32[((80 + 32916|0))>>2]|0;
      $86 = (($85) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $86;
      $87 = HEAP32[((80 + 32912|0))>>2]|0;
      $88 = (($87) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $88;
      $89 = HEAP8[$87>>0]|0;
      $90 = $89&255;
      $91 = $90;
     }
     $tmp2 = $91;
     $92 = $tmp2;
     $93 = HEAP32[((80 + 32916|0))>>2]|0;
     $94 = ($93|0)==(0);
     do {
      if ($94) {
       $95 = HEAP32[((80 + 32920|0))>>2]|0;
       $96 = ($95|0)!=(0);
       if (!($96)) {
        $97 = (_load()|0);
        $98 = ($97|0)==(0);
        if (!($98)) {
         label = 39;
         break;
        }
       }
       $106 = 0;
      } else {
       label = 39;
      }
     } while(0);
     if ((label|0) == 39) {
      label = 0;
      $99 = HEAP32[((80 + 32916|0))>>2]|0;
      $100 = (($99) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $100;
      $101 = HEAP32[((80 + 32912|0))>>2]|0;
      $102 = (($101) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $102;
      $103 = HEAP8[$101>>0]|0;
      $104 = $103&255;
      $106 = $104;
     }
     $105 = $106 << 8;
     $107 = (($92) + ($105))|0;
     $tmp4 = $107;
     $108 = $tmp4;
     $109 = HEAP32[((80 + 32916|0))>>2]|0;
     $110 = ($109|0)==(0);
     do {
      if ($110) {
       $111 = HEAP32[((80 + 32920|0))>>2]|0;
       $112 = ($111|0)!=(0);
       if (!($112)) {
        $113 = (_load()|0);
        $114 = ($113|0)==(0);
        if (!($114)) {
         label = 44;
         break;
        }
       }
       $121 = 0;
      } else {
       label = 44;
      }
     } while(0);
     if ((label|0) == 44) {
      label = 0;
      $115 = HEAP32[((80 + 32916|0))>>2]|0;
      $116 = (($115) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $116;
      $117 = HEAP32[((80 + 32912|0))>>2]|0;
      $118 = (($117) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $118;
      $119 = HEAP8[$117>>0]|0;
      $120 = $119&255;
      $121 = $120;
     }
     $tmp2 = $121;
     $122 = $tmp2;
     $123 = HEAP32[((80 + 32916|0))>>2]|0;
     $124 = ($123|0)==(0);
     do {
      if ($124) {
       $125 = HEAP32[((80 + 32920|0))>>2]|0;
       $126 = ($125|0)!=(0);
       if (!($126)) {
        $127 = (_load()|0);
        $128 = ($127|0)==(0);
        if (!($128)) {
         label = 49;
         break;
        }
       }
       $136 = 0;
      } else {
       label = 49;
      }
     } while(0);
     if ((label|0) == 49) {
      label = 0;
      $129 = HEAP32[((80 + 32916|0))>>2]|0;
      $130 = (($129) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $130;
      $131 = HEAP32[((80 + 32912|0))>>2]|0;
      $132 = (($131) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $132;
      $133 = HEAP8[$131>>0]|0;
      $134 = $133&255;
      $136 = $134;
     }
     $135 = $136 << 8;
     $137 = (($122) + ($135))|0;
     $138 = $137 << 16;
     $139 = (($108) + ($138))|0;
     HEAP32[((80 + 140|0))>>2] = $139;
     $togo = 4;
     while(1) {
      $140 = $togo;
      $141 = HEAP32[((80 + 32916|0))>>2]|0;
      $142 = ($140>>>0)>($141>>>0);
      if (!($142)) {
       break;
      }
      $143 = HEAP32[((80 + 32916|0))>>2]|0;
      $144 = $togo;
      $145 = (($144) - ($143))|0;
      $togo = $145;
      $146 = (_load()|0);
      $147 = ($146|0)==(0);
      if ($147) {
       label = 54;
       break L1;
      }
     }
     $148 = $togo;
     $149 = HEAP32[((80 + 32916|0))>>2]|0;
     $150 = (($149) - ($148))|0;
     HEAP32[((80 + 32916|0))>>2] = $150;
     $151 = $togo;
     $152 = HEAP32[((80 + 32912|0))>>2]|0;
     $153 = (($152) + ($151)|0);
     HEAP32[((80 + 32912|0))>>2] = $153;
     $154 = $size;
     $155 = (($154) - 8)|0;
     $size = $155;
    }
   }
   $156 = HEAP32[((80 + 136|0))>>2]|0;
   $157 = ($156|0)==(-1);
   if ($157) {
    $158 = $size;
    $159 = ($158>>>0)>=(8);
    if ($159) {
     $160 = HEAP32[((80 + 32916|0))>>2]|0;
     $161 = ($160|0)==(0);
     do {
      if ($161) {
       $162 = HEAP32[((80 + 32920|0))>>2]|0;
       $163 = ($162|0)!=(0);
       if (!($163)) {
        $164 = (_load()|0);
        $165 = ($164|0)==(0);
        if (!($165)) {
         label = 64;
         break;
        }
       }
       $172 = 0;
      } else {
       label = 64;
      }
     } while(0);
     if ((label|0) == 64) {
      label = 0;
      $166 = HEAP32[((80 + 32916|0))>>2]|0;
      $167 = (($166) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $167;
      $168 = HEAP32[((80 + 32912|0))>>2]|0;
      $169 = (($168) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $169;
      $170 = HEAP8[$168>>0]|0;
      $171 = $170&255;
      $172 = $171;
     }
     $tmp2 = $172;
     $173 = $tmp2;
     $174 = HEAP32[((80 + 32916|0))>>2]|0;
     $175 = ($174|0)==(0);
     do {
      if ($175) {
       $176 = HEAP32[((80 + 32920|0))>>2]|0;
       $177 = ($176|0)!=(0);
       if (!($177)) {
        $178 = (_load()|0);
        $179 = ($178|0)==(0);
        if (!($179)) {
         label = 69;
         break;
        }
       }
       $187 = 0;
      } else {
       label = 69;
      }
     } while(0);
     if ((label|0) == 69) {
      label = 0;
      $180 = HEAP32[((80 + 32916|0))>>2]|0;
      $181 = (($180) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $181;
      $182 = HEAP32[((80 + 32912|0))>>2]|0;
      $183 = (($182) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $183;
      $184 = HEAP8[$182>>0]|0;
      $185 = $184&255;
      $187 = $185;
     }
     $186 = $187 << 8;
     $188 = (($173) + ($186))|0;
     $tmp4 = $188;
     $189 = $tmp4;
     $190 = HEAP32[((80 + 32916|0))>>2]|0;
     $191 = ($190|0)==(0);
     do {
      if ($191) {
       $192 = HEAP32[((80 + 32920|0))>>2]|0;
       $193 = ($192|0)!=(0);
       if (!($193)) {
        $194 = (_load()|0);
        $195 = ($194|0)==(0);
        if (!($195)) {
         label = 74;
         break;
        }
       }
       $202 = 0;
      } else {
       label = 74;
      }
     } while(0);
     if ((label|0) == 74) {
      label = 0;
      $196 = HEAP32[((80 + 32916|0))>>2]|0;
      $197 = (($196) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $197;
      $198 = HEAP32[((80 + 32912|0))>>2]|0;
      $199 = (($198) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $199;
      $200 = HEAP8[$198>>0]|0;
      $201 = $200&255;
      $202 = $201;
     }
     $tmp2 = $202;
     $203 = $tmp2;
     $204 = HEAP32[((80 + 32916|0))>>2]|0;
     $205 = ($204|0)==(0);
     do {
      if ($205) {
       $206 = HEAP32[((80 + 32920|0))>>2]|0;
       $207 = ($206|0)!=(0);
       if (!($207)) {
        $208 = (_load()|0);
        $209 = ($208|0)==(0);
        if (!($209)) {
         label = 79;
         break;
        }
       }
       $217 = 0;
      } else {
       label = 79;
      }
     } while(0);
     if ((label|0) == 79) {
      label = 0;
      $210 = HEAP32[((80 + 32916|0))>>2]|0;
      $211 = (($210) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $211;
      $212 = HEAP32[((80 + 32912|0))>>2]|0;
      $213 = (($212) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $213;
      $214 = HEAP8[$212>>0]|0;
      $215 = $214&255;
      $217 = $215;
     }
     $216 = $217 << 8;
     $218 = (($203) + ($216))|0;
     $219 = $218 << 16;
     $220 = (($189) + ($219))|0;
     HEAP32[((80 + 136|0))>>2] = $220;
     $togo1 = 4;
     while(1) {
      $221 = $togo1;
      $222 = HEAP32[((80 + 32916|0))>>2]|0;
      $223 = ($221>>>0)>($222>>>0);
      if (!($223)) {
       break;
      }
      $224 = HEAP32[((80 + 32916|0))>>2]|0;
      $225 = $togo1;
      $226 = (($225) - ($224))|0;
      $togo1 = $226;
      $227 = (_load()|0);
      $228 = ($227|0)==(0);
      if ($228) {
       label = 84;
       break L1;
      }
     }
     $229 = $togo1;
     $230 = HEAP32[((80 + 32916|0))>>2]|0;
     $231 = (($230) - ($229))|0;
     HEAP32[((80 + 32916|0))>>2] = $231;
     $232 = $togo1;
     $233 = HEAP32[((80 + 32912|0))>>2]|0;
     $234 = (($233) + ($232)|0);
     HEAP32[((80 + 32912|0))>>2] = $234;
     $235 = $size;
     $236 = (($235) - 8)|0;
     $size = $236;
    }
   }
  }
  $237 = $2;
  $238 = ($237|0)!=(0);
  if ($238) {
   $239 = $id;
   $240 = ($239|0)==(13);
   if ($240) {
    label = 92;
   } else {
    $241 = $id;
    $242 = ($241|0)==(22613);
    if ($242) {
     label = 92;
    }
   }
   if ((label|0) == 92) {
    label = 0;
    $243 = $size;
    $244 = ($243>>>0)>=(8);
    if ($244) {
     $togo2 = 4;
     while(1) {
      $245 = $togo2;
      $246 = HEAP32[((80 + 32916|0))>>2]|0;
      $247 = ($245>>>0)>($246>>>0);
      if (!($247)) {
       break;
      }
      $248 = HEAP32[((80 + 32916|0))>>2]|0;
      $249 = $togo2;
      $250 = (($249) - ($248))|0;
      $togo2 = $250;
      $251 = (_load()|0);
      $252 = ($251|0)==(0);
      if ($252) {
       label = 97;
       break L1;
      }
     }
     $253 = $togo2;
     $254 = HEAP32[((80 + 32916|0))>>2]|0;
     $255 = (($254) - ($253))|0;
     HEAP32[((80 + 32916|0))>>2] = $255;
     $256 = $togo2;
     $257 = HEAP32[((80 + 32912|0))>>2]|0;
     $258 = (($257) + ($256)|0);
     HEAP32[((80 + 32912|0))>>2] = $258;
     $259 = HEAP32[((80 + 32916|0))>>2]|0;
     $260 = ($259|0)==(0);
     do {
      if ($260) {
       $261 = HEAP32[((80 + 32920|0))>>2]|0;
       $262 = ($261|0)!=(0);
       if (!($262)) {
        $263 = (_load()|0);
        $264 = ($263|0)==(0);
        if (!($264)) {
         label = 104;
         break;
        }
       }
       $271 = 0;
      } else {
       label = 104;
      }
     } while(0);
     if ((label|0) == 104) {
      label = 0;
      $265 = HEAP32[((80 + 32916|0))>>2]|0;
      $266 = (($265) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $266;
      $267 = HEAP32[((80 + 32912|0))>>2]|0;
      $268 = (($267) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $268;
      $269 = HEAP8[$267>>0]|0;
      $270 = $269&255;
      $271 = $270;
     }
     $tmp2 = $271;
     $272 = $tmp2;
     $273 = HEAP32[((80 + 32916|0))>>2]|0;
     $274 = ($273|0)==(0);
     do {
      if ($274) {
       $275 = HEAP32[((80 + 32920|0))>>2]|0;
       $276 = ($275|0)!=(0);
       if (!($276)) {
        $277 = (_load()|0);
        $278 = ($277|0)==(0);
        if (!($278)) {
         label = 109;
         break;
        }
       }
       $286 = 0;
      } else {
       label = 109;
      }
     } while(0);
     if ((label|0) == 109) {
      label = 0;
      $279 = HEAP32[((80 + 32916|0))>>2]|0;
      $280 = (($279) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $280;
      $281 = HEAP32[((80 + 32912|0))>>2]|0;
      $282 = (($281) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $282;
      $283 = HEAP8[$281>>0]|0;
      $284 = $283&255;
      $286 = $284;
     }
     $285 = $286 << 8;
     $287 = (($272) + ($285))|0;
     $tmp4 = $287;
     $288 = $tmp4;
     $289 = HEAP32[((80 + 32916|0))>>2]|0;
     $290 = ($289|0)==(0);
     do {
      if ($290) {
       $291 = HEAP32[((80 + 32920|0))>>2]|0;
       $292 = ($291|0)!=(0);
       if (!($292)) {
        $293 = (_load()|0);
        $294 = ($293|0)==(0);
        if (!($294)) {
         label = 114;
         break;
        }
       }
       $301 = 0;
      } else {
       label = 114;
      }
     } while(0);
     if ((label|0) == 114) {
      label = 0;
      $295 = HEAP32[((80 + 32916|0))>>2]|0;
      $296 = (($295) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $296;
      $297 = HEAP32[((80 + 32912|0))>>2]|0;
      $298 = (($297) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $298;
      $299 = HEAP8[$297>>0]|0;
      $300 = $299&255;
      $301 = $300;
     }
     $tmp2 = $301;
     $302 = $tmp2;
     $303 = HEAP32[((80 + 32916|0))>>2]|0;
     $304 = ($303|0)==(0);
     do {
      if ($304) {
       $305 = HEAP32[((80 + 32920|0))>>2]|0;
       $306 = ($305|0)!=(0);
       if (!($306)) {
        $307 = (_load()|0);
        $308 = ($307|0)==(0);
        if (!($308)) {
         label = 119;
         break;
        }
       }
       $316 = 0;
      } else {
       label = 119;
      }
     } while(0);
     if ((label|0) == 119) {
      label = 0;
      $309 = HEAP32[((80 + 32916|0))>>2]|0;
      $310 = (($309) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $310;
      $311 = HEAP32[((80 + 32912|0))>>2]|0;
      $312 = (($311) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $312;
      $313 = HEAP8[$311>>0]|0;
      $314 = $313&255;
      $316 = $314;
     }
     $315 = $316 << 8;
     $317 = (($302) + ($315))|0;
     $318 = $317 << 16;
     $319 = (($288) + ($318))|0;
     $320 = (_tolong($319)|0);
     HEAP32[((80 + 124|0))>>2] = $320;
     $321 = $size;
     $322 = (($321) - 8)|0;
     $size = $322;
    }
   }
   $323 = $id;
   $324 = ($323|0)==(21589);
   if ($324) {
    $325 = $size;
    $326 = ($325>>>0)>=(5);
    if ($326) {
     $327 = $size;
     $328 = (($327) + -1)|0;
     $size = $328;
     $329 = HEAP32[((80 + 32916|0))>>2]|0;
     $330 = ($329|0)==(0);
     do {
      if ($330) {
       $331 = HEAP32[((80 + 32920|0))>>2]|0;
       $332 = ($331|0)!=(0);
       if (!($332)) {
        $333 = (_load()|0);
        $334 = ($333|0)==(0);
        if (!($334)) {
         label = 127;
         break;
        }
       }
       $342 = 0;
      } else {
       label = 127;
      }
     } while(0);
     if ((label|0) == 127) {
      label = 0;
      $335 = HEAP32[((80 + 32916|0))>>2]|0;
      $336 = (($335) + -1)|0;
      HEAP32[((80 + 32916|0))>>2] = $336;
      $337 = HEAP32[((80 + 32912|0))>>2]|0;
      $338 = (($337) + 1|0);
      HEAP32[((80 + 32912|0))>>2] = $338;
      $339 = HEAP8[$337>>0]|0;
      $340 = $339&255;
      $342 = $340;
     }
     $341 = $342 & 1;
     $343 = ($341|0)!=(0);
     if ($343) {
      $344 = HEAP32[((80 + 32916|0))>>2]|0;
      $345 = ($344|0)==(0);
      do {
       if ($345) {
        $346 = HEAP32[((80 + 32920|0))>>2]|0;
        $347 = ($346|0)!=(0);
        if (!($347)) {
         $348 = (_load()|0);
         $349 = ($348|0)==(0);
         if (!($349)) {
          label = 133;
          break;
         }
        }
        $356 = 0;
       } else {
        label = 133;
       }
      } while(0);
      if ((label|0) == 133) {
       label = 0;
       $350 = HEAP32[((80 + 32916|0))>>2]|0;
       $351 = (($350) + -1)|0;
       HEAP32[((80 + 32916|0))>>2] = $351;
       $352 = HEAP32[((80 + 32912|0))>>2]|0;
       $353 = (($352) + 1|0);
       HEAP32[((80 + 32912|0))>>2] = $353;
       $354 = HEAP8[$352>>0]|0;
       $355 = $354&255;
       $356 = $355;
      }
      $tmp2 = $356;
      $357 = $tmp2;
      $358 = HEAP32[((80 + 32916|0))>>2]|0;
      $359 = ($358|0)==(0);
      do {
       if ($359) {
        $360 = HEAP32[((80 + 32920|0))>>2]|0;
        $361 = ($360|0)!=(0);
        if (!($361)) {
         $362 = (_load()|0);
         $363 = ($362|0)==(0);
         if (!($363)) {
          label = 138;
          break;
         }
        }
        $371 = 0;
       } else {
        label = 138;
       }
      } while(0);
      if ((label|0) == 138) {
       label = 0;
       $364 = HEAP32[((80 + 32916|0))>>2]|0;
       $365 = (($364) + -1)|0;
       HEAP32[((80 + 32916|0))>>2] = $365;
       $366 = HEAP32[((80 + 32912|0))>>2]|0;
       $367 = (($366) + 1|0);
       HEAP32[((80 + 32912|0))>>2] = $367;
       $368 = HEAP8[$366>>0]|0;
       $369 = $368&255;
       $371 = $369;
      }
      $370 = $371 << 8;
      $372 = (($357) + ($370))|0;
      $tmp4 = $372;
      $373 = $tmp4;
      $374 = HEAP32[((80 + 32916|0))>>2]|0;
      $375 = ($374|0)==(0);
      do {
       if ($375) {
        $376 = HEAP32[((80 + 32920|0))>>2]|0;
        $377 = ($376|0)!=(0);
        if (!($377)) {
         $378 = (_load()|0);
         $379 = ($378|0)==(0);
         if (!($379)) {
          label = 143;
          break;
         }
        }
        $386 = 0;
       } else {
        label = 143;
       }
      } while(0);
      if ((label|0) == 143) {
       label = 0;
       $380 = HEAP32[((80 + 32916|0))>>2]|0;
       $381 = (($380) + -1)|0;
       HEAP32[((80 + 32916|0))>>2] = $381;
       $382 = HEAP32[((80 + 32912|0))>>2]|0;
       $383 = (($382) + 1|0);
       HEAP32[((80 + 32912|0))>>2] = $383;
       $384 = HEAP8[$382>>0]|0;
       $385 = $384&255;
       $386 = $385;
      }
      $tmp2 = $386;
      $387 = $tmp2;
      $388 = HEAP32[((80 + 32916|0))>>2]|0;
      $389 = ($388|0)==(0);
      do {
       if ($389) {
        $390 = HEAP32[((80 + 32920|0))>>2]|0;
        $391 = ($390|0)!=(0);
        if (!($391)) {
         $392 = (_load()|0);
         $393 = ($392|0)==(0);
         if (!($393)) {
          label = 148;
          break;
         }
        }
        $401 = 0;
       } else {
        label = 148;
       }
      } while(0);
      if ((label|0) == 148) {
       label = 0;
       $394 = HEAP32[((80 + 32916|0))>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[((80 + 32916|0))>>2] = $395;
       $396 = HEAP32[((80 + 32912|0))>>2]|0;
       $397 = (($396) + 1|0);
       HEAP32[((80 + 32912|0))>>2] = $397;
       $398 = HEAP8[$396>>0]|0;
       $399 = $398&255;
       $401 = $399;
      }
      $400 = $401 << 8;
      $402 = (($387) + ($400))|0;
      $403 = $402 << 16;
      $404 = (($373) + ($403))|0;
      $405 = (_tolong($404)|0);
      HEAP32[((80 + 124|0))>>2] = $405;
      $406 = $size;
      $407 = (($406) - 4)|0;
      $size = $407;
     }
    }
   }
  }
  $408 = $size;
  $togo3 = $408;
  while(1) {
   $409 = $togo3;
   $410 = HEAP32[((80 + 32916|0))>>2]|0;
   $411 = ($409>>>0)>($410>>>0);
   if (!($411)) {
    break;
   }
   $412 = HEAP32[((80 + 32916|0))>>2]|0;
   $413 = $togo3;
   $414 = (($413) - ($412))|0;
   $togo3 = $414;
   $415 = (_load()|0);
   $416 = ($415|0)==(0);
   if ($416) {
    label = 156;
    break L1;
   }
  }
  $417 = $togo3;
  $418 = HEAP32[((80 + 32916|0))>>2]|0;
  $419 = (($418) - ($417))|0;
  HEAP32[((80 + 32916|0))>>2] = $419;
  $420 = $togo3;
  $421 = HEAP32[((80 + 32912|0))>>2]|0;
  $422 = (($421) + ($420)|0);
  HEAP32[((80 + 32912|0))>>2] = $422;
 }
 if ((label|0) == 24) {
  $0 = -1;
  $438 = $0;
  STACKTOP = sp;return ($438|0);
 }
 else if ((label|0) == 26) {
 }
 else if ((label|0) == 54) {
  $0 = -3;
  $438 = $0;
  STACKTOP = sp;return ($438|0);
 }
 else if ((label|0) == 84) {
  $0 = -3;
  $438 = $0;
  STACKTOP = sp;return ($438|0);
 }
 else if ((label|0) == 97) {
  $0 = -3;
  $438 = $0;
  STACKTOP = sp;return ($438|0);
 }
 else if ((label|0) == 156) {
  $0 = -3;
  $438 = $0;
  STACKTOP = sp;return ($438|0);
 }
 $423 = $1;
 $togo4 = $423;
 while(1) {
  $424 = $togo4;
  $425 = HEAP32[((80 + 32916|0))>>2]|0;
  $426 = ($424>>>0)>($425>>>0);
  if (!($426)) {
   break;
  }
  $427 = HEAP32[((80 + 32916|0))>>2]|0;
  $428 = $togo4;
  $429 = (($428) - ($427))|0;
  $togo4 = $429;
  $430 = (_load()|0);
  $431 = ($430|0)==(0);
  if ($431) {
   label = 164;
   break;
  }
 }
 if ((label|0) == 164) {
  $0 = -3;
  $438 = $0;
  STACKTOP = sp;return ($438|0);
 }
 $432 = $togo4;
 $433 = HEAP32[((80 + 32916|0))>>2]|0;
 $434 = (($433) - ($432))|0;
 HEAP32[((80 + 32916|0))>>2] = $434;
 $435 = $togo4;
 $436 = HEAP32[((80 + 32912|0))>>2]|0;
 $437 = (($436) + ($435)|0);
 HEAP32[((80 + 32912|0))>>2] = $437;
 $0 = 0;
 $438 = $0;
 STACKTOP = sp;return ($438|0);
}
function _tolong($val) {
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $val;
 $1 = $0;
 $2 = $1 & 2147483647;
 $3 = $0;
 $4 = $3 & -2147483648;
 $5 = (($2) - ($4))|0;
 STACKTOP = sp;return ($5|0);
}
function _vmemcpy($mem,$size,$off,$cpy,$len) {
 $mem = $mem|0;
 $size = $size|0;
 $off = $off|0;
 $cpy = $cpy|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $need = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $mem;
 $1 = $size;
 $2 = $off;
 $3 = $cpy;
 $4 = $len;
 $5 = $2;
 $6 = $4;
 $7 = (($5) + ($6))|0;
 $need = $7;
 $8 = $need;
 $9 = $2;
 $10 = ($8>>>0)<($9>>>0);
 if ($10) {
  HEAP32[$vararg_buffer>>2] = 0;
  _try_throw_(75,(67328|0),($vararg_buffer|0));
 }
 $11 = $need;
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = $need;
  $16 = (_grow($15)|0);
  $need = $16;
  $17 = $2;
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = $0;
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = $0;
    $23 = HEAP32[$22>>2]|0;
    _free($23);
    $24 = $0;
    HEAP32[$24>>2] = 0;
   }
   $25 = $1;
   HEAP32[$25>>2] = 0;
  }
  $26 = $0;
  $27 = HEAP32[$26>>2]|0;
  $28 = $need;
  $29 = (_alloc($27,$28)|0);
  $30 = $0;
  HEAP32[$30>>2] = $29;
  $31 = $need;
  $32 = $1;
  HEAP32[$32>>2] = $31;
 }
 $33 = $0;
 $34 = HEAP32[$33>>2]|0;
 $35 = $2;
 $36 = (($34) + ($35)|0);
 $37 = $3;
 $38 = $4;
 _memcpy(($36|0),($37|0),($38|0))|0;
 $39 = $2;
 $40 = $4;
 $41 = (($39) + ($40))|0;
 STACKTOP = sp;return ($41|0);
}
function _num($arg) {
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str = 0, $val = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $arg;
 $1 = $0;
 $str = $1;
 $val = 0;
 $2 = $str;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP32[$vararg_buffer>>2] = 0;
  _try_throw_(22,(137584|0),($vararg_buffer|0));
 }
 while(1) {
  $6 = $str;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)<(48);
  if ($9) {
   label = 8;
  } else {
   $10 = $str;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)>(57);
   if ($13) {
    label = 8;
   } else {
    $14 = $val;
    $15 = ($14|0)!=(0);
    if ($15) {
     $16 = $str;
     $17 = HEAP8[$16>>0]|0;
     $18 = $17 << 24 >> 24;
     $19 = (($18) - 48)|0;
     $20 = (-1 - ($19))|0;
     $21 = $val;
     $22 = (($20>>>0) / ($21>>>0))&-1;
     $23 = ($22>>>0)<(10);
     if ($23) {
      label = 8;
     }
    }
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $24 = $0;
   HEAP32[$vararg_buffer1>>2] = $24;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 0;
   _try_throw_(22,(137616|0),($vararg_buffer1|0));
  }
  $25 = $val;
  $26 = ($25*10)|0;
  $27 = $str;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = (($29) - 48)|0;
  $31 = (($26) + ($30))|0;
  $val = $31;
  $32 = $str;
  $33 = (($32) + 1|0);
  $str = $33;
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34<<24>>24)!=(0);
  if (!($35)) {
   break;
  }
 }
 $36 = $val;
 STACKTOP = sp;return ($36|0);
}
function _nprocs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = (_sysconf(84)|0);
 $0 = $1;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[138272>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((138272 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((138272 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[138272>>2] = $22;
     } else {
      $23 = HEAP32[((138272 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((138272 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((138272 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((138272 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[138272>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((138272 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((138272 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((138272 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((138272 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[138272>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[138272>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((138272 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((138272 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((138272 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((138272 + 8|0))>>2] = $81;
     HEAP32[((138272 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((138272 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((138272 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((138272 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((138272 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((138272 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((138272 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((138272 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((138272 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((138272 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((138272 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((138272 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((138272 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[138272>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[138272>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((138272 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((138272 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((138272 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((138272 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((138272 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((138272 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((138272 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((138272 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((138272 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((138272 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((138272 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((138272 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((138272 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((138272 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((138272 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((138272 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((138272 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[138272>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[138272>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((138272 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((138272 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((138272 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((138272 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((138272 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((138272 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L107: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L107;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((138272 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L87;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((138272 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((138272 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((138272 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((138272 + 20|0))>>2] = $514;
   HEAP32[((138272 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((138272 + 8|0))>>2] = 0;
   HEAP32[((138272 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((138272 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((138272 + 12|0))>>2] = $528;
  $529 = HEAP32[((138272 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((138272 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[138744>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((138744 + 8|0))>>2] = $538;
    HEAP32[((138744 + 4|0))>>2] = $538;
    HEAP32[((138744 + 12|0))>>2] = -1;
    HEAP32[((138744 + 16|0))>>2] = -1;
    HEAP32[((138744 + 20|0))>>2] = 0;
    HEAP32[((138272 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[138744>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((138744 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((138272 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((138272 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((138272 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((138272 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((138272 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((138272 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((138744 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((138272 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((138272 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((138744 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((138272 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((138272 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((138272 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((138272 + 432|0))>>2] = $633;
  $634 = HEAP32[((138272 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((138272 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((138272 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((138272 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((138272 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((138272 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((138272 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((138272 + 460|0))>>2] = 0;
    $641 = HEAP32[138744>>2]|0;
    HEAP32[((138272 + 36|0))>>2] = $641;
    HEAP32[((138272 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((138272 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((138272 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((138272 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((138272 + 24|0))>>2] = $654;
    HEAP32[((138272 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((138744 + 16|0))>>2]|0;
    HEAP32[((138272 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((138272 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((138272 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((138272 + 24|0))>>2] = $684;
       HEAP32[((138272 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((138744 + 16|0))>>2]|0;
       HEAP32[((138272 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((138272 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((138272 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((138272 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L345: do {
       if ($729) {
        $730 = HEAP32[((138272 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((138272 + 12|0))>>2] = $731;
        HEAP32[((138272 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((138272 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((138272 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((138272 + 8|0))>>2] = $737;
         HEAP32[((138272 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L352: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((138272 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[138272>>2]|0;
            $764 = $763 & $762;
            HEAP32[138272>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((138272 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((138272 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((138272 + 4|0))>>2] = $807;
             break L352;
            } else {
             $808 = HEAP32[((138272 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L352;
             }
            }
           } while(0);
           $815 = HEAP32[((138272 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((138272 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((138272 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[138272>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[138272>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((138272 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((138272 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((138272 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((138272 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((138272 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((138272 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L441: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L441;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((138272 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L345;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((138272 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((138272 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((138272 + 24|0))>>2] = $953;
    HEAP32[((138272 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((138744 + 16|0))>>2]|0;
    HEAP32[((138272 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((138272 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((138272 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((138272 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((138272 + 448|0))+12>>2]|0;
    HEAP32[((138272 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((138272 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((138272 + 460|0))>>2] = 0;
    HEAP32[((138272 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((138272 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[138272>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[138272>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((138272 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((138272 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((138272 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((138272 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((138272 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((138272 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L493: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L493;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((138272 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((138272 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((138272 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((138272 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((138272 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((138272 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((138272 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((138272 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((138272 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((138272 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[138272>>2]|0;
     $36 = $35 & $34;
     HEAP32[138272>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((138272 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((138272 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((138272 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((138272 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((138272 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((138272 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((138272 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((138272 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((138272 + 12|0))>>2] = $120;
   HEAP32[((138272 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((138272 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((138272 + 20|0))>>2] = 0;
   HEAP32[((138272 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((138272 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((138272 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((138272 + 8|0))>>2] = $128;
   HEAP32[((138272 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((138272 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((138272 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[138272>>2]|0;
     $152 = $151 & $150;
     HEAP32[138272>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((138272 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((138272 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((138272 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((138272 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((138272 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((138272 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((138272 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((138272 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((138272 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((138272 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((138272 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((138272 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[138272>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[138272>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((138272 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((138272 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((138272 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((138272 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((138272 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((138272 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L204: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L204;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((138272 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((138272 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((138272 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((138272 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((138272 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((138272 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa36 = 0, $$012 = 0, $$1$lcssa = 0, $$15 = 0, $$22 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $s$0$lcssa = 0, $s$0$lcssa35 = 0, $s$013 = 0, $s$13 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond11 = $3 & $4;
 L1: do {
  if ($or$cond11) {
   $5 = $c&255;
   $$012 = $n;$s$013 = $src;
   while(1) {
    $6 = HEAP8[$s$013>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa36 = $$012;$s$0$lcssa35 = $s$013;
     label = 6;
     break L1;
    }
    $8 = (($s$013) + 1|0);
    $9 = (($$012) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$012 = $9;$s$013 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa36 = $$0$lcssa;$s$0$lcssa35 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa35>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa36;$s$2 = $s$0$lcssa35;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa36>>>0)>(3);
    L11: do {
     if ($18) {
      $$15 = $$0$lcssa36;$w$06 = $s$0$lcssa35;
      while(1) {
       $19 = HEAP32[$w$06>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$15;$w$0$lcssa = $w$06;
        break L11;
       }
       $26 = (($w$06) + 4|0);
       $27 = (($$15) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$15 = $27;$w$06 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa36;$w$0$lcssa = $s$0$lcssa35;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$22 = $$1$lcssa;$s$13 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$13>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$22;$s$2 = $s$13;
       break L8;
      }
      $32 = (($s$13) + 1|0);
      $33 = (($$22) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$22 = $33;$s$13 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0;
 var $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((138272 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((138744 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $30 = HEAP32[((138272 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((138272 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((138272 + 24|0))>>2] = $36;
  HEAP32[((138272 + 12|0))>>2] = $35;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $42 = HEAP32[((138272 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((138272 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((138272 + 8|0))>>2] = $storemerge21;
  HEAP32[((138272 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((138272 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[138272>>2]|0;
    $88 = $87 & $86;
    HEAP32[138272>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((138272 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((138272 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((138272 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((138272 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((138272 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((138272 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$050 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$049 = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((138272 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((138272 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((138272 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((138272 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[138272>>2]|0;
     $32 = $31 & $30;
     HEAP32[138272>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((138272 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((138272 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((138272 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((138272 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((138272 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((138272 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((138272 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((138272 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((138272 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((138272 + 12|0))>>2] = $115;
   HEAP32[((138272 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((138272 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   HEAP32[((138272 + 20|0))>>2] = 0;
   HEAP32[((138272 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $120 = HEAP32[((138272 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((138272 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((138272 + 8|0))>>2] = $123;
   HEAP32[((138272 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   STACKTOP = sp;return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((138272 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[138272>>2]|0;
     $146 = $145 & $144;
     HEAP32[138272>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((138272 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((138272 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((138272 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((138272 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((138272 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((138272 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((138272 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((138272 + 8|0))>>2] = $128;
   STACKTOP = sp;return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((138272 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[138272>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[138272>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((138272 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((138272 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((138272 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  STACKTOP = sp;return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((138272 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((138272 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((138272 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  STACKTOP = sp;return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$050 = $283;$T$049 = $275;
   while(1) {
    $291 = $K20$050 >>> 31;
    $292 = ((($T$049) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     break;
    }
    $285 = $K20$050 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$050 = $285;$T$049 = $287;
    }
   }
   $294 = HEAP32[((138272 + 16|0))>>2]|0;
   $295 = ($292>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$292>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$049;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((138272 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 STACKTOP = sp;return;
}
function runPostSets() {
 
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _saveSetjmp(env, label, table) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < 20) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        return 0;
      }
      i = i+1|0;
    }
    _putchar(116);_putchar(111);_putchar(111);_putchar(32);_putchar(109);_putchar(97);_putchar(110);_putchar(121);_putchar(32);_putchar(115);_putchar(101);_putchar(116);_putchar(106);_putchar(109);_putchar(112);_putchar(115);_putchar(32);_putchar(105);_putchar(110);_putchar(32);_putchar(97);_putchar(32);_putchar(102);_putchar(117);_putchar(110);_putchar(99);_putchar(116);_putchar(105);_putchar(111);_putchar(110);_putchar(32);_putchar(99);_putchar(97);_putchar(108);_putchar(108);_putchar(44);_putchar(32);_putchar(98);_putchar(117);_putchar(105);_putchar(108);_putchar(100);_putchar(32);_putchar(119);_putchar(105);_putchar(116);_putchar(104);_putchar(32);_putchar(97);_putchar(32);_putchar(104);_putchar(105);_putchar(103);_putchar(104);_putchar(101);_putchar(114);_putchar(32);_putchar(118);_putchar(97);_putchar(108);_putchar(117);_putchar(101);_putchar(32);_putchar(102);_putchar(111);_putchar(114);_putchar(32);_putchar(77);_putchar(65);_putchar(88);_putchar(95);_putchar(83);_putchar(69);_putchar(84);_putchar(74);_putchar(77);_putchar(80);_putchar(83);_putchar(10);
    abort(0);
    return 0;
}
function _testSetjmp(id, table) {
    id = id|0;
    table = table|0;
    var i = 0, curr = 0;
    while ((i|0) < 20) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}

// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&63]()|0;
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&127](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&127](a1|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&63]();
  }


  function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    return FUNCTION_TABLE_iiiiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&127](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function _open__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _open(p0|0,p1|0,p2|0)|0; }
  function _fprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fprintf(p0|0,p1|0,p2|0)|0; }
  function _adler32__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _adler32(p0|0,p1|0,p2|0)|0; }
  function _crc32__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _crc32(p0|0,p1|0,p2|0)|0; }
  function _deflateParams__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _deflateParams(p0|0,p1|0,p2|0)|0; }
  function _deflateSetDictionary__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _deflateSetDictionary(p0|0,p1|0,p2|0)|0; }
  function _deflatePending__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _deflatePending(p0|0,p1|0,p2|0)|0; }
  function _deflatePrime__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _deflatePrime(p0|0,p1|0,p2|0)|0; }
  function b1() { ; nullFunc_i(1);return 0; }
  function ___errno_location__wrapper() { ; return ___errno_location()|0; }
  function _getchar__wrapper() { ; return _getchar()|0; }
  function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
  function _possess__wrapper(p0) { p0 = p0|0; _possess(p0|0); }
  function _release__wrapper(p0) { p0 = p0|0; _release(p0|0); }
  function _free_lock__wrapper(p0) { p0 = p0|0; _free_lock(p0|0); }
  function b3(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
  function _emscripten_longjmp__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_longjmp(p0|0,p1|0); }
  function b4(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(4); }
  function _ZopfliDeflatePart__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _ZopfliDeflatePart(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0); }
  function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
  function _pthread_getspecific__wrapper(p0) { p0 = p0|0; return _pthread_getspecific(p0|0)|0; }
  function _getenv__wrapper(p0) { p0 = p0|0; return _getenv(p0|0)|0; }
  function _strlen__wrapper(p0) { p0 = p0|0; return _strlen(p0|0)|0; }
  function _isatty__wrapper(p0) { p0 = p0|0; return _isatty(p0|0)|0; }
  function _time__wrapper(p0) { p0 = p0|0; return _time(p0|0)|0; }
  function _opendir__wrapper(p0) { p0 = p0|0; return _opendir(p0|0)|0; }
  function _readdir__wrapper(p0) { p0 = p0|0; return _readdir(p0|0)|0; }
  function _closedir__wrapper(p0) { p0 = p0|0; return _closedir(p0|0)|0; }
  function _strerror__wrapper(p0) { p0 = p0|0; return _strerror(p0|0)|0; }
  function _close__wrapper(p0) { p0 = p0|0; return _close(p0|0)|0; }
  function _fflush__wrapper(p0) { p0 = p0|0; return _fflush(p0|0)|0; }
  function _unlink__wrapper(p0) { p0 = p0|0; return _unlink(p0|0)|0; }
  function _peek_lock__wrapper(p0) { p0 = p0|0; return _peek_lock(p0|0)|0; }
  function _deflateReset__wrapper(p0) { p0 = p0|0; return _deflateReset(p0|0)|0; }
  function _deflateEnd__wrapper(p0) { p0 = p0|0; return _deflateEnd(p0|0)|0; }
  function b6(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6); }
  function _try_throw___wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _try_throw_(p0|0,p1|0,p2|0); }
  function _wait_for__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _wait_for(p0|0,p1|0,p2|0); }
  function _twist__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _twist(p0|0,p1|0,p2|0); }
  function b7() { ; nullFunc_v(7); }
  function _try_setup___wrapper() { ; _try_setup_(); }
  function b8(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(8);return 0; }
  function _deflateInit2___wrapper(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; return _deflateInit2_(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0)|0; }
  function b9(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(9);return 0; }
  function b10(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0; }
  function _pthread_setspecific__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _pthread_setspecific(p0|0,p1|0)|0; }
  function _signal__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _signal(p0|0,p1|0)|0; }
  function _fstat__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _fstat(p0|0,p1|0)|0; }
  function _lstat__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _lstat(p0|0,p1|0)|0; }
  function _strcpy__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _strcpy(p0|0,p1|0)|0; }
  function _putc__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _putc(p0|0,p1|0)|0; }
  function b11(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11); }
  function ___assert_fail__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,_open__wrapper,b0,b0,b0,b0,b0,b0,b0,b0,b0,_outb,b0,b0,b0,_fprintf__wrapper,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,_adler32__wrapper,_crc32__wrapper,b0,b0,b0,b0,b0,b0,_adler32_comb,_crc32_comb,b0,b0,b0,b0,b0,_deflateParams__wrapper,b0,_deflateSetDictionary__wrapper,b0,_deflatePending__wrapper,_deflatePrime__wrapper,b0,b0,b0,b0,_readn,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_i = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,___errno_location__wrapper,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_getchar__wrapper,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,_put_header,b1,b1,b1,b1];
  var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,b2,_cut_short,_cut_yarn,b2,b2,b2,b2,b2,b2,b2,b2,b2,_process,_free,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_single_compress,b2,b2,b2,b2,_outb_write,_outb_check,_write_thread,_compress_thread
  ,b2,b2,b2,_possess__wrapper,b2,b2,_drop_space,b2,_release__wrapper,b2,b2,_free_lock__wrapper,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_use_space,b2,_load_read,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_emscripten_longjmp__wrapper,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_copymeta,_touch,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_viiiiiiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_ZopfliDeflatePart__wrapper,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_ii = [b5,b5,_pthread_getspecific__wrapper,b5,b5,b5,b5,b5,b5,b5,_getenv__wrapper,_option,b5,b5,_strlen__wrapper,_isatty__wrapper,b5,b5,b5,b5,b5,b5,b5,_time__wrapper,b5,b5,_opendir__wrapper,_readdir__wrapper,_closedir__wrapper,_compressed_suffix,b5,_strerror__wrapper,_justname,b5,_get_header,_close__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,_fflush__wrapper,b5,b5,_unlink__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_peek_lock__wrapper,b5,_deflateReset__wrapper,b5,_get_space,b5,b5,b5,b5,b5,b5,_deflateEnd__wrapper,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_try_throw___wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,_wait_for__wrapper,_twist__wrapper,b6,_writen,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_deflate_engine,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_v = [b7,_try_setup___wrapper,b7,b7,b7,b7,b7,b7,b7,_defaults,b7,b7,b7,b7,b7,b7,_help,b7,b7,b7,_new_opts,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,_in_init,b7,b7,_infchk,_unlzw,b7,b7,b7,_list_info,b7,b7,b7,b7,b7,_cat,b7,_parallel_compress,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_iiiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_deflateInit2___wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_iiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_vstrcpy,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9];
  var FUNCTION_TABLE_iii = [b10,b10,b10,_pthread_setspecific__wrapper,b10,_strrchr,_signal__wrapper,b10,b10,b10,b10,b10,b10,_strcmp,b10,b10,b10,_complain,b10,b10,b10,b10,_fstat__wrapper,b10,_lstat__wrapper,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_alloc,_strcpy__wrapper,b10,b10,b10,b10,b10,b10,b10,_putc__wrapper,b10,b10,_inb,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10];
  var FUNCTION_TABLE_viiii = [b11,b11,b11,b11,___assert_fail__wrapper,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,_show_info,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_put_trailer,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11];

  return { _testSetjmp: _testSetjmp, _strlen: _strlen, _free: _free, _main: _main, _realloc: _realloc, _strncpy: _strncpy, _memmove: _memmove, _saveSetjmp: _saveSetjmp, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strcpy: _strcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



